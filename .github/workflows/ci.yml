on:
  push:
    branches: 
      - master
  pull_request:

name: Tests

defaults:
  run:
    shell: bash
      
env:
  CI: true
  FORCE_COLOR: 2


jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
           submodules: recursive

      - uses: actions/setup-node@v2
      - uses: cachix/install-nix-action@v13
      - uses: cachix/cachix-action@v10
        with:
          name: dapp

      - name: Install dependencies
        run: nix-shell --run 'make'
        
      - name: Check contracts are linted
        id: lint-check
        run: yarn lint:check

      - name: Run tests
        id: tests-run
        run: nix-shell --run 'make test'
        # Enable this if using forking tests
        # env:
        #  ETH_RPC_URL: https://eth-mainnet.alchemyapi.io/v2/${{ secrets.ALCHEMY_API_KEY }}

  deploy-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Cache dependencies
      - name: Cache node dependencies
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}

      # Install dependencies
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Create .env file
        run: cp .env.example .env

      - name: Build
        run: npx hardhat compile

      - name: Deploy contracts
        run: npx hardhat run hardhat_scripts/deploy.ts

  # deploy:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #          submodules: recursive
  #     - uses: actions/setup-node@v2
  #     - uses: cachix/install-nix-action@v13
  #     - uses: cachix/cachix-action@v10
  #       with:
  #         name: dapp

  #     - name: Install dependencies
  #       id: make-dependencies
  #       run: nix-shell --run 'make'

  #     - name: Build the contracts
  #       id: make-build
  #       run: nix-shell --run 'make build'

  #     - name: Deploy and run checks
  #       id: test-deploy
  #       run: nix-shell --run './scripts/test-deploy.sh'