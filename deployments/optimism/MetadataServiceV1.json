{
  "address": "0x99b7fb20f71B2C675a71ab8ab05349A9d4994E7F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_unitSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_erc20Decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_ticketFootnotes",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "crowdtainerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256[4]",
              "name": "unitPricePerType",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "quantities",
              "type": "uint256[4]"
            },
            {
              "internalType": "string[4]",
              "name": "productDescription",
              "type": "string[4]"
            },
            {
              "internalType": "uint256",
              "name": "numberOfProducts",
              "type": "uint256"
            }
          ],
          "internalType": "struct Metadata",
          "name": "_metadata",
          "type": "tuple"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4c16856f7caaf14511fd9c825f36a0a0172b0ccad7a03bc3dd4f40e39f3a3cf",
  "receipt": {
    "to": null,
    "from": "0x83957A1a966B6fa4b68e8a69d3894f3371434F57",
    "contractAddress": "0x99b7fb20f71B2C675a71ab8ab05349A9d4994E7F",
    "transactionIndex": 0,
    "gasUsed": "2015215",
    "logsBloom": "0x
    "blockHash": "0x2b375fec948945b49c4634620e61ad4bdb6ad9586957386bbb55a52bb31983e3",
    "transactionHash": "0xb4c16856f7caaf14511fd9c825f36a0a0172b0ccad7a03bc3dd4f40e39f3a3cf",
    "logs": [],
    "blockNumber": 47109534,
    "cumulativeGasUsed": "2015215",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "USDC",
    6,
    "This ticket is not valid as an invoice."
  ],
  "numDeployments": 1,
  "solcInputHash": "4f981a596268b262533e2b549096edb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unitSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_erc20Decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_ticketFootnotes\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crowdtainerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"unitPricePerType\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"quantities\",\"type\":\"uint256[4]\"},{\"internalType\":\"string[4]\",\"name\":\"productDescription\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"numberOfProducts\",\"type\":\"uint256\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uri((uint256,uint256,address,bool,uint256[4],uint256[4],string[4],uint256))\":{\"details\":\"Return a DATAURI containing a voucher SVG representation of the given tokenId.\",\"params\":{\"_metadata\":\"Address that represents the product or service provider.\"},\"returns\":{\"_0\":\"The voucher image in SVG, in data URI scheme.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Metadata/MetadataServiceV1.sol\":\"MetadataServiceV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"src/contracts/Metadata/IMetadataService.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nuint256 constant _MAX_NUMBER_OF_PRODUCTS = 4;\\n\\nstruct Metadata {\\n    uint256 crowdtainerId;\\n    uint256 tokenId;\\n    address currentOwner;\\n    bool claimed;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] quantities;\\n    string[_MAX_NUMBER_OF_PRODUCTS] productDescription;\\n    uint256 numberOfProducts;\\n}\\n\\n/**\\n * @dev Metadata service used to provide URI for a voucher / token id.\\n */\\ninterface IMetadataService {\\n    function uri(Metadata memory) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x35215bd7c471de78c1f2e2dbea1b6570116c86a29943996e94973ed4fb752ea5\",\"license\":\"GPL-3.0\"},\"src/contracts/Metadata/MetadataServiceV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IMetadataService.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n/* solhint-disable quotes */\\n\\ncontract MetadataServiceV1 is IMetadataService {\\n    using Strings for uint256;\\n    using Strings for uint24;\\n    using Strings for uint8;\\n\\n    uint24 internal constant yIncrement = 1;\\n    uint24 internal constant yStartingPoint = 10;\\n    uint24 internal constant anchorX = 2;\\n\\n    uint8 private erc20Decimals;\\n\\n    string private unitSymbol;\\n    string private ticketFootnotes;\\n\\n    function generateSVGProductDescription(\\n        uint256 quantities,\\n        uint256 price,\\n        string memory _unitSymbol,\\n        string memory description\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    quantities.toString(),\\n                    unicode\\\"\\\\t\\\",\\n                    \\\"  x  \\\",\\n                    unicode\\\"\\\\t\\\",\\n                    description,\\n                    unicode\\\"\\\\t\\\",\\n                    \\\" - \\\",\\n                    unicode\\\"\\\\t\\\",\\n                    price.toString(),\\n                    unicode\\\"\\\\t\\\",\\n                    _unitSymbol\\n                )\\n            );\\n    }\\n\\n    function generateProductList(\\n        Metadata calldata _metadata,\\n        string memory _unitSymbol,\\n        uint8 _erc20Decimals\\n    ) internal pure returns (string memory productList, uint256 totalCost) {\\n        uint256 newY = yStartingPoint;\\n\\n        for (uint24 i = 0; i < _metadata.numberOfProducts; i++) {\\n            if (_metadata.quantities[i] == 0) {\\n                continue;\\n            }\\n\\n            productList = string(\\n                abi.encodePacked(\\n                    productList,\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"small\\\" x=\\\"',\\n                    anchorX.toString(),\\n                    '\\\" y=\\\"',\\n                    newY.toString(),\\n                    '\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">',\\n                    generateSVGProductDescription(\\n                        _metadata.quantities[i],\\n                        _metadata.unitPricePerType[i] / (10**_erc20Decimals),\\n                        _unitSymbol,\\n                        _metadata.productDescription[i]\\n                    ),\\n                    \\\"</text>\\\"\\n                )\\n            );\\n\\n            if (i < _metadata.numberOfProducts) {\\n                newY += yIncrement;\\n            }\\n\\n            totalCost +=\\n                _metadata.unitPricePerType[i] *\\n                _metadata.quantities[i];\\n        }\\n\\n        return (productList, totalCost / 10**_erc20Decimals);\\n    }\\n\\n    function getSVGHeader() internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg width=\\\"100mm\\\" height=\\\"130mm\\\" viewBox=\\\"0 0 300 430\\\" version=\\\"1.1\\\" id=\\\"svg5\\\" '\\n                    'class=\\\"svgBody\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">'\\n                    '<g id=\\\"layer1\\\">'\\n                    '<path id=\\\"path2\\\" style=\\\"color:#000000;fill:url(#SvgjsLinearGradient2561);fill-opacity:0.899193;fill-rule:evenodd;stroke-width:1.54543;-inkscape-stroke:none\\\" '\\n                    'd=\\\"m32.202 12.58q-26.5047-.0216-26.4481 26.983l0 361.7384q.0114 11.831 15.7269 11.7809h76.797c-.1609-1.7418-.6734-11.5291 '\\n                    \\\"8.1908-11.0679.1453.008.3814.0165.5275.0165h90.8068c.1461 0 .383-.005.5291-.005 6.7016-.006 7.7083 9.3554 \\\"\\n                    \\\"7.836 11.0561.0109.1453.1352.2634.2813.2634l80.0931 0q12.2849.02 12.2947-12.2947v-361.7669q-.1068-26.9614-26.4482-26.9832h-66.2794c.003 \\\"\\n                    '12.6315.0504 9.5559-54.728 9.546-48.348.0106-51.5854 2.1768-51.8044-9.7542z\\\"/>'\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"medium\\\" x=\\\"10.478354\\\" y=\\\"0\\\" id=\\\"text16280-6-9\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.1325211,54.664932)\\\">',\\n                    '<tspan x=\\\"15.478354\\\" y=\\\"1\\\">Crowdtainer '\\n                )\\n            );\\n    }\\n\\n    function getSVGFooter() internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<style>.svgBody {font-family: \\\"Helvetica\\\" }'\\n                    \\\".tiny {font-stretch:normal;font-size:0.525624px;line-height:1.25;text-anchor:end;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".footer {font-stretch:normal;font-size:7px;line-height:.25;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".small {font-size:0.65px;text-align:start;text-anchor:start;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".medium {font-size:0.92px;\\\"\\n                    \\\"font-family:Helvetica;text-align:end;text-anchor:end;white-space:pre;\\\"\\n                    \\\"fill:#f9f9f9;}</style>\\\"\\n                    \\\"<linearGradient x1='0%' y1='30%' x2='60%' y2='90%' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2561'>\\\"\\n                    \\\"<stop stop-color='rgba(20, 110, 160, 100)' offset='0.02'></stop>\\\"\\n                    \\\"<stop stop-color='rgba(25, 59, 90, 100)' offset='1'></stop></linearGradient>\\\"\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function getSVGTotalCost(uint256 totalCost, uint256 numberOfProuducts)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 totalCostYShift = yStartingPoint +\\n            yIncrement *\\n            numberOfProuducts +\\n            anchorX; // constant just to give a bit of extra spacing\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"small\\\" ',\\n                    'x=\\\"2\\\" y=\\\"',\\n                    totalCostYShift.toString(),\\n                    '\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">',\\n                    \\\"Total \\\",\\n                    unicode\\\"\\uff04\\\",\\n                    totalCost.toString(),\\n                    \\\"</text>\\\"\\n                )\\n            );\\n    }\\n\\n    function getSVGClaimedInformation(bool claimedStatus)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string\\n            memory part1 = '<text xml:space=\\\"preserve\\\" class=\\\"tiny\\\" x=\\\"10.478354\\\" y=\\\"0\\\" id=\\\"text16280-6-9-7\\\" '\\n            'transform=\\\"matrix(16.4916,0,0,15.627547,5.7282884,90.160098)\\\"><tspan x=\\\"15.478354\\\" '\\n            'y=\\\"1.5\\\" id=\\\"tspan1163\\\">Claimed: ';\\n        string\\n            memory part2 = '</tspan></text><text xml:space=\\\"preserve\\\" class=\\\"medium\\\" '\\n            'x=\\\"13.478354\\\" y=\\\"14.1689944\\\" id=\\\"text16280-6\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">'\\n            '<tspan x=\\\"15.478354\\\" y=\\\"5.4\\\" id=\\\"tspan1165\\\">Voucher ';\\n        if (claimedStatus) {\\n            return string(abi.encodePacked(part1, \\\"Yes\\\", part2));\\n        } else {\\n            return string(abi.encodePacked(part1, \\\"No\\\", part2));\\n        }\\n    }\\n\\n    function generateImage(\\n        Metadata calldata _metadata,\\n        string memory _ticketFootnotes\\n    ) internal view returns (string memory) {\\n        string memory description;\\n        uint256 totalCost;\\n\\n        (description, totalCost) = generateProductList(\\n            _metadata,\\n            unitSymbol,\\n            erc20Decimals\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    getSVGHeader(),\\n                    _metadata.crowdtainerId.toString(),\\n                    \\\"</tspan></text>\\\",\\n                    getSVGClaimedInformation(_metadata.claimed),\\n                    _metadata.tokenId.toString(),\\n                    \\\"</tspan></text>\\\",\\n                    description,\\n                    getSVGTotalCost(totalCost, _metadata.numberOfProducts),\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"footer\\\" x=\\\"85\\\" y=\\\"380\\\" transform=\\\"scale(1.0272733,0.97345081)\\\">',\\n                    _ticketFootnotes,\\n                    \\\"</text></g>\\\",\\n                    getSVGFooter()\\n                )\\n            );\\n    }\\n\\n    constructor(\\n        string memory _unitSymbol,\\n        uint8 _erc20Decimals,\\n        string memory _ticketFootnotes\\n    ) {\\n        unitSymbol = _unitSymbol;\\n        erc20Decimals = _erc20Decimals;\\n        ticketFootnotes = _ticketFootnotes;\\n    }\\n\\n    /**\\n     * @dev Return a DATAURI containing a voucher SVG representation of the given tokenId.\\n     * @param _metadata Address that represents the product or service provider.\\n     * @return The voucher image in SVG, in data URI scheme.\\n     */\\n    function uri(Metadata calldata _metadata)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        string memory productList = \\\"[\\\";\\n        uint256 totalCost;\\n\\n        for (uint256 i = 0; i < _metadata.numberOfProducts; i++) {\\n            productList = string(\\n                abi.encodePacked(\\n                    productList,\\n                    '{\\\"description\\\":\\\"',\\n                    _metadata.productDescription[i],\\n                    '\\\",\\\"amount\\\":\\\"',\\n                    _metadata.quantities[i].toString(),\\n                    '\\\",\\\"pricePerUnit\\\":\\\"',\\n                    _metadata.unitPricePerType[i].toString(),\\n                    '\\\"}'\\n                )\\n            );\\n\\n            if (i < _metadata.numberOfProducts - 1) {\\n                productList = string(abi.encodePacked(productList, \\\", \\\"));\\n            }\\n            totalCost +=\\n                _metadata.unitPricePerType[i] *\\n                _metadata.quantities[i];\\n        }\\n\\n        productList = string(abi.encodePacked(productList, \\\"]\\\"));\\n\\n        string memory description = string(\\n            abi.encodePacked(\\n                productList,\\n                ', \\\"TotalCost\\\":\\\"',\\n                totalCost.toString(),\\n                '\\\"'\\n            )\\n        );\\n\\n        string memory image = Base64.encode(\\n            bytes(generateImage(_metadata, ticketFootnotes))\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"crowdtainerId\\\":\\\"',\\n                                _metadata.crowdtainerId.toString(),\\n                                '\\\", \\\"voucherId\\\":\\\"',\\n                                _metadata.tokenId.toString(),\\n                                '\\\", \\\"currentOwner\\\":\\\"',\\n                                addressToString(_metadata.currentOwner),\\n                                '\\\", ',\\n                                '\\\"erc20Symbol\\\":\\\"',\\n                                unitSymbol,\\n                                '\\\", \\\"erc20Decimals\\\":\\\"',\\n                                erc20Decimals.toString(),\\n                                '\\\", \\\"description\\\":',\\n                                description,\\n                                ', \\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return Strings.toHexString(uint256(uint160(_address)), 20);\\n    }\\n}\\n/* solhint-enable quotes */\\n\",\"keccak256\":\"0xe79b76ef878f982c9e0a76422134b506e9a09f5b719c9f05f438f763907cf0e4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024523803806200245283398101604081905262000034916200012f565b600162000042848262000242565b506000805460ff191660ff8416179055600262000060828262000242565b505050506200030e565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200009257600080fd5b81516001600160401b0380821115620000af57620000af6200006a565b604051601f8301601f19908116603f01168101908282118183101715620000da57620000da6200006a565b81604052838152602092508683858801011115620000f757600080fd5b600091505b838210156200011b5785820183015181830184015290820190620000fc565b600093810190920192909252949350505050565b6000806000606084860312156200014557600080fd5b83516001600160401b03808211156200015d57600080fd5b6200016b8783880162000080565b94506020860151915060ff821682146200018457600080fd5b6040860151919350808211156200019a57600080fd5b50620001a98682870162000080565b9150509250925092565b600181811c90821680620001c857607f821691505b602082108103620001e957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023d57600081815260208120601f850160051c81016020861015620002185750805b601f850160051c820191505b81811015620002395782815560010162000224565b5050505b505050565b81516001600160401b038111156200025e576200025e6200006a565b62000276816200026f8454620001b3565b84620001ef565b602080601f831160018114620002ae5760008415620002955750858301515b600019600386901b1c1916600185901b17855562000239565b600085815260208120601f198616915b82811015620002df57888601518255948401946001909101908401620002be565b5085821015620002fe5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612134806200031e6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639b9300f414610030575b600080fd5b61004361003e366004610f1c565b610059565b6040516100509190610f7c565b60405180910390f35b6040805180820190915260018152605b60f81b60208201526060906000805b846101a001358110156101ad5782610094610180870187610faf565b82600481106100a5576100a5610fcf565b6020028101906100b59190610fe5565b6100d8886101000185600481106100ce576100ce610fcf565b6020020135610338565b6100f08960800186600481106100ce576100ce610fcf565b60405160200161010495949392919061104f565b60408051601f19818403018152919052925061012660016101a0870135611115565b811015610150578260405160200161013e9190611128565b60405160208183030381529060405292505b8461010001816004811061016657610166610fcf565b602002013585608001826004811061018057610180610fcf565b602002013561018f919061114e565b610199908361116d565b9150806101a581611180565b915050610078565b50816040516020016101bf9190611199565b60405160208183030381529060405291506000826101dc83610338565b6040516020016101ed9291906111be565b6040516020818303038152906040529050600061029c610297876002805461021490611216565b80601f016020809104026020016040519081016040528092919081815260200182805461024090611216565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b5050505050610441565b610568565b905061030e6102ab8735610338565b6102b88860200135610338565b6102d06102cb60608b0160408c01611250565b6106bb565b6000546001906102e29060ff16610338565b87876040516020016102fa9796959493929190611279565b604051602081830303815290604052610568565b60405160200161031e919061149a565b604051602081830303815290604052945050505050919050565b60608160000361035f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610389578061037381611180565b91506103829050600a836114f5565b9150610363565b60008167ffffffffffffffff8111156103a4576103a4611509565b6040519080825280601f01601f1916602001820160405280156103ce576020820181803683370190505b5090505b8415610439576103e3600183611115565b91506103f0600a8661151f565b6103fb90603061116d565b60f81b81838151811061041057610410610fcf565b60200101906001600160f81b031916908160001a905350610432600a866114f5565b94506103d2565b949350505050565b60608060006104e2856001805461045790611216565b80601f016020809104026020016040519081016040528092919081815260200182805461048390611216565b80156104d05780601f106104a5576101008083540402835291602001916104d0565b820191906000526020600020905b8154815290600101906020018083116104b357829003601f168201915b505060005460ff1692506106d1915050565b90925090506104ef6108ba565b6104f98635610338565b61051161050c6080890160608a01611533565b6108df565b61051e8860200135610338565b8561052e868b6101a00135610961565b896105376109c4565b60405160200161054e989796959493929190611555565b604051602081830303815290604052925050505b92915050565b6060815160000361058757505060408051602081019091526000815290565b6000604051806060016040528060408152602001611fe760409139905060006003845160026105b6919061116d565b6105c091906114f5565b6105cb90600461114e565b67ffffffffffffffff8111156105e3576105e3611509565b6040519080825280601f01601f19166020018201604052801561060d576020820181803683370190505b509050600182016020820185865187015b80821015610679576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061061e565b505060038651066001811461069557600281146106a8576106b0565b603d6001830353603d60028303536106b0565b603d60018303535b509195945050505050565b6060610562826001600160a01b03166014610d33565b60606000600a815b866101a001358162ffffff1610156108965786610100018162ffffff166004811061070657610706610fcf565b602002013515610884578361071b6002610338565b61072484610338565b6107ea8a610100018562ffffff166004811061074257610742610fcf565b60200201356107528a600a61177f565b8c6080018762ffffff166004811061076c5761076c610fcf565b602002013561077b91906114f5565b8b61078a6101808f018f610faf565b8862ffffff16600481106107a0576107a0610fcf565b6020028101906107b09190610fe5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b6040516020016107fd94939291906117dd565b6040516020818303038152906040529350866101a001358162ffffff16101561082e5761082b60018361116d565b91505b86610100018162ffffff166004811061084957610849610fcf565b6020020135876080018262ffffff166004811061086857610868610fcf565b6020020135610877919061114e565b610881908461116d565b92505b8061088e81611891565b9150506106d9565b50826108a385600a61177f565b6108ad90846114f5565b9250925050935093915050565b60606040516020016108cb906118b3565b604051602081830303815290604052905090565b6060600060405180610100016040528060c48152602001611f0360c491399050600060405180610100016040528060d8815260200161202760d891399050831561094e578181604051602001610936929190611d2b565b60405160208183030381529060405292505050919050565b8181604051602001610936929190611d69565b60606000600261097284600161114e565b61097d90600a61116d565b610987919061116d565b905061099281610338565b61099b85610338565b6040516020016109ac929190611da6565b60405160208183030381529060405291505092915050565b60606040516020016108cb907f3c7374796c653e2e737667426f6479207b666f6e742d66616d696c793a20224881527f656c76657469636122207d2e74696e79207b666f6e742d737472657463683a6e60208201527f6f726d616c3b666f6e742d73697a653a302e35323536323470783b6c696e652d60408201527f6865696768743a312e32353b746578742d616e63686f723a656e643b7768697460608201527f652d73706163653a7072653b66696c6c3a236639663966393b7d2e666f6f746560808201527f72207b666f6e742d737472657463683a6e6f726d616c3b666f6e742d73697a6560a08201527f3a3770783b6c696e652d6865696768743a2e32353b77686974652d737061636560c08201527f3a7072653b66696c6c3a236639663966393b7d2e736d616c6c207b666f6e742d60e08201527f73697a653a302e363570783b746578742d616c69676e3a73746172743b7465786101008201527f742d616e63686f723a73746172743b77686974652d73706163653a7072653b666101208201527f696c6c3a236639663966393b7d2e6d656469756d207b666f6e742d73697a653a6101408201527f302e393270783b666f6e742d66616d696c793a48656c7665746963613b7465786101608201527f742d616c69676e3a656e643b746578742d616e63686f723a656e643b776869746101808201527f652d73706163653a7072653b66696c6c3a236639663966393b7d3c2f7374796c6101a08201527f653e3c6c696e6561724772616469656e742078313d273025272079313d2733306101c08201527f25272078323d27363025272079323d2739302527206772616469656e74556e696101e08201527f74733d277573657253706163654f6e557365272069643d275376676a734c696e6102008201527f6561724772616469656e7432353631273e3c73746f702073746f702d636f6c6f6102208201527f723d27726762612832302c203131302c203136302c203130302927206f6666736102408201527f65743d27302e3032273e3c2f73746f703e3c73746f702073746f702d636f6c6f6102608201527f723d27726762612832352c2035392c2039302c203130302927206f66667365746102808201527f3d2731273e3c2f73746f703e3c2f6c696e6561724772616469656e743e3c2f736102a0820152623b339f60e91b6102c08201526102c30190565b60606000610d4283600261114e565b610d4d90600261116d565b67ffffffffffffffff811115610d6557610d65611509565b6040519080825280601f01601f191660200182016040528015610d8f576020820181803683370190505b509050600360fc1b81600081518110610daa57610daa610fcf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610dd957610dd9610fcf565b60200101906001600160f81b031916908160001a9053506000610dfd84600261114e565b610e0890600161116d565b90505b6001811115610e80576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610e3c57610e3c610fcf565b1a60f81b828281518110610e5257610e52610fcf565b60200101906001600160f81b031916908160001a90535060049490941c93610e7981611e4c565b9050610e0b565b508315610ed35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060610ee585610338565b82610eef86610338565b85604051602001610f039493929190611e63565b6040516020818303038152906040529050949350505050565b600060208284031215610f2e57600080fd5b813567ffffffffffffffff811115610f4557600080fd5b82016101c08185031215610ed357600080fd5b60005b83811015610f73578181015183820152602001610f5b565b50506000910152565b6020815260008251806020840152610f9b816040850160208701610f58565b601f01601f19169190910160400192915050565b60008235607e19833603018112610fc557600080fd5b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610ffc57600080fd5b83018035915067ffffffffffffffff82111561101757600080fd5b60200191503681900382131561102c57600080fd5b9250929050565b60008151611045818560208601610f58565b9290920192915050565b60008651611061818460208b01610f58565b6f3d913232b9b1b934b83a34b7b7111d1160811b908301908152858760108301376b11161130b6b7bab73a111d1160a11b60109187019182015284516110ae81601c840160208901610f58565b71111611383934b1b2a832b92ab734ba111d1160711b601c929091019182015283516110e181602e840160208801610f58565b61227d60f01b602e9290910191820152603001979650505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610562576105626110ff565b6000825161113a818460208701610f58565b61016160f51b920191825250600201919050565b6000816000190483118215151615611168576111686110ff565b500290565b80820180821115610562576105626110ff565b600060018201611192576111926110ff565b5060010190565b600082516111ab818460208701610f58565b605d60f81b920191825250600101919050565b600083516111d0818460208801610f58565b6e1610112a37ba30b621b7b9ba111d1160891b90830190815283516111fc81600f840160208801610f58565b601160f91b600f9290910191820152601001949350505050565b600181811c9082168061122a57607f821691505b60208210810361124a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561126257600080fd5b81356001600160a01b0381168114610ed357600080fd5b713d9131b937bbb23a30b4b732b924b2111d1160711b815287516000906112a7816012850160208d01610f58565b6f111610113b37bab1b432b924b2111d1160811b60129184019182015288516112d7816022840160208d01610f58565b721116101131bab93932b73a27bbb732b9111d1160691b60229290910191820152875161130b816035840160208c01610f58565b6201116160ed1b603592909101918201526e1132b931991829bcb6b137b6111d1160891b60388201528654604790600090600181811c908083168061135157607f831692505b60208310810361136f57634e487b7160e01b85526022600452602485fd5b808015611383576001811461139c576113ce565b60ff1985168888015283151584028801870195506113ce565b60008e81526020902060005b858110156113c45781548a82018a0152908401906020016113a8565b5050868489010195505b505050505061148a61147c61147661144d61143561142f61141261140c88731116101132b93199182232b1b4b6b0b639911d1160611b815260140190565b8f611033565b70111610113232b9b1b934b83a34b7b7111d60791b815260110190565b8c611033565b6b16101134b6b0b3b2911d101160a11b8152600c0190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0190565b88611033565b61227d60f01b815260020190565b9c9b505050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114d281601d850160208701610f58565b91909101601d0192915050565b634e487b7160e01b600052601260045260246000fd5b600082611504576115046114df565b500490565b634e487b7160e01b600052604160045260246000fd5b60008261152e5761152e6114df565b500690565b60006020828403121561154557600080fd5b81358015158114610ed357600080fd5b6000895160206115688285838f01610f58565b8a519184019161157b8184848f01610f58565b6e1e17ba39b830b71f1e17ba32bc3a1f60891b92018281528a519092906115a881600f8601858f01610f58565b8a519301926115bd81600f8601858e01610f58565b600f93019283015287516115d781601e8501848c01610f58565b87519201916115ec81601e8501848b01610f58565b600080516020611fc7833981519152601e9390910192830152507f3d22666f6f7465722220783d2238352220793d2233383022207472616e73666f603e8201527f726d3d227363616c6528312e303237323733332c302e39373334353038312922605e820152601f60f91b607e82015261168c61168661166f607f840188611033565b6a1e17ba32bc3a1f1e17b39f60a91b8152600b0190565b85611033565b9b9a5050505050505050505050565b600181815b808511156116d65781600019048211156116bc576116bc6110ff565b808516156116c957918102915b93841c93908002906116a0565b509250929050565b6000826116ed57506001610562565b816116fa57506000610562565b8160018114611710576002811461171a57611736565b6001915050610562565b60ff84111561172b5761172b6110ff565b50506001821b610562565b5060208310610133831016604e8410600b8410161715611759575081810a610562565b611763838361169b565b8060001904821115611777576117776110ff565b029392505050565b6000610ed360ff8416836116de565b7f22207472616e73666f726d3d226d61747269782831362e343931362c302c302c81527f31352e3632373534372c372e3538393737322c362e3939343739303329223e006020820152603f0190565b600085516117ef818460208a01610f58565b8083019050600080516020611fc783398151915281526b1e9139b6b0b63611103c1e9160a11b6020820152855161182d81602c840160208a01610f58565b6411103c9e9160d91b602c92909101918201528451611853816031840160208901610f58565b61186160318284010161178e565b9150508351611874818360208801610f58565b661e17ba32bc3a1f60c91b91019081526007019695505050505050565b600062ffffff8083168181036118a9576118a96110ff565b6001019392505050565b7f3c7376672077696474683d223130306d6d22206865696768743d223133306d6d81527f222076696577426f783d223020302033303020343330222076657273696f6e3d60208201527f22312e31222069643d22737667352220636c6173733d22737667426f6479222060408201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660608201527f67223e3c672069643d226c6179657231223e3c706174682069643d227061746860808201527f3222207374796c653d22636f6c6f723a233030303030303b66696c6c3a75726c60a08201527f28235376676a734c696e6561724772616469656e7432353631293b66696c6c2d60c08201527f6f7061636974793a302e3839393139333b66696c6c2d72756c653a6576656e6f60e08201527f64643b7374726f6b652d77696474683a312e35343534333b2d696e6b736361706101008201527f652d7374726f6b653a6e6f6e652220643d226d33322e3230322031322e3538716101208201527f2d32362e353034372d2e303231362d32362e343438312032362e3938336c30206101408201527f3336312e37333834712e303131342031312e3833312031352e373236392031316101608201527f2e373830396837362e373937632d2e313630392d312e373431382d2e363733346101808201527f2d31312e3532393120382e313930382d31312e303637392e313435332e3030386101a08201527f2e333831342e303136352e353237352e303136356839302e38303638632e31346101c08201527f36312030202e3338332d2e3030352e353239312d2e30303520362e373031362d6101e08201527f2e30303620372e3730383320392e3335353420372e3833362031312e303536316102008201527f2e303130392e313435332e313335322e323633342e323831332e323633346c386102208201527f302e3039333120307131322e323834392e30322031322e323934372d31322e326102408201527f393437762d3336312e37363639712d2e313036382d32362e393631342d32362e6102608201527f343438322d32362e39383332682d36362e32373934632e3030332031322e36336102808201527f31352e3035303420392e353535392d35342e37323820392e3534362d34382e336102a08201527f34382e303130362d35312e3538353420322e313736382d35312e383034342d396102c08201527f2e373534327a222f3e3c7465787420786d6c3a73706163653d227072657365726102e08201527f76652220636c6173733d226d656469756d2220783d2231302e343738333534226103008201527f20793d2230222069643d227465787431363238302d362d3922207472616e73666103208201527f6f726d3d226d61747269782831362e343931362c302c302c31352e3632373534610340820152771b961b971899991a991898961a9a171b1b1a1c999914911f60411b6103608201527f3c747370616e20783d2231352e3437383335342220793d2231223e43726f77646103788201526603a30b4b732b9160cd1b610398820152600061039f8201610562565b60008351611d3d818460208801610f58565b6259657360e81b9083019081528351611d5d816003840160208801610f58565b01600301949350505050565b60008351611d7b818460208801610f58565b614e6f60f01b9083019081528351611d9a816002840160208801610f58565b01600201949350505050565b600080516020611fc783398151915281526801e9139b6b0b63611160bd1b6020820152683c1e911911103c9e9160b91b602982015260008351611df0816032850160208801610f58565b611dfe60328285010161178e565b6502a37ba30b6160d51b8152623bef2160ea1b60068201528451909150611e2c816009840160208801610f58565b661e17ba32bc3a1f60c91b60099290910191820152601001949350505050565b600081611e5b57611e5b6110ff565b506000190190565b60008551611e75818460208a01610f58565b8083019050600960f81b80825264010103c10160dd1b60018301528060068301528651611ea9816007850160208b01610f58565b600792019182018190526201016960ed1b6008830152600b82018190528551611ed981600c850160208a01610f58565b600c9201918201528351611ef481600d840160208801610f58565b01600d01969550505050505056fe3c7465787420786d6c3a73706163653d2270726573657276652220636c6173733d2274696e792220783d2231302e3437383335342220793d2230222069643d227465787431363238302d362d392d3722207472616e73666f726d3d226d61747269782831362e343931362c302c302c31352e3632373534372c352e373238323838342c39302e31363030393829223e3c747370616e20783d2231352e3437383335342220793d22312e35222069643d22747370616e31313633223e436c61696d65643a203c7465787420786d6c3a73706163653d2270726573657276652220636c6173734142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c2f747370616e3e3c2f746578743e3c7465787420786d6c3a73706163653d2270726573657276652220636c6173733d226d656469756d2220783d2231332e3437383335342220793d2231342e31363839393434222069643d227465787431363238302d3622207472616e73666f726d3d226d61747269782831362e343931362c302c302c31352e3632373534372c372e3538393737322c362e3939343739303329223e3c747370616e20783d2231352e3437383335342220793d22352e34222069643d22747370616e31313635223e566f756368657220a26469706673582212202429b93633fe28bd05dcf26873027e9b61552f95bcac9bc1f8241d3ff14818d864736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80639b9300f414610030575b600080fd5b61004361003e366004610f1c565b610059565b6040516100509190610f7c565b60405180910390f35b6040805180820190915260018152605b60f81b60208201526060906000805b846101a001358110156101ad5782610094610180870187610faf565b82600481106100a5576100a5610fcf565b6020028101906100b59190610fe5565b6100d8886101000185600481106100ce576100ce610fcf565b6020020135610338565b6100f08960800186600481106100ce576100ce610fcf565b60405160200161010495949392919061104f565b60408051601f19818403018152919052925061012660016101a0870135611115565b811015610150578260405160200161013e9190611128565b60405160208183030381529060405292505b8461010001816004811061016657610166610fcf565b602002013585608001826004811061018057610180610fcf565b602002013561018f919061114e565b610199908361116d565b9150806101a581611180565b915050610078565b50816040516020016101bf9190611199565b60405160208183030381529060405291506000826101dc83610338565b6040516020016101ed9291906111be565b6040516020818303038152906040529050600061029c610297876002805461021490611216565b80601f016020809104026020016040519081016040528092919081815260200182805461024090611216565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b5050505050610441565b610568565b905061030e6102ab8735610338565b6102b88860200135610338565b6102d06102cb60608b0160408c01611250565b6106bb565b6000546001906102e29060ff16610338565b87876040516020016102fa9796959493929190611279565b604051602081830303815290604052610568565b60405160200161031e919061149a565b604051602081830303815290604052945050505050919050565b60608160000361035f5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610389578061037381611180565b91506103829050600a836114f5565b9150610363565b60008167ffffffffffffffff8111156103a4576103a4611509565b6040519080825280601f01601f1916602001820160405280156103ce576020820181803683370190505b5090505b8415610439576103e3600183611115565b91506103f0600a8661151f565b6103fb90603061116d565b60f81b81838151811061041057610410610fcf565b60200101906001600160f81b031916908160001a905350610432600a866114f5565b94506103d2565b949350505050565b60608060006104e2856001805461045790611216565b80601f016020809104026020016040519081016040528092919081815260200182805461048390611216565b80156104d05780601f106104a5576101008083540402835291602001916104d0565b820191906000526020600020905b8154815290600101906020018083116104b357829003601f168201915b505060005460ff1692506106d1915050565b90925090506104ef6108ba565b6104f98635610338565b61051161050c6080890160608a01611533565b6108df565b61051e8860200135610338565b8561052e868b6101a00135610961565b896105376109c4565b60405160200161054e989796959493929190611555565b604051602081830303815290604052925050505b92915050565b6060815160000361058757505060408051602081019091526000815290565b6000604051806060016040528060408152602001611fe760409139905060006003845160026105b6919061116d565b6105c091906114f5565b6105cb90600461114e565b67ffffffffffffffff8111156105e3576105e3611509565b6040519080825280601f01601f19166020018201604052801561060d576020820181803683370190505b509050600182016020820185865187015b80821015610679576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f811685015184535060018301925061061e565b505060038651066001811461069557600281146106a8576106b0565b603d6001830353603d60028303536106b0565b603d60018303535b509195945050505050565b6060610562826001600160a01b03166014610d33565b60606000600a815b866101a001358162ffffff1610156108965786610100018162ffffff166004811061070657610706610fcf565b602002013515610884578361071b6002610338565b61072484610338565b6107ea8a610100018562ffffff166004811061074257610742610fcf565b60200201356107528a600a61177f565b8c6080018762ffffff166004811061076c5761076c610fcf565b602002013561077b91906114f5565b8b61078a6101808f018f610faf565b8862ffffff16600481106107a0576107a0610fcf565b6020028101906107b09190610fe5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eda92505050565b6040516020016107fd94939291906117dd565b6040516020818303038152906040529350866101a001358162ffffff16101561082e5761082b60018361116d565b91505b86610100018162ffffff166004811061084957610849610fcf565b6020020135876080018262ffffff166004811061086857610868610fcf565b6020020135610877919061114e565b610881908461116d565b92505b8061088e81611891565b9150506106d9565b50826108a385600a61177f565b6108ad90846114f5565b9250925050935093915050565b60606040516020016108cb906118b3565b604051602081830303815290604052905090565b6060600060405180610100016040528060c48152602001611f0360c491399050600060405180610100016040528060d8815260200161202760d891399050831561094e578181604051602001610936929190611d2b565b60405160208183030381529060405292505050919050565b8181604051602001610936929190611d69565b60606000600261097284600161114e565b61097d90600a61116d565b610987919061116d565b905061099281610338565b61099b85610338565b6040516020016109ac929190611da6565b60405160208183030381529060405291505092915050565b60606040516020016108cb907f3c7374796c653e2e737667426f6479207b666f6e742d66616d696c793a20224881527f656c76657469636122207d2e74696e79207b666f6e742d737472657463683a6e60208201527f6f726d616c3b666f6e742d73697a653a302e35323536323470783b6c696e652d60408201527f6865696768743a312e32353b746578742d616e63686f723a656e643b7768697460608201527f652d73706163653a7072653b66696c6c3a236639663966393b7d2e666f6f746560808201527f72207b666f6e742d737472657463683a6e6f726d616c3b666f6e742d73697a6560a08201527f3a3770783b6c696e652d6865696768743a2e32353b77686974652d737061636560c08201527f3a7072653b66696c6c3a236639663966393b7d2e736d616c6c207b666f6e742d60e08201527f73697a653a302e363570783b746578742d616c69676e3a73746172743b7465786101008201527f742d616e63686f723a73746172743b77686974652d73706163653a7072653b666101208201527f696c6c3a236639663966393b7d2e6d656469756d207b666f6e742d73697a653a6101408201527f302e393270783b666f6e742d66616d696c793a48656c7665746963613b7465786101608201527f742d616c69676e3a656e643b746578742d616e63686f723a656e643b776869746101808201527f652d73706163653a7072653b66696c6c3a236639663966393b7d3c2f7374796c6101a08201527f653e3c6c696e6561724772616469656e742078313d273025272079313d2733306101c08201527f25272078323d27363025272079323d2739302527206772616469656e74556e696101e08201527f74733d277573657253706163654f6e557365272069643d275376676a734c696e6102008201527f6561724772616469656e7432353631273e3c73746f702073746f702d636f6c6f6102208201527f723d27726762612832302c203131302c203136302c203130302927206f6666736102408201527f65743d27302e3032273e3c2f73746f703e3c73746f702073746f702d636f6c6f6102608201527f723d27726762612832352c2035392c2039302c203130302927206f66667365746102808201527f3d2731273e3c2f73746f703e3c2f6c696e6561724772616469656e743e3c2f736102a0820152623b339f60e91b6102c08201526102c30190565b60606000610d4283600261114e565b610d4d90600261116d565b67ffffffffffffffff811115610d6557610d65611509565b6040519080825280601f01601f191660200182016040528015610d8f576020820181803683370190505b509050600360fc1b81600081518110610daa57610daa610fcf565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610dd957610dd9610fcf565b60200101906001600160f81b031916908160001a9053506000610dfd84600261114e565b610e0890600161116d565b90505b6001811115610e80576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610e3c57610e3c610fcf565b1a60f81b828281518110610e5257610e52610fcf565b60200101906001600160f81b031916908160001a90535060049490941c93610e7981611e4c565b9050610e0b565b508315610ed35760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640160405180910390fd5b9392505050565b6060610ee585610338565b82610eef86610338565b85604051602001610f039493929190611e63565b6040516020818303038152906040529050949350505050565b600060208284031215610f2e57600080fd5b813567ffffffffffffffff811115610f4557600080fd5b82016101c08185031215610ed357600080fd5b60005b83811015610f73578181015183820152602001610f5b565b50506000910152565b6020815260008251806020840152610f9b816040850160208701610f58565b601f01601f19169190910160400192915050565b60008235607e19833603018112610fc557600080fd5b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112610ffc57600080fd5b83018035915067ffffffffffffffff82111561101757600080fd5b60200191503681900382131561102c57600080fd5b9250929050565b60008151611045818560208601610f58565b9290920192915050565b60008651611061818460208b01610f58565b6f3d913232b9b1b934b83a34b7b7111d1160811b908301908152858760108301376b11161130b6b7bab73a111d1160a11b60109187019182015284516110ae81601c840160208901610f58565b71111611383934b1b2a832b92ab734ba111d1160711b601c929091019182015283516110e181602e840160208801610f58565b61227d60f01b602e9290910191820152603001979650505050505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610562576105626110ff565b6000825161113a818460208701610f58565b61016160f51b920191825250600201919050565b6000816000190483118215151615611168576111686110ff565b500290565b80820180821115610562576105626110ff565b600060018201611192576111926110ff565b5060010190565b600082516111ab818460208701610f58565b605d60f81b920191825250600101919050565b600083516111d0818460208801610f58565b6e1610112a37ba30b621b7b9ba111d1160891b90830190815283516111fc81600f840160208801610f58565b601160f91b600f9290910191820152601001949350505050565b600181811c9082168061122a57607f821691505b60208210810361124a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561126257600080fd5b81356001600160a01b0381168114610ed357600080fd5b713d9131b937bbb23a30b4b732b924b2111d1160711b815287516000906112a7816012850160208d01610f58565b6f111610113b37bab1b432b924b2111d1160811b60129184019182015288516112d7816022840160208d01610f58565b721116101131bab93932b73a27bbb732b9111d1160691b60229290910191820152875161130b816035840160208c01610f58565b6201116160ed1b603592909101918201526e1132b931991829bcb6b137b6111d1160891b60388201528654604790600090600181811c908083168061135157607f831692505b60208310810361136f57634e487b7160e01b85526022600452602485fd5b808015611383576001811461139c576113ce565b60ff1985168888015283151584028801870195506113ce565b60008e81526020902060005b858110156113c45781548a82018a0152908401906020016113a8565b5050868489010195505b505050505061148a61147c61147661144d61143561142f61141261140c88731116101132b93199182232b1b4b6b0b639911d1160611b815260140190565b8f611033565b70111610113232b9b1b934b83a34b7b7111d60791b815260110190565b8c611033565b6b16101134b6b0b3b2911d101160a11b8152600c0190565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152601a0190565b88611033565b61227d60f01b815260020190565b9c9b505050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516114d281601d850160208701610f58565b91909101601d0192915050565b634e487b7160e01b600052601260045260246000fd5b600082611504576115046114df565b500490565b634e487b7160e01b600052604160045260246000fd5b60008261152e5761152e6114df565b500690565b60006020828403121561154557600080fd5b81358015158114610ed357600080fd5b6000895160206115688285838f01610f58565b8a519184019161157b8184848f01610f58565b6e1e17ba39b830b71f1e17ba32bc3a1f60891b92018281528a519092906115a881600f8601858f01610f58565b8a519301926115bd81600f8601858e01610f58565b600f93019283015287516115d781601e8501848c01610f58565b87519201916115ec81601e8501848b01610f58565b600080516020611fc7833981519152601e9390910192830152507f3d22666f6f7465722220783d2238352220793d2233383022207472616e73666f603e8201527f726d3d227363616c6528312e303237323733332c302e39373334353038312922605e820152601f60f91b607e82015261168c61168661166f607f840188611033565b6a1e17ba32bc3a1f1e17b39f60a91b8152600b0190565b85611033565b9b9a5050505050505050505050565b600181815b808511156116d65781600019048211156116bc576116bc6110ff565b808516156116c957918102915b93841c93908002906116a0565b509250929050565b6000826116ed57506001610562565b816116fa57506000610562565b8160018114611710576002811461171a57611736565b6001915050610562565b60ff84111561172b5761172b6110ff565b50506001821b610562565b5060208310610133831016604e8410600b8410161715611759575081810a610562565b611763838361169b565b8060001904821115611777576117776110ff565b029392505050565b6000610ed360ff8416836116de565b7f22207472616e73666f726d3d226d61747269782831362e343931362c302c302c81527f31352e3632373534372c372e3538393737322c362e3939343739303329223e006020820152603f0190565b600085516117ef818460208a01610f58565b8083019050600080516020611fc783398151915281526b1e9139b6b0b63611103c1e9160a11b6020820152855161182d81602c840160208a01610f58565b6411103c9e9160d91b602c92909101918201528451611853816031840160208901610f58565b61186160318284010161178e565b9150508351611874818360208801610f58565b661e17ba32bc3a1f60c91b91019081526007019695505050505050565b600062ffffff8083168181036118a9576118a96110ff565b6001019392505050565b7f3c7376672077696474683d223130306d6d22206865696768743d223133306d6d81527f222076696577426f783d223020302033303020343330222076657273696f6e3d60208201527f22312e31222069643d22737667352220636c6173733d22737667426f6479222060408201527f786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737660608201527f67223e3c672069643d226c6179657231223e3c706174682069643d227061746860808201527f3222207374796c653d22636f6c6f723a233030303030303b66696c6c3a75726c60a08201527f28235376676a734c696e6561724772616469656e7432353631293b66696c6c2d60c08201527f6f7061636974793a302e3839393139333b66696c6c2d72756c653a6576656e6f60e08201527f64643b7374726f6b652d77696474683a312e35343534333b2d696e6b736361706101008201527f652d7374726f6b653a6e6f6e652220643d226d33322e3230322031322e3538716101208201527f2d32362e353034372d2e303231362d32362e343438312032362e3938336c30206101408201527f3336312e37333834712e303131342031312e3833312031352e373236392031316101608201527f2e373830396837362e373937632d2e313630392d312e373431382d2e363733346101808201527f2d31312e3532393120382e313930382d31312e303637392e313435332e3030386101a08201527f2e333831342e303136352e353237352e303136356839302e38303638632e31346101c08201527f36312030202e3338332d2e3030352e353239312d2e30303520362e373031362d6101e08201527f2e30303620372e3730383320392e3335353420372e3833362031312e303536316102008201527f2e303130392e313435332e313335322e323633342e323831332e323633346c386102208201527f302e3039333120307131322e323834392e30322031322e323934372d31322e326102408201527f393437762d3336312e37363639712d2e313036382d32362e393631342d32362e6102608201527f343438322d32362e39383332682d36362e32373934632e3030332031322e36336102808201527f31352e3035303420392e353535392d35342e37323820392e3534362d34382e336102a08201527f34382e303130362d35312e3538353420322e313736382d35312e383034342d396102c08201527f2e373534327a222f3e3c7465787420786d6c3a73706163653d227072657365726102e08201527f76652220636c6173733d226d656469756d2220783d2231302e343738333534226103008201527f20793d2230222069643d227465787431363238302d362d3922207472616e73666103208201527f6f726d3d226d61747269782831362e343931362c302c302c31352e3632373534610340820152771b961b971899991a991898961a9a171b1b1a1c999914911f60411b6103608201527f3c747370616e20783d2231352e3437383335342220793d2231223e43726f77646103788201526603a30b4b732b9160cd1b610398820152600061039f8201610562565b60008351611d3d818460208801610f58565b6259657360e81b9083019081528351611d5d816003840160208801610f58565b01600301949350505050565b60008351611d7b818460208801610f58565b614e6f60f01b9083019081528351611d9a816002840160208801610f58565b01600201949350505050565b600080516020611fc783398151915281526801e9139b6b0b63611160bd1b6020820152683c1e911911103c9e9160b91b602982015260008351611df0816032850160208801610f58565b611dfe60328285010161178e565b6502a37ba30b6160d51b8152623bef2160ea1b60068201528451909150611e2c816009840160208801610f58565b661e17ba32bc3a1f60c91b60099290910191820152601001949350505050565b600081611e5b57611e5b6110ff565b506000190190565b60008551611e75818460208a01610f58565b8083019050600960f81b80825264010103c10160dd1b60018301528060068301528651611ea9816007850160208b01610f58565b600792019182018190526201016960ed1b6008830152600b82018190528551611ed981600c850160208a01610f58565b600c9201918201528351611ef481600d840160208801610f58565b01600d01969550505050505056fe3c7465787420786d6c3a73706163653d2270726573657276652220636c6173733d2274696e792220783d2231302e3437383335342220793d2230222069643d227465787431363238302d362d392d3722207472616e73666f726d3d226d61747269782831362e343931362c302c302c31352e3632373534372c352e373238323838342c39302e31363030393829223e3c747370616e20783d2231352e3437383335342220793d22312e35222069643d22747370616e31313633223e436c61696d65643a203c7465787420786d6c3a73706163653d2270726573657276652220636c6173734142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c2f747370616e3e3c2f746578743e3c7465787420786d6c3a73706163653d2270726573657276652220636c6173733d226d656469756d2220783d2231332e3437383335342220793d2231342e31363839393434222069643d227465787431363238302d3622207472616e73666f726d3d226d61747269782831362e343931362c302c302c31352e3632373534372c372e3538393737322c362e3939343739303329223e3c747370616e20783d2231352e3437383335342220793d22352e34222069643d22747370616e31313635223e566f756368657220a26469706673582212202429b93633fe28bd05dcf26873027e9b61552f95bcac9bc1f8241d3ff14818d864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "uri((uint256,uint256,address,bool,uint256[4],uint256[4],string[4],uint256))": {
        "details": "Return a DATAURI containing a voucher SVG representation of the given tokenId.",
        "params": {
          "_metadata": "Address that represents the product or service provider."
        },
        "returns": {
          "_0": "The voucher image in SVG, in data URI scheme."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 337,
        "contract": "src/contracts/Metadata/MetadataServiceV1.sol:MetadataServiceV1",
        "label": "erc20Decimals",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 339,
        "contract": "src/contracts/Metadata/MetadataServiceV1.sol:MetadataServiceV1",
        "label": "unitSymbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 341,
        "contract": "src/contracts/Metadata/MetadataServiceV1.sol:MetadataServiceV1",
        "label": "ticketFootnotes",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}