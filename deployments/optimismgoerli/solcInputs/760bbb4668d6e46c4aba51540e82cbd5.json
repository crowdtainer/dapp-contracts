{
  "language": "Solidity",
  "sources": {
    "src/contracts/Constants.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\n// -----------------------------------------------\n//  Safety margins to avoid impractical values\n// -----------------------------------------------\nuint256 constant SAFETY_TIME_RANGE = 1 hours;\n// @notice Maximum value for referral discounts and rewards\nuint256 constant SAFETY_MAX_REFERRAL_RATE = 50;\n// @notice Maximum number of different products for a given Crowdtainer deployment.\nuint256 constant MAX_NUMBER_OF_PRODUCTS = 4;\n// @notice Maximum number of items per type on each purchase/join.\nuint256 constant MAX_NUMBER_OF_PURCHASED_ITEMS = 200;\n"
    },
    "src/contracts/Vouchers721.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\n// @dev External dependencies\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\n\n// @dev Internal dependencies\nimport \"./ICrowdtainer.sol\";\nimport \"./Crowdtainer.sol\";\nimport \"./Errors.sol\";\nimport \"./Constants.sol\";\nimport \"./Metadata/IMetadataService.sol\";\n\n/**\n * @title Crowdtainer's project manager contract.\n * @author Crowdtainer.eth\n * @notice Manages Crowdtainer projects and ownership of its product/services by participants.\n * @dev Essentially, a Crowdtainer factory with ERC-721 compliance.\n * @dev Each token id represents a \"sold voucher\", a set of one or more products or services of a specific Crowdtainer.\n */\ncontract Vouchers721 is ERC721Enumerable {\n    // @dev Each Crowdtainer project is alloacted a range.\n    // @dev This is used as a multiple to deduce the crowdtainer id from a given token id.\n    uint256 public constant ID_MULTIPLE = 1000000;\n\n    // @dev Claimed status of a specific token id\n    BitMaps.BitMap private claimed;\n\n    // @dev The next available tokenId for the given crowdtainerId.\n    mapping(uint256 => uint256) private nextTokenIdForCrowdtainer;\n\n    // @dev Number of created crowdtainers.\n    uint256 public crowdtainerCount;\n\n    address private immutable crowdtainerImplementation;\n\n    // @dev Mapping of id to Crowdtainer contract address.\n    mapping(uint256 => address) public crowdtainerForId;\n    // @dev Mapping of deployed Crowdtainer contract addresses to its token id.\n    mapping(address => uint256) public idForCrowdtainer;\n\n    // @dev Mapping of base token ID to metadata service, used as return value for URI method.\n    mapping(uint256 => address) public metadataServiceForCrowdatinerId;\n\n    // @dev Mapping of token ID => product quantities.\n    mapping(uint256 => uint256[MAX_NUMBER_OF_PRODUCTS])\n        public tokenIdQuantities;\n\n    // @dev Mapping of crowdtainer id => array of product descriptions.\n    mapping(uint256 => string[MAX_NUMBER_OF_PRODUCTS])\n        public productDescription;\n\n    // -----------------------------------------------\n    //  Events\n    // -----------------------------------------------\n\n    // @note Emmited when this contract is created.\n    event Vouchers721Created(address indexed crowdtainer);\n\n    // @note Emmited when a new Crowdtainer is deployed and initialized by this contract.\n    event CrowdtainerDeployed(\n        address indexed _crowdtainerAddress,\n        uint256 _nextCrowdtainerId\n    );\n\n    // -----------------------------------------------\n    //  Contract functions\n    // -----------------------------------------------\n\n    /**\n     * @notice Create and deploy a new Crowdtainer manager.\n     * @dev Uses contract factory pattern.\n     * @param _crowdtainerImplementation the address of the reference implementation.\n     */\n    constructor(address _crowdtainerImplementation)\n        ERC721(\"Vouchers721\", \"VV1\")\n    {\n        // equivalent to: crowdtainerImplementation = address(new Crowdtainer(address(this)));.\n        crowdtainerImplementation = _crowdtainerImplementation;\n        emit Vouchers721Created(address(this));\n    }\n\n    /**\n     * @notice Create and deploy a new Crowdtainer.\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\n     * @param _productDescription An array with the description of each item.\n     * @param _metadataService Contract address used to fetch metadata about the token.\n     * @return crowdtainerId The contract address and id for the created Crowdtainer.\n     */\n    function createCrowdtainer(\n        CampaignData calldata _campaignData,\n        string[MAX_NUMBER_OF_PRODUCTS] memory _productDescription,\n        address _metadataService\n    ) external returns (address, uint256) {\n        if (_metadataService == address(0)) {\n            revert Errors.MetadataServiceAddressIsZero();\n        }\n\n        ICrowdtainer crowdtainer = ICrowdtainer(\n            Clones.clone(crowdtainerImplementation)\n        );\n        // ICrowdtainer crowdtainer = ICrowdtainer(new Crowdtainer());\n\n        crowdtainer.initialize(address(this), _campaignData);\n\n        idForCrowdtainer[address(crowdtainer)] = ++crowdtainerCount;\n        crowdtainerForId[crowdtainerCount] = address(crowdtainer);\n\n        productDescription[crowdtainerCount] = _productDescription;\n        metadataServiceForCrowdatinerId[crowdtainerCount] = _metadataService;\n        emit CrowdtainerDeployed(address(crowdtainer), crowdtainerCount);\n\n        return (address(crowdtainer), crowdtainerCount);\n    }\n\n    /**\n     * @notice Join the specified Crowdtainer project.\n     * @param _crowdtainer Crowdtainer project address.\n     * @param _quantities Array with the number of units desired for each product.\n     *\n     * @dev This method is present to make wallet UX more friendly, by requiring fewer parameters (for projects with referral system disabled).\n     * @dev Requires IERC20 permit.\n     */\n    function join(\n        address _crowdtainer,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities\n    ) external returns (uint256) {\n        return join(_crowdtainer, _quantities, false, address(0));\n    }\n\n    /**\n     * @notice Join the specified Crowdtainer project with optional referral and discount.\n     * @param _crowdtainer Crowdtainer project address.\n     * @param _quantities Array with the number of units desired for each product.\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\n     * @param _referrer Optional referral code to be used to claim a discount.\n     * @return The token id that represents the created voucher / ownership.\n     *\n     * @dev Requires IERC20 permit.\n     * @dev referrer is the wallet address of a previous participant.\n     * @dev if `enableReferral` is true, and the user decides to leave after the wallet has been used to claim a discount,\n     *       then the full value can't be claimed if deciding to leave the project.\n     * @dev A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\n     *      To 'update' an order, the user must first 'leave' then join again with the new values.\n     */\n    function join(\n        address _crowdtainer,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\n        bool _enableReferral,\n        address _referrer\n    ) public returns (uint256) {\n        uint256 crowdtainerId = idForCrowdtainer[_crowdtainer];\n\n        if (crowdtainerId == 0) {\n            revert Errors.CrowdtainerInexistent();\n        }\n\n        ICrowdtainer crowdtainer = ICrowdtainer(_crowdtainer);\n\n        try\n            crowdtainer.join(\n                msg.sender,\n                _quantities,\n                _enableReferral,\n                _referrer\n            )\n        /* solhint-disable-next-line no-empty-blocks */\n        {\n\n        } catch (bytes memory receivedBytes) {\n            bytes4 receivedErrorSelector = this.getSignature(receivedBytes);\n\n            if (receivedErrorSelector == Errors.OffchainLookup.selector) {\n                // decode error parameters\n                (\n                    address sender,\n                    string[] memory urls,\n                    bytes memory callData,\n                    bytes4 callbackFunction,\n                    bytes memory extraData\n                ) = abi.decode(\n                        this.getParameters(receivedBytes),\n                        (address, string[], bytes, bytes4, bytes)\n                    );\n\n                if (sender != address(crowdtainer)) {\n                    revert Errors.CCIP_Read_InvalidOperation();\n                }\n\n                revert Errors.OffchainLookup(\n                    address(this),\n                    urls,\n                    callData,\n                    Vouchers721.joinWithSignature.selector,\n                    abi.encode(\n                        address(crowdtainer),\n                        callbackFunction,\n                        extraData\n                    )\n                );\n            } else if (\n                receivedErrorSelector == Errors.SignatureExpired.selector\n            ) {\n                (uint64 current, uint64 expires) = abi.decode(\n                    this.getParameters(receivedBytes),\n                    (uint64, uint64)\n                );\n                revert Errors.SignatureExpired(current, expires);\n            } else {\n                require(false, \"Other exception thrown, must halt execution.\");\n            }\n        }\n\n        uint256 nextAvailableTokenId = ++nextTokenIdForCrowdtainer[\n            crowdtainerId\n        ];\n\n        if (nextAvailableTokenId >= ID_MULTIPLE) {\n            revert Errors.MaximumNumberOfParticipantsReached(\n                ID_MULTIPLE,\n                _crowdtainer\n            );\n        }\n\n        uint256 newTokenID = (ID_MULTIPLE * crowdtainerId) +\n            nextAvailableTokenId;\n\n        tokenIdQuantities[newTokenID] = _quantities;\n\n        // Mint the voucher to the respective owner\n        _safeMint(msg.sender, newTokenID);\n\n        return newTokenID;\n    }\n\n    function getSignature(bytes calldata data) external pure returns (bytes4) {\n        require(data.length >= 4);\n        return bytes4(data[:4]);\n    }\n\n    function getParameters(bytes calldata data)\n        external\n        pure\n        returns (bytes calldata)\n    {\n        require(data.length > 4);\n        return data[4:];\n    }\n\n    /**\n     * @notice Allows joining by means of CCIP-READ (EIP-3668).\n     * @param result ABI encoded (uint64, bytes) for signature time validity and the signature itself.\n     * @param extraData ABI encoded (address, bytes4, bytes), with the 3rd parameter contains encoded values for Crowdtainer._join() method.\n     *\n     * @dev Requires IRC20 permit.\n     * @dev This function is called automatically by EIP-3668-compliant clients.\n     */\n    function joinWithSignature(\n        bytes calldata result, // off-chain signed payload\n        bytes calldata extraData // retained by client, passed for verification in this function\n    ) external returns (uint256) {\n        (\n            address crowdtainer, // Address of Crowdtainer contract\n            bytes4 innerCallbackFunction,\n            bytes memory innerExtraData\n        ) = abi.decode(extraData, (address, bytes4, bytes));\n\n        assert(innerCallbackFunction == Crowdtainer.joinWithSignature.selector);\n\n        (\n            address _wallet,\n            uint256[MAX_NUMBER_OF_PRODUCTS] memory _quantities,\n            ,\n\n        ) = abi.decode(innerExtraData, (address, uint256[4], bool, address));\n\n        if (msg.sender != _wallet)\n            revert Errors.CallerNotAllowed({\n                expected: msg.sender,\n                actual: _wallet\n            });\n\n        assert(crowdtainer != address(0));\n        uint256 crowdtainerId = idForCrowdtainer[crowdtainer];\n\n        if (crowdtainerId == 0) {\n            revert Errors.CrowdtainerInexistent();\n        }\n\n        assert(crowdtainer.code.length > 0);\n\n        Crowdtainer(crowdtainer).joinWithSignature(result, innerExtraData);\n\n        uint256 nextAvailableTokenId = ++nextTokenIdForCrowdtainer[\n            crowdtainerId\n        ];\n\n        if (nextAvailableTokenId >= ID_MULTIPLE) {\n            revert Errors.MaximumNumberOfParticipantsReached(\n                ID_MULTIPLE,\n                crowdtainer\n            );\n        }\n\n        uint256 newTokenID = (ID_MULTIPLE * crowdtainerId) +\n            nextAvailableTokenId;\n\n        tokenIdQuantities[newTokenID] = _quantities;\n\n        // Mint the voucher to the respective owner\n        _safeMint(_wallet, newTokenID);\n\n        return newTokenID;\n    }\n\n    /**\n     * @notice Returns the specified voucher and withdraw all deposited funds given when joining the Crowdtainer.\n     * @notice Calling this method signals that the participant is no longer interested in the project.\n     * @dev Only allowed if the respective Crowdtainer is in active funding state.\n     */\n    function leave(uint256 _tokenId) external {\n        if (ownerOf(_tokenId) != msg.sender) {\n            revert Errors.AccountNotOwner();\n        }\n\n        address crowdtainerAddress = crowdtainerIdToAddress(\n            tokenIdToCrowdtainerId(_tokenId)\n        );\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\n\n        crowdtainer.leave(msg.sender);\n\n        delete tokenIdQuantities[_tokenId];\n\n        _burn(_tokenId);\n    }\n\n    /**\n     * @notice Get the metadata representation.\n     * @param _tokenId The encoded voucher token id.\n     * @return Token URI String.\n     */\n    function tokenURI(uint256 _tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        uint256 crowdtainerId = tokenIdToCrowdtainerId(_tokenId);\n        address crowdtainerAddress = crowdtainerIdToAddress(crowdtainerId);\n\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\n\n        uint256 numberOfProducts = crowdtainer.numberOfProducts();\n\n        IMetadataService metadataService = IMetadataService(\n            metadataServiceForCrowdatinerId[crowdtainerId]\n        );\n\n        uint256[MAX_NUMBER_OF_PRODUCTS] memory prices = [\n            crowdtainer.unitPricePerType(0),\n            crowdtainer.unitPricePerType(1),\n            crowdtainer.unitPricePerType(2),\n            crowdtainer.unitPricePerType(3)\n        ];\n\n        Metadata memory metadata = Metadata(\n            crowdtainerId,\n            _tokenId - (tokenIdToCrowdtainerId(_tokenId) * ID_MULTIPLE),\n            ownerOf(_tokenId),\n            getClaimStatus(_tokenId),\n            prices,\n            tokenIdQuantities[_tokenId],\n            productDescription[crowdtainerId],\n            numberOfProducts\n        );\n\n        return metadataService.uri(metadata);\n    }\n\n    /**************************************************************************\n     * Internal/private methods\n     *************************************************************************/\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     * @dev Tranfers are only allowed in `Delivery` or `Failed` states, but not e.g. during `Funding`.\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        bool mintOrBurn = from == address(0) || to == address(0);\n        if (mintOrBurn) return;\n\n        // Transfers are only allowed after funding either succeeded or failed.\n        address crowdtainerAddress = crowdtainerIdToAddress(\n            tokenIdToCrowdtainerId(tokenId)\n        );\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\n\n        if (\n            crowdtainer.crowdtainerState() == CrowdtainerState.Funding ||\n            crowdtainer.crowdtainerState() == CrowdtainerState.Uninitialized\n        ) {\n            revert Errors.TransferNotAllowed({\n                crowdtainer: address(crowdtainer),\n                state: crowdtainer.crowdtainerState()\n            });\n        }\n    }\n\n    function tokenIdToCrowdtainerId(uint256 _tokenId)\n        public\n        pure\n        returns (uint256)\n    {\n        if (_tokenId == 0) {\n            revert Errors.InvalidTokenId(_tokenId);\n        }\n\n        return _tokenId / ID_MULTIPLE;\n    }\n\n    function crowdtainerIdToAddress(uint256 _crowdtainerId)\n        public\n        view\n        returns (address)\n    {\n        address crowdtainerAddress = crowdtainerForId[_crowdtainerId];\n        if (crowdtainerAddress == address(0)) {\n            revert Errors.CrowdtainerInexistent();\n        }\n        return crowdtainerAddress;\n    }\n\n    function getClaimStatus(uint256 _tokenId) public view returns (bool) {\n        return BitMaps.get(claimed, _tokenId);\n    }\n\n    function setClaimStatus(uint256 _tokenId, bool _value) public {\n        address crowdtainerAddress = crowdtainerIdToAddress(\n            tokenIdToCrowdtainerId(_tokenId)\n        );\n\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\n\n        address shippingAgent = crowdtainer.shippingAgent();\n\n        if (msg.sender != shippingAgent) {\n            revert Errors.SetClaimedOnlyAllowedByShippingAgent();\n        }\n\n        BitMaps.setTo(claimed, _tokenId, _value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create(0, ptr, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            instance := create2(0, ptr, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\n            mstore(add(ptr, 0x4c), salt)\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n            predicted := keccak256(add(ptr, 0x37), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "src/contracts/ICrowdtainer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"./Constants.sol\";\nimport \"./States.sol\";\n\n// Data defining all rules and values of a Crowdtainer instance.\nstruct CampaignData {\n    // Ethereum Address that represents the product or service provider.\n    address shippingAgent;\n    // Address used for signing authorizations.\n    address signer;\n    // Funding opening time.\n    uint256 openingTime;\n    // Time after which the owner can no longer withdraw funds.\n    uint256 expireTime;\n    // Amount in ERC20 units required for project to be considered to be successful.\n    uint256 targetMinimum;\n    // Amount in ERC20 units after which no further participation is possible.\n    uint256 targetMaximum;\n    // Array with price of each item, in ERC2O units. Zero is an invalid value and will throw.\n    uint256[MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\n    // Percentage used for incentivising participation. Half the amount goes to the referee, and the other half to the referrer.\n    uint256 referralRate;\n    // The minimum purchase value required to be eligible to participate in referral rewards.\n    uint256 referralEligibilityValue;\n    // Address of the ERC20 token used for payment.\n    address token;\n    // URI string pointing to the legal terms and conditions ruling this project.\n    string legalContractURI;\n}\n\n/**\n * @dev Interface for Crowdtainer instances.\n */\ninterface ICrowdtainer {\n    /**\n     * @dev Initializes a Crowdtainer.\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\n     */\n    function initialize(address owner, CampaignData calldata _campaignData)\n        external;\n\n    function crowdtainerState() external view returns (CrowdtainerState);\n\n    function shippingAgent() external view returns (address);\n\n    function numberOfProducts() external view returns (uint256);\n\n    function unitPricePerType(uint256) external view returns (uint256);\n\n    /**\n     * @notice Join the Crowdtainer project.\n     * @param _wallet The wallet that is joining the Crowdtainer. Must be the msg.sender if Crowdtainer owner is address(0x0).\n     * @param _quantities Array with the number of units desired for each product.\n     *\n     * @dev This method is present to make wallet interactions more friendly, by requiring fewer parameters for projects with referral system disabled.\n     * @dev Requires IERC20 permit.\n     */\n    function join(\n        address _wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities\n    ) external;\n\n    /**\n     * @notice Join the Crowdtainer project with optional referral and discount.\n     * @param _wallet The wallet that is joining the Crowdtainer. Must be the msg.sender if Crowdtainer owner is address(0x0).\n     * @param _quantities Array with the number of units desired for each product.\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\n     * @param _referrer Optional referral code to be used to claim a discount.\n     *\n     * @dev Requires IERC20 permit.\n     * @dev referrer is the wallet address of a previous participant.\n     * @dev if `enableReferral` is true, and the user decides to leave after the wallet has been used to claim a discount,\n     *       then the full value can't be claimed if deciding to leave the project.\n     * @dev A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\n     *      To 'update' an order, the user must first 'leave' then join again with the new values.\n     */\n    function join(\n        address _wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\n        bool _enableReferral,\n        address _referrer\n    ) external;\n\n    /*\n     * @dev Leave the Crowdtainer and withdraw deposited funds given when joining.\n     * @note Calling this method signals that the user is no longer interested in participating.\n     * @note Only allowed if the respective Crowdtainer is in active `Funding` state.\n     * @param _wallet The wallet that is leaving the Crowdtainer.\n     */\n    function leave(address _wallet) external;\n}\n"
    },
    "src/contracts/Crowdtainer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\n// @dev External dependencies\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// @dev Internal dependencies\nimport \"./ICrowdtainer.sol\";\nimport \"./Errors.sol\";\nimport \"./Constants.sol\";\n\ninterface AuthorizationGateway {\n    function getSignedJoinApproval(\n        address crowdtainerAddress,\n        address addr,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata quantities,\n        bool _enableReferral,\n        address _referrer\n    ) external view returns (bytes memory signature);\n}\n\n/**\n * @title Crowdtainer contract\n * @author Crowdtainer.eth\n */\ncontract Crowdtainer is ICrowdtainer, ReentrancyGuard, Initializable {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    // -----------------------------------------------\n    //  Main project state\n    // -----------------------------------------------\n    CrowdtainerState public crowdtainerState;\n\n    /// @notice Owner of this contract.\n    /// @dev Has permissions to call: initialize(), join() and leave() functions. These functions are optionally\n    /// @dev gated so that an owner contract can do special accounting (such as an EIP721-compliant contract as its owner).\n    address public owner;\n\n    /// @notice The entity or person responsible for the delivery of this crowdtainer project.\n    /// @dev Allowed to call getPaidAndDeliver() and set signers.\n    address public shippingAgent;\n\n    /// @notice Maps wallets that joined this Crowdtainer to the values they paid to join.\n    mapping(address => uint256) private costForWallet;\n\n    /// @notice Maps accounts to accumulated referral rewards.\n    mapping(address => uint256) public accumulatedRewardsOf;\n\n    /// @notice Total rewards claimable for project.\n    uint256 public accumulatedRewards;\n\n    /// @notice Maps referee to referrer.\n    mapping(address => address) public referrerOfReferee;\n\n    uint256 public referralEligibilityValue;\n\n    /// @notice Wether an account has opted into being elibible for referral rewards.\n    mapping(address => bool) private enableReferral;\n\n    /// @notice Maps the total discount for each user.\n    mapping(address => uint256) public discountForUser;\n\n    /// @notice The total value raised/accumulated by this contract.\n    uint256 public totalValueRaised;\n\n    /// @notice Address owned by shipping agent to sign authorization transactions.\n    address private signer;\n\n    /// @notice Mapping of addresses to random nonces; Used for transaction replay protection.\n    mapping(address => mapping(bytes32 => bool)) public usedNonces;\n\n    /// @notice URL templates to the service provider's gateways that implement the CCIP-read protocol.\n    string[] public urls;\n\n    uint256 internal constant ONE = 1e6; // 6 decimal places\n\n    // -----------------------------------------------\n    //  Modifiers\n    // -----------------------------------------------\n    /**\n     * @dev Throws if msg.sender != owner, except when owner is address(0), in which case no restriction is applied.\n     */\n    modifier onlyAddress(address requiredAddress) {\n        if (owner == address(0)) {\n            // This branch means this contract is being used as a stand-alone contract, not managed/owned by a EIP-721/1155 contract\n            // E.g.: A Crowdtainer instance interacted directly by an EOA.\n            _;\n            return;\n        }\n        requireAddress(requiredAddress);\n        _;\n    }\n\n    /**\n     * @dev Throws if called in state other than the specified.\n     */\n    modifier onlyInState(CrowdtainerState requiredState) {\n        requireState(requiredState);\n        _;\n    }\n\n    modifier onlyActive() {\n        requireActive();\n        _;\n    }\n\n    // Auxiliary modifier functions, used to save deployment cost.\n    function requireState(CrowdtainerState requiredState) internal view {\n        if (crowdtainerState != requiredState)\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\n        require(crowdtainerState == requiredState);\n    }\n\n    function requireAddress(address requiredAddress) internal view {\n        if (msg.sender != requiredAddress)\n            revert Errors.CallerNotAllowed({\n                expected: msg.sender,\n                actual: requiredAddress\n            });\n        require(msg.sender == requiredAddress);\n    }\n\n    function requireActive() internal view {\n        if (block.timestamp < openingTime)\n            revert Errors.OpeningTimeNotReachedYet(\n                block.timestamp,\n                openingTime\n            );\n        if (block.timestamp > expireTime)\n            revert Errors.CrowdtainerExpired(block.timestamp, expireTime);\n    }\n\n    /// @notice Address used for signing authorizations. This allows for arbitrary\n    /// off-chain mechanisms to apply law-based restrictions and/or combat bots squatting offered items.\n    /// @notice If signer equals to address(0), no restriction is applied.\n    function getSigner() external view returns (address) {\n        return signer;\n    }\n\n    function setSigner(address _signer) external onlyAddress(shippingAgent) {\n        signer = _signer;\n        emit SignerChanged(signer);\n    }\n\n    function setUrls(string[] memory _urls)\n        external\n        onlyAddress(shippingAgent)\n    {\n        urls = _urls;\n        emit CCIPURLChanged(urls);\n    }\n\n    // -----------------------------------------------\n    //  Values set by initialize function\n    // -----------------------------------------------\n    /// @notice Time after which it is possible to join this Crowdtainer.\n    uint256 public openingTime;\n    /// @notice Time after which it is no longer possible for the service or product provider to withdraw funds.\n    uint256 public expireTime;\n    /// @notice Minimum amount in ERC20 units required for Crowdtainer to be considered to be successful.\n    uint256 public targetMinimum;\n    /// @notice Amount in ERC20 units after which no further participation is possible.\n    uint256 public targetMaximum;\n    /// @notice Number of products/services variations offered by this project.\n    uint256 public numberOfProducts;\n    /// @notice The price for each unit type.\n    /// @dev The price should be given in the number of smallest unit for precision (e.g 10^18 == 1 DAI).\n    uint256[MAX_NUMBER_OF_PRODUCTS] public unitPricePerType;\n    /// @notice Half of the value act as a discount for a new participant using an existing referral code, and the other\n    /// half is given for the participant making a referral. The former is similar to the 'cash discount device' in stamp era,\n    /// while the latter is a reward for contributing to the Crowdtainer by incentivising participation from others.\n    uint256 public referralRate;\n    /// @notice Address of the ERC20 token used for payment.\n    IERC20 public token;\n    /// @notice URI string pointing to the legal terms and conditions ruling this project.\n    string public legalContractURI;\n\n    // -----------------------------------------------\n    //  Events\n    // -----------------------------------------------\n\n    /// @notice Emmited when the signer changes.\n    event SignerChanged(address indexed newSigner);\n\n    /// @notice Emmited when CCIP-read URLs changes.\n    event CCIPURLChanged(string[] indexed newUrls);\n\n    /// @notice Emmited when a Crowdtainer is created.\n    event CrowdtainerCreated(\n        address indexed owner,\n        address indexed shippingAgent\n    );\n\n    /// @notice Emmited when a Crowdtainer is initialized.\n    event CrowdtainerInitialized(\n        address indexed _owner,\n        IERC20 _token,\n        uint256 _openingTime,\n        uint256 _expireTime,\n        uint256 _targetMinimum,\n        uint256 _targetMaximum,\n        uint256[MAX_NUMBER_OF_PRODUCTS] _unitPricePerType,\n        uint256 _referralRate,\n        uint256 _referralEligibilityValue,\n        string _legalContractURI,\n        address _signer\n    );\n\n    /// @notice Emmited when a user joins, signalling participation intent.\n    event Joined(\n        address indexed wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] quantities,\n        address indexed referrer,\n        uint256 finalCost, // @dev with discount applied\n        uint256 appliedDiscount,\n        bool referralEnabled\n    );\n\n    event Left(address indexed wallet, uint256 withdrawnAmount);\n\n    event RewardsClaimed(address indexed wallet, uint256 withdrawnAmount);\n\n    event FundsClaimed(address indexed wallet, uint256 withdrawnAmount);\n\n    event CrowdtainerInDeliveryStage(\n        address indexed shippingAgent,\n        uint256 totalValueRaised\n    );\n\n    // -----------------------------------------------\n    // Contract functions\n    // -----------------------------------------------\n\n    /**\n     * @notice Initializes a Crowdtainer.\n     * @param _owner The contract owning this Crowdtainer instance, if any (address(0x0) for no owner).\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\n     */\n    function initialize(address _owner, CampaignData calldata _campaignData)\n        external\n        initializer\n        onlyInState(CrowdtainerState.Uninitialized)\n    {\n        owner = _owner;\n\n        // @dev: Sanity checks\n        if (address(_campaignData.token) == address(0))\n            revert Errors.TokenAddressIsZero();\n\n        if (address(_campaignData.shippingAgent) == address(0))\n            revert Errors.ShippingAgentAddressIsZero();\n\n        if (\n            _campaignData.referralEligibilityValue > _campaignData.targetMinimum\n        )\n            revert Errors.ReferralMinimumValueTooHigh({\n                received: _campaignData.referralEligibilityValue,\n                maximum: _campaignData.targetMinimum\n            });\n\n        if (_campaignData.referralRate % 2 != 0)\n            revert Errors.ReferralRateNotMultipleOfTwo();\n\n        // @dev: Expiration time should not be too close to the opening time\n        if (\n            _campaignData.expireTime <\n            _campaignData.openingTime + SAFETY_TIME_RANGE\n        ) revert Errors.ClosingTimeTooEarly();\n\n        if (_campaignData.targetMaximum == 0)\n            revert Errors.InvalidMaximumTarget();\n\n        if (_campaignData.targetMinimum == 0)\n            revert Errors.InvalidMinimumTarget();\n\n        if (_campaignData.targetMinimum > _campaignData.targetMaximum)\n            revert Errors.MinimumTargetHigherThanMaximum();\n\n        // @dev The first price of zero indicates the end of price list.\n        for (uint256 i = 0; i < MAX_NUMBER_OF_PRODUCTS; i++) {\n            if (_campaignData.unitPricePerType[i] == 0) {\n                break;\n            } else if (_campaignData.unitPricePerType[i] < ONE) {\n                revert Errors.PriceTooLow();\n            }\n\n            numberOfProducts++;\n        }\n\n        if (numberOfProducts == 0) {\n            revert Errors.InvalidProductNumberAndPrices();\n        }\n\n        if (_campaignData.referralRate > SAFETY_MAX_REFERRAL_RATE)\n            revert Errors.InvalidReferralRate({\n                received: _campaignData.referralRate,\n                maximum: SAFETY_MAX_REFERRAL_RATE\n            });\n\n        shippingAgent = _campaignData.shippingAgent;\n        signer = _campaignData.signer;\n        openingTime = _campaignData.openingTime;\n        expireTime = _campaignData.expireTime;\n        targetMinimum = _campaignData.targetMinimum;\n        targetMaximum = _campaignData.targetMaximum;\n        unitPricePerType = _campaignData.unitPricePerType;\n        referralRate = _campaignData.referralRate;\n        referralEligibilityValue = _campaignData.referralEligibilityValue;\n        token = IERC20(_campaignData.token);\n        legalContractURI = _campaignData.legalContractURI;\n\n        crowdtainerState = CrowdtainerState.Funding;\n\n        emit CrowdtainerInitialized(\n            owner,\n            token,\n            openingTime,\n            expireTime,\n            targetMinimum,\n            targetMaximum,\n            unitPricePerType,\n            referralRate,\n            referralEligibilityValue,\n            legalContractURI,\n            signer\n        );\n    }\n\n    /**\n     * @notice Join the Crowdtainer project.\n     * @param _wallet The wallet that is joining the Crowdtainer. Must be the msg.sender if Crowdtainer owner is address(0x0).\n     * @param _quantities Array with the number of units desired for each product.\n     *\n     * @dev This method is present to make wallet interactions more friendly, by requiring fewer parameters for projects with referral system disabled.\n     * @dev Requires IERC20 permit.\n     */\n    function join(\n        address _wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities\n    ) public {\n        join(_wallet, _quantities, false, address(0));\n    }\n\n    /**\n     * @notice Join the Crowdtainer project with optional referral and discount.\n     * @param _wallet The wallet that is joining the Crowdtainer. Must be the msg.sender if Crowdtainer owner is address(0x0).\n     * @param _quantities Array with the number of units desired for each product.\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\n     * @param _referrer Optional referral code to be used to claim a discount.\n     *\n     * @dev Requires IERC20 permit.\n     * @dev referrer is the wallet address of a previous participant.\n     * @dev if `enableReferral` is true, and the user decides to leave after the wallet has been used to claim a discount,\n     *       then the full value can't be claimed if deciding to leave the project.\n     * @dev A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\n     *      To 'update' an order, the user must first 'leave' then join again with the new values.\n     */\n    function join(\n        address _wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\n        bool _enableReferral,\n        address _referrer\n    )\n        public\n        onlyAddress(owner)\n        onlyInState(CrowdtainerState.Funding)\n        onlyActive\n        nonReentrant\n    {\n        if (signer != address(0)) {\n            // See https://eips.ethereum.org/EIPS/eip-3668\n            revert Errors.OffchainLookup(\n                address(this), // sender\n                urls, // gateway urls\n                abi.encodeWithSelector(\n                    AuthorizationGateway.getSignedJoinApproval.selector,\n                    address(this),\n                    _wallet,\n                    _quantities,\n                    _enableReferral,\n                    _referrer\n                ), // parameters/data for the gateway (callData)\n                Crowdtainer.joinWithSignature.selector, // 4-byte callback function selector\n                abi.encode(_wallet, _quantities, _enableReferral, _referrer) // parameters for the contract callback function\n            );\n        }\n\n        if (owner == address(0)) {\n            requireAddress(_wallet);\n        }\n\n        _join(_wallet, _quantities, _enableReferral, _referrer);\n    }\n\n    /**\n     * @notice Allows joining by means of CCIP-READ (EIP-3668).\n     * @param result (uint64, bytes) of signature validity and the signature itself.\n     * @param extraData ABI encoded parameters for _join() method.\n     *\n     * @dev Requires IRC20 permit.\n     */\n    function joinWithSignature(\n        bytes calldata result, // off-chain signed payload\n        bytes calldata extraData // retained by client, passed for verification in this function\n    )\n        external\n        onlyAddress(owner)\n        onlyInState(CrowdtainerState.Funding)\n        onlyActive\n        nonReentrant\n    {\n        require(signer != address(0));\n\n        // decode extraData provided by client\n        (\n            address _wallet,\n            uint256[MAX_NUMBER_OF_PRODUCTS] memory _quantities,\n            bool _enableReferral,\n            address _referrer\n        ) = abi.decode(extraData, (address, uint256[4], bool, address));\n\n        if (owner == address(0)) {\n            requireAddress(_wallet);\n        }\n\n        // Get signature from server response\n        (\n            address contractAddress,\n            uint64 epochExpiration,\n            bytes32 nonce,\n            bytes memory signature\n        ) = abi.decode(result, (address, uint64, bytes32, bytes));\n\n        bytes32 messageDigest = keccak256(\n            abi.encode(\n                contractAddress,\n                _wallet,\n                _quantities,\n                _enableReferral,\n                _referrer,\n                epochExpiration,\n                nonce\n            )\n        );\n\n        require(\n            signaturePayloadValid(\n                contractAddress,\n                messageDigest,\n                signer,\n                epochExpiration,\n                nonce,\n                signature\n            )\n        );\n        usedNonces[signer][nonce] = true;\n\n        _join(_wallet, _quantities, _enableReferral, _referrer);\n    }\n\n    function signaturePayloadValid(\n        address contractAddress,\n        bytes32 messageDigest,\n        address expectedPublicKey,\n        uint64 expiration,\n        bytes32 nonce,\n        bytes memory signature\n    ) internal view returns (bool) {\n        address recoveredPublicKey = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageDigest)\n        ).recover(signature);\n\n        if (recoveredPublicKey != expectedPublicKey) {\n            revert Errors.InvalidSignature();\n        }\n\n        if (contractAddress != address(this)) {\n            revert Errors.InvalidSignature();\n        }\n\n        if (expiration <= block.timestamp) {\n            revert Errors.SignatureExpired(uint64(block.timestamp), expiration);\n        }\n\n        if (usedNonces[expectedPublicKey][nonce]) {\n            revert Errors.NonceAlreadyUsed(expectedPublicKey, nonce);\n        }\n\n        return true;\n    }\n\n    function _join(\n        address _wallet,\n        uint256[MAX_NUMBER_OF_PRODUCTS] memory _quantities,\n        bool _enableReferral,\n        address _referrer\n    ) internal {\n        enableReferral[_wallet] = _enableReferral;\n\n        // @dev Check if wallet didn't already join\n        if (costForWallet[_wallet] != 0) revert Errors.UserAlreadyJoined();\n\n        // @dev Calculate cost\n        uint256 finalCost;\n\n        for (uint256 i = 0; i < numberOfProducts; i++) {\n            if (_quantities[i] > MAX_NUMBER_OF_PURCHASED_ITEMS)\n                revert Errors.ExceededNumberOfItemsAllowed({\n                    received: _quantities[i],\n                    maximum: MAX_NUMBER_OF_PURCHASED_ITEMS\n                });\n\n            finalCost += unitPricePerType[i] * _quantities[i];\n        }\n\n        if (finalCost < ONE) {\n            revert Errors.InvalidNumberOfQuantities();\n        }\n\n        if (_enableReferral && finalCost < referralEligibilityValue)\n            revert Errors.MinimumPurchaseValueForReferralNotMet({\n                received: finalCost,\n                minimum: referralEligibilityValue\n            });\n\n        // @dev Apply discounts to `finalCost` if applicable.\n        bool eligibleForDiscount;\n        // @dev Verify validity of given `referrer`\n        if (_referrer != address(0) && referralRate > 0) {\n            // @dev Check if referrer participated\n            if (costForWallet[_referrer] == 0) {\n                revert Errors.ReferralInexistent();\n            }\n\n            if (!enableReferral[_referrer]) {\n                revert Errors.ReferralDisabledForProvidedCode();\n            }\n\n            eligibleForDiscount = true;\n        }\n\n        uint256 discount;\n\n        if (eligibleForDiscount) {\n            // @dev Two things happens when a valid referral code is given:\n            //    1 - Half of the referral rate is applied as a discount to the current order.\n            //    2 - Half of the referral rate is credited to the referrer.\n\n            // @dev Calculate the discount value\n            discount = (finalCost * referralRate) / 100 / 2;\n\n            // @dev 1- Apply discount\n            finalCost -= discount;\n            discountForUser[_wallet] += discount;\n\n            // @dev 2- Apply reward for referrer\n            accumulatedRewardsOf[_referrer] += discount;\n            accumulatedRewards += discount;\n\n            referrerOfReferee[_wallet] = _referrer;\n        }\n\n        costForWallet[_wallet] = finalCost;\n\n        // increase total value accumulated by this contract\n        totalValueRaised += finalCost;\n\n        // @dev Check if the purchase order doesn't exceed the goal's `targetMaximum`.\n        if ((totalValueRaised - accumulatedRewards) > targetMaximum)\n            revert Errors.PurchaseExceedsMaximumTarget({\n                received: totalValueRaised,\n                maximum: targetMaximum\n            });\n\n        // @dev transfer required funds into this contract\n        token.safeTransferFrom(_wallet, address(this), finalCost);\n\n        emit Joined(\n            _wallet,\n            _quantities,\n            _referrer,\n            finalCost,\n            discount,\n            _enableReferral\n        );\n    }\n\n    /**\n     * @notice Leave the Crowdtainer and withdraw deposited funds given when joining.\n     * @notice Calling this method signals that the participant is no longer interested in the project.\n     * @param _wallet The wallet that is leaving the Crowdtainer.\n     * @dev Only allowed if the respective Crowdtainer is in active `Funding` state.\n     */\n    function leave(address _wallet)\n        external\n        onlyAddress(owner)\n        onlyInState(CrowdtainerState.Funding)\n        onlyActive\n        nonReentrant\n    {\n        if (owner == address(0)) {\n            requireAddress(_wallet);\n        }\n\n        uint256 withdrawalTotal = costForWallet[_wallet];\n\n        // @dev Subtract formerly given referral rewards originating from this account.\n        address referrer = referrerOfReferee[_wallet];\n        accumulatedRewardsOf[referrer] -= discountForUser[_wallet];\n\n        /* @dev If this wallet's referral was used, then it is no longer possible to leave().\n         *      This is to discourage users from joining just to generate discount codes.\n         *      E.g.: A user uses two different wallets, the first joins to generate a discount code for him/herself to be used in\n         *      the second wallet, and then immediatelly leaves the pool from the first wallet, leaving the second wallet with a full discount. */\n        if (accumulatedRewardsOf[_wallet] > 0) {\n            revert Errors.CannotLeaveDueAccumulatedReferralCredits();\n        }\n\n        totalValueRaised -= costForWallet[_wallet];\n        accumulatedRewards -= discountForUser[_wallet];\n\n        costForWallet[_wallet] = 0;\n        discountForUser[_wallet] = 0;\n        referrerOfReferee[_wallet] = address(0);\n        enableReferral[_wallet] = false;\n\n        // @dev transfer the owed funds from this contract back to the user.\n        token.safeTransferFrom(address(this), _wallet, withdrawalTotal);\n\n        emit Left(_wallet, withdrawalTotal);\n    }\n\n    /**\n     * @notice Function used by the service provider to signal commitment to ship service or product by withdrawing/receiving the payment.\n     */\n    function getPaidAndDeliver()\n        public\n        onlyAddress(shippingAgent)\n        onlyInState(CrowdtainerState.Funding)\n        nonReentrant\n    {\n        uint256 availableForAgent = totalValueRaised - accumulatedRewards;\n\n        if (availableForAgent < targetMinimum) {\n            revert Errors.MinimumTargetNotReached(\n                targetMinimum,\n                totalValueRaised\n            );\n        }\n\n        crowdtainerState = CrowdtainerState.Delivery;\n\n        // @dev transfer the owed funds from this contract to the service provider.\n        token.safeTransferFrom(address(this), shippingAgent, availableForAgent);\n\n        emit CrowdtainerInDeliveryStage(shippingAgent, availableForAgent);\n    }\n\n    /**\n     * @notice Function used by project deployer to signal that it is no longer possible to the ship service or product.\n     *         This puts the project into `Failed` state and participants can withdraw their funds.\n     */\n    function abortProject()\n        public\n        onlyAddress(shippingAgent)\n        onlyInState(CrowdtainerState.Funding)\n        nonReentrant\n    {\n        crowdtainerState = CrowdtainerState.Failed;\n    }\n\n    /**\n     * @notice Function used by participants to withdrawl funds from a failed/expired project.\n     */\n    function claimFunds() public nonReentrant {\n        if (block.timestamp < openingTime)\n            revert Errors.OpeningTimeNotReachedYet(\n                block.timestamp,\n                openingTime\n            );\n\n        if (crowdtainerState == CrowdtainerState.Uninitialized)\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\n\n        if (crowdtainerState == CrowdtainerState.Delivery)\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\n\n        // The first interaction with this function 'nudges' the state to `Failed` if\n        // the project didn't reach the goal in time.\n        if (\n            block.timestamp > expireTime &&\n            (totalValueRaised - accumulatedRewards) < targetMinimum\n        ) crowdtainerState = CrowdtainerState.Failed;\n\n        if (crowdtainerState != CrowdtainerState.Failed)\n            revert Errors.CantClaimFundsOnActiveProject();\n\n        // Reaching this line means the project failed either due expiration or explicit transition from `abortProject()`.\n        uint256 withdrawalTotal = costForWallet[msg.sender];\n\n        costForWallet[msg.sender] = 0;\n        discountForUser[msg.sender] = 0;\n        referrerOfReferee[msg.sender] = address(0);\n\n        if (withdrawalTotal == 0) {\n            revert Errors.InsufficientBalance();\n        }\n\n        // @dev transfer the owed funds from this contract back to the user.\n        token.safeTransferFrom(address(this), msg.sender, withdrawalTotal);\n\n        emit FundsClaimed(msg.sender, withdrawalTotal);\n    }\n\n    /**\n     * @notice Function used by participants to withdrawl referral rewards from a successful project.\n     */\n    function claimRewards()\n        public\n        nonReentrant\n        onlyInState(CrowdtainerState.Delivery)\n    {\n        uint256 totalRewards = accumulatedRewardsOf[msg.sender];\n        accumulatedRewardsOf[msg.sender] = 0;\n\n        token.safeTransferFrom(address(this), msg.sender, totalRewards);\n\n        emit RewardsClaimed(msg.sender, totalRewards);\n    }\n\n    // @dev This method is only used for Formal Verification with SMTChecker.\n    // @dev It is executed with `make solcheck` command provided with the project's scripts.\n    function invariant() public view {\n        if (crowdtainerState != CrowdtainerState.Uninitialized) {\n            assert(expireTime >= (openingTime + SAFETY_TIME_RANGE));\n            assert(targetMaximum > 0);\n            assert(targetMinimum <= targetMaximum);\n            assert(referralRate <= SAFETY_MAX_REFERRAL_RATE);\n\n            assert(accumulatedRewards < totalValueRaised);\n        }\n    }\n}\n"
    },
    "src/contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"./States.sol\";\n\nlibrary Errors {\n    // -----------------------------------------------\n    //  Vouchers\n    // -----------------------------------------------\n    // @notice: The provided crowdtainer does not exist.\n    error CrowdtainerInexistent();\n    // @notice: Invalid token id.\n    error InvalidTokenId(uint256 tokenId);\n    // @notice: Prices lower than 1 * 1^6 not supported.\n    error PriceTooLow();\n    // @notice: Attempted to join with all product quantities set to zero.\n    error InvalidNumberOfQuantities();\n    // @notice: Account cannot be of address(0).\n    error AccountAddressIsZero();\n    // @notice: Metadata service contract cannot be of address(0).\n    error MetadataServiceAddressIsZero();\n    // @notice: Accounts and ids lengths do not match.\n    error AccountIdsLengthMismatch();\n    // @notice: ID's and amounts lengths do not match.\n    error IDsAmountsLengthMismatch();\n    // @notice: Cannot set approval for the same account.\n    error CannotSetApprovalForSelf();\n    // @notice: Caller is not owner or has correct permission.\n    error AccountNotOwner();\n    // @notice: Only the shipping agent is able to set a voucher/tokenId as \"claimed\".\n    error SetClaimedOnlyAllowedByShippingAgent();\n    // @notice: Cannot transfer someone else's tokens.\n    error UnauthorizedTransfer();\n    // @notice: Insufficient balance.\n    error InsufficientBalance();\n    // @notice: Can't initialize with all their prices set to zero.\n    error InvalidProductNumberAndPrices();\n    // @notice: Can't make transfers in given state.\n    error TransferNotAllowed(address crowdtainer, CrowdtainerState state);\n    // @notice: No further participants possible in a given Crowdtainer.\n    error MaximumNumberOfParticipantsReached(\n        uint256 maximum,\n        address crowdtainer\n    );\n    // Used to apply off-chain verifications/rules per CCIP-read (EIP-3668),\n    // see https://eips.ethereum.org/EIPS/eip-3668 for description.\n    error OffchainLookup(\n        address sender,\n        string[] urls,\n        bytes callData,\n        bytes4 callbackFunction,\n        bytes extraData\n    );\n\n    error CCIP_Read_InvalidOperation();\n    error SignatureExpired(uint64 current, uint64 expires);\n    error NonceAlreadyUsed(address wallet, bytes32 nonce);\n    error InvalidSignature();\n\n    // -----------------------------------------------\n    //  Initialization with invalid parameters\n    // -----------------------------------------------\n    // @notice: Cannot initialize with owner of address(0).\n    error OwnerAddressIsZero();\n    // @notice: Cannot initialize with token of address(0).\n    error TokenAddressIsZero();\n    // @notice: Shipping agent can't have address(0).\n    error ShippingAgentAddressIsZero();\n    // @notice: Initialize called with closing time is less than one hour away from the opening time.\n    error ClosingTimeTooEarly();\n    // @notice: Initialize called with invalid number of maximum units to be sold (0).\n    error InvalidMaximumTarget();\n    // @notice: Initialize called with invalid number of minimum units to be sold (less than maximum sold units).\n    error InvalidMinimumTarget();\n    // @notice: Initialize called with invalid minimum and maximum targets (minimum value higher than maximum).\n    error MinimumTargetHigherThanMaximum();\n    // @notice: Initialize called with invalid referral rate.\n    error InvalidReferralRate(uint256 received, uint256 maximum);\n    // @notice: Referral rate not multiple of 2.\n    error ReferralRateNotMultipleOfTwo();\n    // @notice: Refferal minimum value for participation can't be higher than project's minimum target.\n    error ReferralMinimumValueTooHigh(uint256 received, uint256 maximum);\n\n    // -----------------------------------------------\n    //  Authorization\n    // -----------------------------------------------\n    // @notice: Method not authorized for caller (message sender).\n    error CallerNotAllowed(address expected, address actual);\n\n    // -----------------------------------------------\n    //  Join() operation\n    // -----------------------------------------------\n    // @notice: The given referral was not found thus can't be used to claim a discount.\n    error ReferralInexistent();\n    // @notice: Purchase exceed target's maximum goal.\n    error PurchaseExceedsMaximumTarget(uint256 received, uint256 maximum);\n    // @notice: Number of items purchased per type exceeds maximum allowed.\n    error ExceededNumberOfItemsAllowed(uint256 received, uint256 maximum);\n    // @notice: Wallet already used to join project.\n    error UserAlreadyJoined();\n    // @notice: Referral is not enabled for the given code/wallet.\n    error ReferralDisabledForProvidedCode();\n    // @notice: Participant can't participate in referral if the minimum purchase value specified by the service provider is not met.\n    error MinimumPurchaseValueForReferralNotMet(\n        uint256 received,\n        uint256 minimum\n    );\n\n    // -----------------------------------------------\n    //  Leave() operation\n    // -----------------------------------------------\n    // @notice: It is not possible to leave when the user has referrals enabled, has been referred and gained rewards.\n    error CannotLeaveDueAccumulatedReferralCredits();\n\n    // -----------------------------------------------\n    //  GetPaidAndDeliver() operation\n    // -----------------------------------------------\n    // @notice: GetPaidAndDeliver can't be called on a expired project.\n    error CrowdtainerExpired(uint256 timestamp, uint256 expiredTime);\n    // @notice: Not enough funds were raised.\n    error MinimumTargetNotReached(uint256 minimum, uint256 actual);\n    // @notice: The project is not active yet.\n    error OpeningTimeNotReachedYet(uint256 timestamp, uint256 openingTime);\n\n    // -----------------------------------------------\n    //  ClaimFunds() operation\n    // -----------------------------------------------\n    // @notice: Can't be called if the project is still active.\n    error CantClaimFundsOnActiveProject();\n\n    // -----------------------------------------------\n    //  State transition\n    // -----------------------------------------------\n    // @notice: Method can't be invoked at current state.\n    error InvalidOperationFor(CrowdtainerState state);\n\n    // -----------------------------------------------\n    //  Other Invariants\n    // -----------------------------------------------\n    // @notice: Payable receive function called, but we don't accept Eth for payment.\n    error ContractDoesNotAcceptEther();\n}\n"
    },
    "src/contracts/Metadata/IMetadataService.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nuint256 constant _MAX_NUMBER_OF_PRODUCTS = 4;\n\nstruct Metadata {\n    uint256 crowdtainerId;\n    uint256 tokenId;\n    address currentOwner;\n    bool claimed;\n    uint256[_MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\n    uint256[_MAX_NUMBER_OF_PRODUCTS] quantities;\n    string[_MAX_NUMBER_OF_PRODUCTS] productDescription;\n    uint256 numberOfProducts;\n}\n\n/**\n * @dev Metadata service used to provide URI for a voucher / token id.\n */\ninterface IMetadataService {\n    function uri(Metadata memory) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "src/contracts/States.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nenum CrowdtainerState {\n    Uninitialized,\n    Funding,\n    Delivery,\n    Failed\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "src/contracts/Metadata/MetadataServiceV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"./IMetadataService.sol\";\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\n/* solhint-disable quotes */\n\ncontract MetadataServiceV1 is IMetadataService {\n    using Strings for uint256;\n    using Strings for uint24;\n\n    uint24 internal constant yIncrement = 1;\n    uint24 internal constant yStartingPoint = 10;\n    uint24 internal constant anchorX = 2;\n\n    uint8 private erc20Decimals;\n\n    string private unitSymbol;\n    string private ticketFootnotes;\n\n    function generateSVGProductDescription(\n        uint256 quantities,\n        uint256 price,\n        string memory _unitSymbol,\n        string memory description\n    ) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    quantities.toString(),\n                    \"  x  \",\n                    description,\n                    \" - \",\n                    _unitSymbol,\n                    price.toString()\n                )\n            );\n    }\n\n    function generateProductList(\n        Metadata calldata _metadata,\n        string memory _unitSymbol,\n        uint8 _erc20Decimals\n    ) internal pure returns (string memory productList, uint256 totalCost) {\n        uint256 newY = yStartingPoint;\n\n        for (uint24 i = 0; i < _metadata.numberOfProducts; i++) {\n            if (_metadata.quantities[i] == 0) {\n                continue;\n            }\n\n            productList = string(\n                abi.encodePacked(\n                    productList,\n                    '<text xml:space=\"preserve\" class=\"small\" x=\"',\n                    anchorX.toString(),\n                    '\" y=\"',\n                    newY.toString(),\n                    '\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">',\n                    generateSVGProductDescription(\n                        _metadata.quantities[i],\n                        _metadata.unitPricePerType[i] / (10**_erc20Decimals),\n                        _unitSymbol,\n                        _metadata.productDescription[i]\n                    ),\n                    \"</text>\"\n                )\n            );\n\n            if (i < _metadata.numberOfProducts) {\n                newY += yIncrement;\n            }\n\n            totalCost +=\n                _metadata.unitPricePerType[i] *\n                _metadata.quantities[i];\n        }\n\n        return (productList, totalCost / 10**_erc20Decimals);\n    }\n\n    function getSVGHeader() internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '<svg width=\"100mm\" height=\"130mm\" viewBox=\"0 0 300 430\" version=\"1.1\" id=\"svg5\" '\n                    'class=\"svgBody\" xmlns=\"http://www.w3.org/2000/svg\">'\n                    '<g id=\"layer1\">'\n                    '<path id=\"path2\" style=\"color:#000000;fill:url(#SvgjsLinearGradient2561);fill-opacity:0.899193;fill-rule:evenodd;stroke-width:1.54543;-inkscape-stroke:none\" '\n                    'd=\"m32.202 12.58q-26.5047-.0216-26.4481 26.983l0 361.7384q.0114 11.831 15.7269 11.7809h76.797c-.1609-1.7418-.6734-11.5291 '\n                    \"8.1908-11.0679.1453.008.3814.0165.5275.0165h90.8068c.1461 0 .383-.005.5291-.005 6.7016-.006 7.7083 9.3554 \"\n                    \"7.836 11.0561.0109.1453.1352.2634.2813.2634l80.0931 0q12.2849.02 12.2947-12.2947v-361.7669q-.1068-26.9614-26.4482-26.9832h-66.2794c.003 \"\n                    '12.6315.0504 9.5559-54.728 9.546-48.348.0106-51.5854 2.1768-51.8044-9.7542z\"/>'\n                    '<text xml:space=\"preserve\" class=\"medium\" x=\"10.478354\" y=\"0\" id=\"text16280-6-9\" transform=\"matrix(16.4916,0,0,15.627547,7.1325211,54.664932)\">',\n                    '<tspan x=\"15.478354\" y=\"1\">Crowdtainer '\n                )\n            );\n    }\n\n    function getSVGFooter() internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '<style>.svgBody {font-family: \"Helvetica\" }'\n                    \".tiny {font-stretch:normal;font-size:0.525624px;line-height:1.25;text-anchor:end;white-space:pre;fill:#f9f9f9;}\"\n                    \".footer {font-stretch:normal;font-size:7px;line-height:.25;white-space:pre;fill:#f9f9f9;}\"\n                    \".small {font-size:0.65px;text-align:start;text-anchor:start;white-space:pre;fill:#f9f9f9;}\"\n                    \".medium {font-size:0.92px;\"\n                    \"font-family:Helvetica;text-align:end;text-anchor:end;white-space:pre;\"\n                    \"fill:#f9f9f9;}</style>\"\n                    \"<linearGradient x1='0%' y1='30%' x2='60%' y2='90%' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2561'>\"\n                    \"<stop stop-color='rgba(0, 52, 11, 111)' offset='0.02'></stop>\"\n                    \"<stop stop-color='rgba(90, 43, 30, 2)' offset='1'></stop></linearGradient>\"\n                    \"</svg>\"\n                )\n            );\n    }\n\n    function getSVGTotalCost(uint256 totalCost, uint256 numberOfProuducts)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 totalCostYShift = yStartingPoint +\n            yIncrement *\n            numberOfProuducts +\n            anchorX; // constant just to give a bit of extra spacing\n\n        return\n            string(\n                abi.encodePacked(\n                    '<text xml:space=\"preserve\" class=\"small\" ',\n                    'x=\"2\" y=\"',\n                    totalCostYShift.toString(),\n                    '\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">',\n                    \"Total \",\n                    unicode\"＄\",\n                    totalCost.toString(),\n                    \"</text>\"\n                )\n            );\n    }\n\n    function getSVGClaimedInformation(bool claimedStatus)\n        internal\n        pure\n        returns (string memory)\n    {\n        string memory part1 = '<text xml:space=\"preserve\" class=\"tiny\" x=\"10.478354\" y=\"0\" id=\"text16280-6-9-7\" '\n        'transform=\"matrix(16.4916,0,0,15.627547,5.7282884,90.160098)\"><tspan x=\"15.478354\" '\n        'y=\"1.5\" id=\"tspan1163\">Claimed: ';\n        string memory part2 = '</tspan></text><text xml:space=\"preserve\" class=\"medium\" '\n        'x=\"13.478354\" y=\"14.1689944\" id=\"text16280-6\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">'\n        '<tspan x=\"15.478354\" y=\"5.4\" id=\"tspan1165\">Voucher ';\n        if (claimedStatus) {\n            return string(abi.encodePacked(part1, \"Yes\", part2));\n        } else {\n            return string(abi.encodePacked(part1, \"No\", part2));\n        }\n    }\n\n    function generateImage(\n        Metadata calldata _metadata,\n        string memory _ticketFootnotes\n    ) internal view returns (string memory) {\n        string memory description;\n        uint256 totalCost;\n\n        (description, totalCost) = generateProductList(\n            _metadata,\n            unitSymbol,\n            erc20Decimals\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    getSVGHeader(),\n                    _metadata.crowdtainerId.toString(),\n                    \"</tspan></text>\",\n                    getSVGClaimedInformation(_metadata.claimed),\n                    _metadata.tokenId.toString(),\n                    \"</tspan></text>\",\n                    description,\n                    getSVGTotalCost(totalCost, _metadata.numberOfProducts),\n                    '<text xml:space=\"preserve\" class=\"footer\" x=\"85\" y=\"380\" transform=\"scale(1.0272733,0.97345081)\">',\n                    _ticketFootnotes,\n                    \"</text></g>\",\n                    getSVGFooter()\n                )\n            );\n    }\n\n    constructor(\n        string memory _unitSymbol,\n        uint8 _erc20Decimals,\n        string memory _ticketFootnotes\n    ) {\n        unitSymbol = _unitSymbol;\n        erc20Decimals = _erc20Decimals;\n        ticketFootnotes = _ticketFootnotes;\n    }\n\n    /**\n     * @dev Return a DATAURI containing a voucher SVG representation of the given tokenId.\n     * @param _metadata Address that represents the product or service provider.\n     * @return The voucher image in SVG, in data URI scheme.\n     */\n    function uri(Metadata calldata _metadata)\n        external\n        view\n        returns (string memory)\n    {\n        string memory productList = \"[\";\n        uint256 totalCost;\n\n        for (uint256 i = 0; i < _metadata.numberOfProducts; i++) {\n            if (_metadata.quantities[i] == 0) {\n                continue;\n            }\n\n            productList = string(\n                abi.encodePacked(\n                    productList,\n                    '{\"description\":\"',\n                    _metadata.productDescription[i],\n                    '\",\"amount\":\"',\n                    _metadata.quantities[i].toString(),\n                    '\",\"pricePerUnit\":\"',\n                    _metadata.unitPricePerType[i].toString(),\n                    '\"}'\n                )\n            );\n\n            if (i < _metadata.numberOfProducts - 1) {\n                productList = string(abi.encodePacked(productList, \", \"));\n            }\n            totalCost +=\n                _metadata.unitPricePerType[i] *\n                _metadata.quantities[i];\n        }\n\n        productList = string(abi.encodePacked(productList, \"]\"));\n\n        string memory description = string(\n            abi.encodePacked(\n                productList,\n                ', \"TotalCost\":\"',\n                totalCost.toString(),\n                '\"'\n            )\n        );\n\n        string memory image = Base64.encode(\n            bytes(generateImage(_metadata, ticketFootnotes))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"crowdtainerId\":\"',\n                                _metadata.crowdtainerId.toString(),\n                                '\", \"voucherId\":\"',\n                                _metadata.tokenId.toString(),\n                                '\", \"currentOwner\":\"0x',\n                                addressToString(_metadata.currentOwner),\n                                '\", \"description\":',\n                                description,\n                                ', \"image\": \"',\n                                \"data:image/svg+xml;base64,\",\n                                image,\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function addressToString(address _address)\n        internal\n        pure\n        returns (string memory)\n    {\n        return Strings.toHexString(uint256(uint160(_address)), 20);\n    }\n}\n/* solhint-enable quotes */\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "src/contracts/External/Coin.sol": {
      "content": "// SPDX-License-Identifier: GNU-AGPLv3\n// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract Coin is IERC20 {\n    // --- Auth ---\n    mapping(address => uint256) public authorizedAccounts;\n\n    /**\n     * @notice Add auth to an account\n     * @param account Account to add auth to\n     */\n    function addAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 1;\n        emit AddAuthorization(account);\n    }\n\n    /**\n     * @notice Remove auth from an account\n     * @param account Account to remove auth from\n     */\n    function removeAuthorization(address account) external isAuthorized {\n        authorizedAccounts[account] = 0;\n        emit RemoveAuthorization(account);\n    }\n\n    /**\n     * @notice Checks whether msg.sender can call an authed function\n     **/\n    modifier isAuthorized() {\n        require(\n            authorizedAccounts[msg.sender] == 1,\n            \"Coin/account-not-authorized\"\n        );\n        _;\n    }\n\n    // --- ERC20 Data ---\n    // The name of this coin\n    string public name;\n    // The symbol of this coin\n    string public symbol;\n    // The version of this Coin contract\n    string public version = \"1\";\n    // The number of decimals that this coin has\n    uint8 public constant decimals = 6;\n\n    // The id of the chain where this coin was deployed\n    uint256 public chainId;\n    // The total supply of this coin\n    uint256 public totalSupply;\n\n    // Mapping of coin balances\n    mapping(address => uint256) public balanceOf;\n    // Mapping of allowances\n    mapping(address => mapping(address => uint256)) public allowance;\n    // Mapping of nonces used for permits\n    mapping(address => uint256) public nonces;\n\n    // --- Events ---\n    event AddAuthorization(address account);\n    event RemoveAuthorization(address account);\n\n    // event Approval(address indexed src, address indexed guy, uint256 amount);\n    // event Transfer(address indexed src, address indexed dst, uint256 amount);\n\n    // --- Math ---\n    function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"Coin/add-overflow\");\n    }\n\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"Coin/sub-underflow\");\n    }\n\n    /* solhint-disable var-name-mixedcase */\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH =\n        0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    /* solhint-enable var-name-mixedcase */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 chainId_\n    ) {\n        authorizedAccounts[msg.sender] = 1;\n        name = name_;\n        symbol = symbol_;\n        chainId = chainId_;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId_,\n                address(this)\n            )\n        );\n        emit AddAuthorization(msg.sender);\n    }\n\n    // --- Token ---\n    /*\n     * @notice Transfer coins to another address\n     * @param dst The address to transfer coins to\n     * @param amount The amount of coins to transfer\n     */\n    function transfer(address dst, uint256 amount) external returns (bool) {\n        return transferFrom(msg.sender, dst, amount);\n    }\n\n    /*\n     * @notice Transfer coins from a source address to a destination address (if allowed)\n     * @param src The address from which to transfer coins\n     * @param dst The address that will receive the coins\n     * @param amount The amount of coins to transfer\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) public returns (bool) {\n        require(dst != address(0), \"Coin/null-dst\");\n        require(dst != address(this), \"Coin/dst-cannot-be-this-contract\");\n        require(balanceOf[src] >= amount, \"Coin/insufficient-balance\");\n        if (\n            src != msg.sender && allowance[src][msg.sender] != type(uint128).max\n        ) {\n            require(\n                allowance[src][msg.sender] >= amount,\n                \"Coin/insufficient-allowance\"\n            );\n            allowance[src][msg.sender] = subtract(\n                allowance[src][msg.sender],\n                amount\n            );\n        }\n        balanceOf[src] = subtract(balanceOf[src], amount);\n        balanceOf[dst] = addition(balanceOf[dst], amount);\n        emit Transfer(src, dst, amount);\n        return true;\n    }\n\n    /*\n     * @notice Mint new coins\n     * @param usr The address for which to mint coins\n     * @param amount The amount of coins to mint\n     */\n    function mint(address usr, uint256 amount) external isAuthorized {\n        balanceOf[usr] = addition(balanceOf[usr], amount);\n        totalSupply = addition(totalSupply, amount);\n        emit Transfer(address(0), usr, amount);\n    }\n\n    /*\n     * @notice Burn coins from an address\n     * @param usr The address that will have its coins burned\n     * @param amount The amount of coins to burn\n     */\n    function burn(address usr, uint256 amount) external {\n        require(balanceOf[usr] >= amount, \"Coin/insufficient-balance\");\n        if (\n            usr != msg.sender && allowance[usr][msg.sender] != type(uint128).max\n        ) {\n            require(\n                allowance[usr][msg.sender] >= amount,\n                \"Coin/insufficient-allowance\"\n            );\n            allowance[usr][msg.sender] = subtract(\n                allowance[usr][msg.sender],\n                amount\n            );\n        }\n        balanceOf[usr] = subtract(balanceOf[usr], amount);\n        totalSupply = subtract(totalSupply, amount);\n        emit Transfer(usr, address(0), amount);\n    }\n\n    /*\n     * @notice Change the transfer/burn allowance that another address has on your behalf\n     * @param usr The address whose allowance is changed\n     * @param amount The new total allowance for the usr\n     */\n    function approve(address usr, uint256 amount) external returns (bool) {\n        allowance[msg.sender][usr] = amount;\n        emit Approval(msg.sender, usr, amount);\n        return true;\n    }\n\n    // --- Alias ---\n    /*\n     * @notice Send coins to another address\n     * @param usr The address to send tokens to\n     * @param amount The amount of coins to send\n     */\n    function push(address usr, uint256 amount) external {\n        transferFrom(msg.sender, usr, amount);\n    }\n\n    /*\n     * @notice Transfer coins from another address to your address\n     * @param usr The address to take coins from\n     * @param amount The amount of coins to take from the usr\n     */\n    function pull(address usr, uint256 amount) external {\n        transferFrom(usr, msg.sender, amount);\n    }\n\n    /*\n     * @notice Transfer coins from another address to a destination address (if allowed)\n     * @param src The address to transfer coins from\n     * @param dst The address to transfer coins to\n     * @param amount The amount of coins to transfer\n     */\n    function move(\n        address src,\n        address dst,\n        uint256 amount\n    ) external {\n        transferFrom(src, dst, amount);\n    }\n\n    // --- Approve by signature ---\n    /*\n     * @notice Submit a signed message that modifies an allowance for a specific address\n     */\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        holder,\n                        spender,\n                        nonce,\n                        expiry,\n                        allowed\n                    )\n                )\n            )\n        );\n\n        require(holder != address(0), \"Coin/invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"Coin/invalid-permit\");\n        require(\n            expiry == 0 || block.timestamp <= expiry,\n            \"Coin/permit-expired\"\n        );\n        require(nonce == nonces[holder]++, \"Coin/invalid-nonce\");\n        uint256 wad = allowed ? type(uint128).max : 0;\n        allowance[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}