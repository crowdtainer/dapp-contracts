{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/contracts/Metadata/IMetadataService.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nuint256 constant _MAX_NUMBER_OF_PRODUCTS = 4;\n\nstruct Metadata {\n    uint256 crowdtainerId;\n    uint256 tokenId;\n    address currentOwner;\n    bool claimed;\n    uint256[_MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\n    uint256[_MAX_NUMBER_OF_PRODUCTS] quantities;\n    string[_MAX_NUMBER_OF_PRODUCTS] productDescription;\n    uint256 numberOfProducts;\n}\n\n/**\n * @dev Metadata service used to provide URI for a voucher / token id.\n */\ninterface IMetadataService {\n    function uri(Metadata memory) external view returns (string memory);\n}\n"
    },
    "src/contracts/Metadata/MetadataServiceV1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.16;\n\nimport \"./IMetadataService.sol\";\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\n/* solhint-disable quotes */\n\ncontract MetadataServiceV1 is IMetadataService {\n    using Strings for uint256;\n    using Strings for uint24;\n    using Strings for uint8;\n\n    uint24 internal constant yIncrement = 1;\n    uint24 internal constant yStartingPoint = 10;\n    uint24 internal constant anchorX = 2;\n\n    uint8 private erc20Decimals;\n\n    string private unitSymbol;\n    string private ticketFootnotes;\n\n    function generateSVGProductDescription(\n        uint256 quantities,\n        uint256 price,\n        string memory _unitSymbol,\n        string memory description\n    ) internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    quantities.toString(),\n                    unicode\"\\t\",\n                    \"  x  \",\n                    unicode\"\\t\",\n                    description,\n                    unicode\"\\t\",\n                    \" - \",\n                    unicode\"\\t\",\n                    price.toString(),\n                    unicode\"\\t\",\n                    _unitSymbol\n                )\n            );\n    }\n\n    function generateProductList(\n        Metadata calldata _metadata,\n        string memory _unitSymbol,\n        uint8 _erc20Decimals\n    ) internal pure returns (string memory productList, uint256 totalCost) {\n        uint256 newY = yStartingPoint;\n\n        for (uint24 i = 0; i < _metadata.numberOfProducts; i++) {\n            if (_metadata.quantities[i] == 0) {\n                continue;\n            }\n\n            productList = string(\n                abi.encodePacked(\n                    productList,\n                    '<text xml:space=\"preserve\" class=\"small\" x=\"',\n                    anchorX.toString(),\n                    '\" y=\"',\n                    newY.toString(),\n                    '\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">',\n                    generateSVGProductDescription(\n                        _metadata.quantities[i],\n                        _metadata.unitPricePerType[i] / (10**_erc20Decimals),\n                        _unitSymbol,\n                        _metadata.productDescription[i]\n                    ),\n                    \"</text>\"\n                )\n            );\n\n            if (i < _metadata.numberOfProducts) {\n                newY += yIncrement;\n            }\n\n            totalCost +=\n                _metadata.unitPricePerType[i] *\n                _metadata.quantities[i];\n        }\n\n        return (productList, totalCost / 10**_erc20Decimals);\n    }\n\n    function getSVGHeader() internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '<svg width=\"100mm\" height=\"130mm\" viewBox=\"0 0 300 430\" version=\"1.1\" id=\"svg5\" '\n                    'class=\"svgBody\" xmlns=\"http://www.w3.org/2000/svg\">'\n                    '<g id=\"layer1\">'\n                    '<path id=\"path2\" style=\"color:#000000;fill:url(#SvgjsLinearGradient2561);fill-opacity:0.899193;fill-rule:evenodd;stroke-width:1.54543;-inkscape-stroke:none\" '\n                    'd=\"m32.202 12.58q-26.5047-.0216-26.4481 26.983l0 361.7384q.0114 11.831 15.7269 11.7809h76.797c-.1609-1.7418-.6734-11.5291 '\n                    \"8.1908-11.0679.1453.008.3814.0165.5275.0165h90.8068c.1461 0 .383-.005.5291-.005 6.7016-.006 7.7083 9.3554 \"\n                    \"7.836 11.0561.0109.1453.1352.2634.2813.2634l80.0931 0q12.2849.02 12.2947-12.2947v-361.7669q-.1068-26.9614-26.4482-26.9832h-66.2794c.003 \"\n                    '12.6315.0504 9.5559-54.728 9.546-48.348.0106-51.5854 2.1768-51.8044-9.7542z\"/>'\n                    '<text xml:space=\"preserve\" class=\"medium\" x=\"10.478354\" y=\"0\" id=\"text16280-6-9\" transform=\"matrix(16.4916,0,0,15.627547,7.1325211,54.664932)\">',\n                    '<tspan x=\"15.478354\" y=\"1\">Crowdtainer '\n                )\n            );\n    }\n\n    function getSVGFooter() internal pure returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    '<style>.svgBody {font-family: \"Helvetica\" }'\n                    \".tiny {font-stretch:normal;font-size:0.525624px;line-height:1.25;text-anchor:end;white-space:pre;fill:#f9f9f9;}\"\n                    \".footer {font-stretch:normal;font-size:7px;line-height:.25;white-space:pre;fill:#f9f9f9;}\"\n                    \".small {font-size:0.65px;text-align:start;text-anchor:start;white-space:pre;fill:#f9f9f9;}\"\n                    \".medium {font-size:0.92px;\"\n                    \"font-family:Helvetica;text-align:end;text-anchor:end;white-space:pre;\"\n                    \"fill:#f9f9f9;}</style>\"\n                    \"<linearGradient x1='0%' y1='30%' x2='60%' y2='90%' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2561'>\"\n                    \"<stop stop-color='rgba(20, 110, 160, 100)' offset='0.02'></stop>\"\n                    \"<stop stop-color='rgba(25, 59, 90, 100)' offset='1'></stop></linearGradient>\"\n                    \"</svg>\"\n                )\n            );\n    }\n\n    function getSVGTotalCost(uint256 totalCost, uint256 numberOfProuducts)\n        internal\n        pure\n        returns (string memory)\n    {\n        uint256 totalCostYShift = yStartingPoint +\n            yIncrement *\n            numberOfProuducts +\n            anchorX; // constant just to give a bit of extra spacing\n\n        return\n            string(\n                abi.encodePacked(\n                    '<text xml:space=\"preserve\" class=\"small\" ',\n                    'x=\"2\" y=\"',\n                    totalCostYShift.toString(),\n                    '\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">',\n                    \"Total \",\n                    unicode\"＄\",\n                    totalCost.toString(),\n                    \"</text>\"\n                )\n            );\n    }\n\n    function getSVGClaimedInformation(bool claimedStatus)\n        internal\n        pure\n        returns (string memory)\n    {\n        string\n            memory part1 = '<text xml:space=\"preserve\" class=\"tiny\" x=\"10.478354\" y=\"0\" id=\"text16280-6-9-7\" '\n            'transform=\"matrix(16.4916,0,0,15.627547,5.7282884,90.160098)\"><tspan x=\"15.478354\" '\n            'y=\"1.5\" id=\"tspan1163\">Claimed: ';\n        string\n            memory part2 = '</tspan></text><text xml:space=\"preserve\" class=\"medium\" '\n            'x=\"13.478354\" y=\"14.1689944\" id=\"text16280-6\" transform=\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\">'\n            '<tspan x=\"15.478354\" y=\"5.4\" id=\"tspan1165\">Voucher ';\n        if (claimedStatus) {\n            return string(abi.encodePacked(part1, \"Yes\", part2));\n        } else {\n            return string(abi.encodePacked(part1, \"No\", part2));\n        }\n    }\n\n    function generateImage(\n        Metadata calldata _metadata,\n        string memory _ticketFootnotes\n    ) internal view returns (string memory) {\n        string memory description;\n        uint256 totalCost;\n\n        (description, totalCost) = generateProductList(\n            _metadata,\n            unitSymbol,\n            erc20Decimals\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    getSVGHeader(),\n                    _metadata.crowdtainerId.toString(),\n                    \"</tspan></text>\",\n                    getSVGClaimedInformation(_metadata.claimed),\n                    _metadata.tokenId.toString(),\n                    \"</tspan></text>\",\n                    description,\n                    getSVGTotalCost(totalCost, _metadata.numberOfProducts),\n                    '<text xml:space=\"preserve\" class=\"footer\" x=\"85\" y=\"380\" transform=\"scale(1.0272733,0.97345081)\">',\n                    _ticketFootnotes,\n                    \"</text></g>\",\n                    getSVGFooter()\n                )\n            );\n    }\n\n    constructor(\n        string memory _unitSymbol,\n        uint8 _erc20Decimals,\n        string memory _ticketFootnotes\n    ) {\n        unitSymbol = _unitSymbol;\n        erc20Decimals = _erc20Decimals;\n        ticketFootnotes = _ticketFootnotes;\n    }\n\n    /**\n     * @dev Return a DATAURI containing a voucher SVG representation of the given tokenId.\n     * @param _metadata Address that represents the product or service provider.\n     * @return The voucher image in SVG, in data URI scheme.\n     */\n    function uri(Metadata calldata _metadata)\n        external\n        view\n        returns (string memory)\n    {\n        string memory productList = \"[\";\n        uint256 totalCost;\n\n        for (uint256 i = 0; i < _metadata.numberOfProducts; i++) {\n            productList = string(\n                abi.encodePacked(\n                    productList,\n                    '{\"description\":\"',\n                    _metadata.productDescription[i],\n                    '\",\"amount\":\"',\n                    _metadata.quantities[i].toString(),\n                    '\",\"pricePerUnit\":\"',\n                    _metadata.unitPricePerType[i].toString(),\n                    '\"}'\n                )\n            );\n\n            if (i < _metadata.numberOfProducts - 1) {\n                productList = string(abi.encodePacked(productList, \", \"));\n            }\n            totalCost +=\n                _metadata.unitPricePerType[i] *\n                _metadata.quantities[i];\n        }\n\n        productList = string(abi.encodePacked(productList, \"]\"));\n\n        string memory description = string(\n            abi.encodePacked(\n                productList,\n                ', \"TotalCost\":\"',\n                totalCost.toString(),\n                '\"'\n            )\n        );\n\n        string memory image = Base64.encode(\n            bytes(generateImage(_metadata, ticketFootnotes))\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"crowdtainerId\":\"',\n                                _metadata.crowdtainerId.toString(),\n                                '\", \"voucherId\":\"',\n                                _metadata.tokenId.toString(),\n                                '\", \"currentOwner\":\"',\n                                addressToString(_metadata.currentOwner),\n                                '\", ',\n                                '\"erc20Symbol\":\"',\n                                unitSymbol,\n                                '\", \"erc20Decimals\":\"',\n                                erc20Decimals.toString(),\n                                '\", \"description\":',\n                                description,\n                                ', \"image\": \"',\n                                \"data:image/svg+xml;base64,\",\n                                image,\n                                '\"}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function addressToString(address _address)\n        internal\n        pure\n        returns (string memory)\n    {\n        return Strings.toHexString(uint256(uint160(_address)), 20);\n    }\n}\n/* solhint-enable quotes */\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}