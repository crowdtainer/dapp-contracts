{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_unitSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ticketFootnotes",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "crowdtainerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currentOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256[4]",
              "name": "unitPricePerType",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256[4]",
              "name": "quantities",
              "type": "uint256[4]"
            },
            {
              "internalType": "string[4]",
              "name": "productDescription",
              "type": "string[4]"
            },
            {
              "internalType": "uint256",
              "name": "numberOfProducts",
              "type": "uint256"
            }
          ],
          "internalType": "struct Metadata",
          "name": "_metadata",
          "type": "tuple"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x94d8accd75396f8ef4d5e4ca01da53faf86e84447a03d7bce5c29c34d2f7cb77",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2596715",
    "logsBloom": "0x
    "blockHash": "0x818317af80975d70601fd8aba5c512a29a5a3380dbe45a5d5016a5514288082b",
    "transactionHash": "0x94d8accd75396f8ef4d5e4ca01da53faf86e84447a03d7bce5c29c34d2f7cb77",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "2596715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "TST",
    "This ticket is not valid as an invoice."
  ],
  "numDeployments": 1,
  "solcInputHash": "96a933fbba3a0bd40e59c78cafcf1d6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_unitSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ticketFootnotes\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crowdtainerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"unitPricePerType\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"quantities\",\"type\":\"uint256[4]\"},{\"internalType\":\"string[4]\",\"name\":\"productDescription\",\"type\":\"string[4]\"},{\"internalType\":\"uint256\",\"name\":\"numberOfProducts\",\"type\":\"uint256\"}],\"internalType\":\"struct Metadata\",\"name\":\"_metadata\",\"type\":\"tuple\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uri((uint256,uint256,address,bool,uint256[4],uint256[4],string[4],uint256))\":{\"details\":\"Return a DATAURI containing a voucher SVG representation of the given tokenId.\",\"params\":{\"_metadata\":\"Address that represents the product or service provider.\"},\"returns\":{\"_0\":\"The voucher image in SVG, in data URI scheme.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Metadata/MetadataServiceV1.sol\":\"MetadataServiceV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"src/contracts/Metadata/IMetadataService.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nuint256 constant _MAX_NUMBER_OF_PRODUCTS = 4;\\n\\nstruct Metadata {\\n    uint256 crowdtainerId;\\n    uint256 tokenId;\\n    address currentOwner;\\n    bool claimed;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] quantities;\\n    string[_MAX_NUMBER_OF_PRODUCTS] productDescription;\\n    uint256 numberOfProducts;\\n}\\n\\n/**\\n * @dev Metadata service used to provide URI for a voucher / token id.\\n */\\ninterface IMetadataService {\\n    function uri(Metadata memory) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5047f3fe3a6e2dd1f992950bbbdc8be5bcf7d185477e319951c1d2f58ff80c4e\",\"license\":\"GPL-3.0\"},\"src/contracts/Metadata/MetadataServiceV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./IMetadataService.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\n/* solhint-disable quotes */\\n\\ncontract MetadataServiceV1 is IMetadataService {\\n    using Strings for uint256;\\n    using Strings for uint24;\\n\\n    uint24 internal constant yIncrement = 1;\\n    uint24 internal constant yStartingPoint = 10;\\n    uint24 internal constant anchorX = 2;\\n\\n    string private unitSymbol;\\n    string private ticketFootnotes;\\n\\n    function generateSVGProductDescription(\\n        uint256 quantities,\\n        uint256 price,\\n        string memory _unitSymbol,\\n        string memory description\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    quantities.toString(),\\n                    \\\"  x  \\\",\\n                    description,\\n                    \\\" - \\\",\\n                    _unitSymbol,\\n                    price.toString()\\n                )\\n            );\\n    }\\n\\n    function generateProductList(\\n        Metadata calldata _metadata,\\n        string memory _unitSymbol\\n    ) internal pure returns (string memory productList, uint256 totalCost) {\\n        uint256 newY = yStartingPoint;\\n\\n        for (uint24 i = 0; i < _metadata.numberOfProducts; i++) {\\n            if (_metadata.quantities[i] == 0) {\\n                continue;\\n            }\\n\\n            productList = string(\\n                abi.encodePacked(\\n                    productList,\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"small\\\" x=\\\"',\\n                    anchorX.toString(),\\n                    '\\\" y=\\\"',\\n                    newY.toString(),\\n                    '\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">',\\n                    generateSVGProductDescription(\\n                        _metadata.quantities[i],\\n                        _metadata.unitPricePerType[i],\\n                        _unitSymbol,\\n                        _metadata.productDescription[i]\\n                    ),\\n                    \\\"</text>\\\"\\n                )\\n            );\\n\\n            if (i < _metadata.numberOfProducts) {\\n                newY += yIncrement;\\n            }\\n\\n            totalCost +=\\n                _metadata.unitPricePerType[i] *\\n                _metadata.quantities[i];\\n        }\\n\\n        return (productList, totalCost);\\n    }\\n\\n    function getSVGHeader() internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg width=\\\"100mm\\\" height=\\\"130mm\\\" viewBox=\\\"0 0 300 430\\\" version=\\\"1.1\\\" id=\\\"svg5\\\" '\\n                    'class=\\\"svgBody\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">'\\n                    '<g id=\\\"layer1\\\">'\\n                    '<path id=\\\"path2\\\" style=\\\"color:#000000;fill:url(#SvgjsLinearGradient2561);fill-opacity:0.899193;fill-rule:evenodd;stroke-width:1.54543;-inkscape-stroke:none\\\" '\\n                    'd=\\\"m32.202 12.58q-26.5047-.0216-26.4481 26.983l0 361.7384q.0114 11.831 15.7269 11.7809h76.797c-.1609-1.7418-.6734-11.5291 '\\n                    \\\"8.1908-11.0679.1453.008.3814.0165.5275.0165h90.8068c.1461 0 .383-.005.5291-.005 6.7016-.006 7.7083 9.3554 \\\"\\n                    \\\"7.836 11.0561.0109.1453.1352.2634.2813.2634l80.0931 0q12.2849.02 12.2947-12.2947v-361.7669q-.1068-26.9614-26.4482-26.9832h-66.2794c.003 \\\"\\n                    '12.6315.0504 9.5559-54.728 9.546-48.348.0106-51.5854 2.1768-51.8044-9.7542z\\\"/>'\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"medium\\\" x=\\\"10.478354\\\" y=\\\"0\\\" id=\\\"text16280-6-9\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.1325211,54.664932)\\\">',\\n                    '<tspan x=\\\"15.478354\\\" y=\\\"1\\\">Crowdtainer '\\n                )\\n            );\\n    }\\n\\n    function getSVGFooter() internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<style>.svgBody {font-family: \\\"Helvetica\\\" }'\\n                    \\\".tiny {font-stretch:normal;font-size:0.525624px;line-height:1.25;text-anchor:end;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".footer {font-stretch:normal;font-size:7px;line-height:.25;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".small {font-size:0.65px;text-align:start;text-anchor:start;white-space:pre;fill:#f9f9f9;}\\\"\\n                    \\\".medium {font-size:0.92px;\\\"\\n                    \\\"font-family:Helvetica;text-align:end;text-anchor:end;white-space:pre;\\\"\\n                    \\\"fill:#f9f9f9;}</style>\\\"\\n                    \\\"<linearGradient x1='0%' y1='30%' x2='60%' y2='90%' gradientUnits='userSpaceOnUse' id='SvgjsLinearGradient2561'>\\\"\\n                    \\\"<stop stop-color='rgba(0, 52, 11, 111)' offset='0.02'></stop>\\\"\\n                    \\\"<stop stop-color='rgba(90, 43, 30, 2)' offset='1'></stop></linearGradient>\\\"\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    function getSVGTotalCost(uint256 totalCost, uint256 numberOfProuducts)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 totalCostYShift = yStartingPoint +\\n            yIncrement *\\n            numberOfProuducts +\\n            anchorX; // constant just to give a bit of extra spacing\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"small\\\" ',\\n                    'x=\\\"2\\\" y=\\\"',\\n                    totalCostYShift.toString(),\\n                    '\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">',\\n                    \\\"Total \\\",\\n                    unicode\\\"\\uff04\\\",\\n                    totalCost.toString(),\\n                    \\\"</text>\\\"\\n                )\\n            );\\n    }\\n\\n    function getSVGClaimedInformation(bool claimedStatus)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        string memory part1 = '<text xml:space=\\\"preserve\\\" class=\\\"tiny\\\" x=\\\"10.478354\\\" y=\\\"0\\\" id=\\\"text16280-6-9-7\\\" '\\n        'transform=\\\"matrix(16.4916,0,0,15.627547,5.7282884,90.160098)\\\"><tspan x=\\\"15.478354\\\" '\\n        'y=\\\"1.5\\\" id=\\\"tspan1163\\\">Claimed: ';\\n        string memory part2 = '</tspan></text><text xml:space=\\\"preserve\\\" class=\\\"medium\\\" '\\n        'x=\\\"13.478354\\\" y=\\\"14.1689944\\\" id=\\\"text16280-6\\\" transform=\\\"matrix(16.4916,0,0,15.627547,7.589772,6.9947903)\\\">'\\n        '<tspan x=\\\"15.478354\\\" y=\\\"5.4\\\" id=\\\"tspan1165\\\">Voucher ';\\n        if (claimedStatus) {\\n            return string(abi.encodePacked(part1, \\\"Yes\\\", part2));\\n        } else {\\n            return string(abi.encodePacked(part1, \\\"No\\\", part2));\\n        }\\n    }\\n\\n    function generateImage(\\n        Metadata calldata _metadata,\\n        string memory _ticketFootnotes\\n    ) internal view returns (string memory) {\\n        string memory description;\\n        uint256 totalCost;\\n\\n        (description, totalCost) = generateProductList(_metadata, unitSymbol);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    getSVGHeader(),\\n                    _metadata.crowdtainerId.toString(),\\n                    \\\"</tspan></text>\\\",\\n                    getSVGClaimedInformation(_metadata.claimed),\\n                    _metadata.tokenId.toString(),\\n                    \\\"</tspan></text>\\\",\\n                    description,\\n                    getSVGTotalCost(totalCost, _metadata.numberOfProducts),\\n                    '<text xml:space=\\\"preserve\\\" class=\\\"footer\\\" x=\\\"85\\\" y=\\\"380\\\" transform=\\\"scale(1.0272733,0.97345081)\\\">',\\n                    _ticketFootnotes,\\n                    \\\"</text></g>\\\",\\n                    getSVGFooter()\\n                )\\n            );\\n    }\\n\\n    constructor(string memory _unitSymbol, string memory _ticketFootnotes) {\\n        unitSymbol = _unitSymbol;\\n        ticketFootnotes = _ticketFootnotes;\\n    }\\n\\n    /**\\n     * @dev Return a DATAURI containing a voucher SVG representation of the given tokenId.\\n     * @param _metadata Address that represents the product or service provider.\\n     * @return The voucher image in SVG, in data URI scheme.\\n     */\\n    function uri(Metadata calldata _metadata)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        string memory productList = \\\"[\\\";\\n        uint256 totalCost;\\n\\n        for (uint256 i = 0; i < _metadata.numberOfProducts; i++) {\\n            if (_metadata.quantities[i] == 0) {\\n                continue;\\n            }\\n\\n            productList = string(\\n                abi.encodePacked(\\n                    productList,\\n                    '{\\\"description\\\":\\\"',\\n                    _metadata.productDescription[i],\\n                    '\\\",\\\"amount\\\":\\\"',\\n                    _metadata.quantities[i].toString(),\\n                    '\\\",\\\"pricePerUnit\\\":\\\"',\\n                    _metadata.unitPricePerType[i].toString(),\\n                    '\\\"}'\\n                )\\n            );\\n\\n            if (i < _metadata.numberOfProducts - 1) {\\n                productList = string(abi.encodePacked(productList, \\\", \\\"));\\n            }\\n            totalCost +=\\n                _metadata.unitPricePerType[i] *\\n                _metadata.quantities[i];\\n        }\\n\\n        productList = string(abi.encodePacked(productList, \\\"]\\\"));\\n\\n        string memory description = string(\\n            abi.encodePacked(\\n                productList,\\n                ', \\\"TotalCost\\\":\\\"',\\n                totalCost.toString(),\\n                '\\\"'\\n            )\\n        );\\n\\n        string memory image = Base64.encode(\\n            bytes(generateImage(_metadata, ticketFootnotes))\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"crowdtainerId\\\":\\\"',\\n                                _metadata.crowdtainerId.toString(),\\n                                '\\\", \\\"voucherId\\\":\\\"',\\n                                _metadata.tokenId.toString(),\\n                                '\\\", \\\"currentOwner\\\":\\\"0x',\\n                                addressToString(_metadata.currentOwner),\\n                                '\\\", \\\"description\\\":',\\n                                description,\\n                                ', \\\"image\\\": \\\"',\\n                                \\\"data:image/svg+xml;base64,\\\",\\n                                image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return Strings.toHexString(uint256(uint160(_address)), 20);\\n    }\\n}\\n/* solhint-enable quotes */\\n\",\"keccak256\":\"0x6441d3e40955f2c04ba6f94a64f16d9530014b8a69720a4a477ab469f13e981f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "uri((uint256,uint256,address,bool,uint256[4],uint256[4],string[4],uint256))": {
        "details": "Return a DATAURI containing a voucher SVG representation of the given tokenId.",
        "params": {
          "_metadata": "Address that represents the product or service provider."
        },
        "returns": {
          "_0": "The voucher image in SVG, in data URI scheme."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3642,
        "contract": "src/contracts/Metadata/MetadataServiceV1.sol:MetadataServiceV1",
        "label": "unitSymbol",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3644,
        "contract": "src/contracts/Metadata/MetadataServiceV1.sol:MetadataServiceV1",
        "label": "ticketFootnotes",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}