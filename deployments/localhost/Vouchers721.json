{
  "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdtainerImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccountNotOwnerOrApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrowdtainerInexistent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "crowdtainer",
          "type": "address"
        }
      ],
      "name": "MaximumNumberOfParticipantsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MetadataServiceAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetClaimedOnlyAllowedByShippingAgent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crowdtainer",
          "type": "address"
        },
        {
          "internalType": "enum CrowdtainerState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_crowdtainerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nextCrowdtainerId",
          "type": "uint256"
        }
      ],
      "name": "CrowdtainerDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "crowdtainer",
          "type": "address"
        }
      ],
      "name": "Vouchers721Created",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ID_MULTIPLE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "shippingAgent",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "openingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expireTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "unitPricePerType",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "referralRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralEligibilityValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct CampaignData",
          "name": "_campaignData",
          "type": "tuple"
        },
        {
          "internalType": "string[4]",
          "name": "_productDescription",
          "type": "string[4]"
        },
        {
          "internalType": "address",
          "name": "_metadataService",
          "type": "address"
        }
      ],
      "name": "createCrowdtainer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crowdtainerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "crowdtainerForId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_crowdtainerId",
          "type": "uint256"
        }
      ],
      "name": "crowdtainerIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getClaimStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "idForCrowdtainer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crowdtainer",
          "type": "address"
        },
        {
          "internalType": "uint256[4]",
          "name": "_quantities",
          "type": "uint256[4]"
        },
        {
          "internalType": "bool",
          "name": "_enableReferral",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "leave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadataServiceForCrowdatinerId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setClaimStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdQuantities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToCrowdtainerId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc42c0a8be170b6de72c1a8f8d8d23d8ececb8282a77e4e44c8c126ec9860a0b7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
    "transactionIndex": 0,
    "gasUsed": "4093232",
    "logsBloom": "0x
    "blockHash": "0x42189425c0d6c8b0a9604517bd292d8b488bf32317c08111bd5c28952913f271",
    "transactionHash": "0xc42c0a8be170b6de72c1a8f8d8d23d8ececb8282a77e4e44c8c126ec9860a0b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6,
        "transactionHash": "0xc42c0a8be170b6de72c1a8f8d8d23d8ececb8282a77e4e44c8c126ec9860a0b7",
        "address": "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707",
        "topics": [
          "0xdd7bf9deccc329033ee50f9e925f9bf2a608eac8950906d19cb2ed39ec61cf36",
          "0x0000000000000000000000005fc8d32690cc91d4c39d9d3abcbd16989f875707"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x42189425c0d6c8b0a9604517bd292d8b488bf32317c08111bd5c28952913f271"
      }
    ],
    "blockNumber": 6,
    "cumulativeGasUsed": "4093232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "numDeployments": 1,
  "solcInputHash": "96a933fbba3a0bd40e59c78cafcf1d6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdtainerImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountNotOwnerOrApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrowdtainerInexistent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"crowdtainer\",\"type\":\"address\"}],\"name\":\"MaximumNumberOfParticipantsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataServiceAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetClaimedOnlyAllowedByShippingAgent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crowdtainer\",\"type\":\"address\"},{\"internalType\":\"enum CrowdtainerState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_crowdtainerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nextCrowdtainerId\",\"type\":\"uint256\"}],\"name\":\"CrowdtainerDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crowdtainer\",\"type\":\"address\"}],\"name\":\"Vouchers721Created\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ID_MULTIPLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"shippingAgent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"unitPricePerType\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"referralRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEligibilityValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct CampaignData\",\"name\":\"_campaignData\",\"type\":\"tuple\"},{\"internalType\":\"string[4]\",\"name\":\"_productDescription\",\"type\":\"string[4]\"},{\"internalType\":\"address\",\"name\":\"_metadataService\",\"type\":\"address\"}],\"name\":\"createCrowdtainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdtainerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"crowdtainerForId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_crowdtainerId\",\"type\":\"uint256\"}],\"name\":\"crowdtainerIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getClaimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"idForCrowdtainer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crowdtainer\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_quantities\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"_enableReferral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadataServiceForCrowdatinerId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setClaimStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdQuantities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenIdToCrowdtainerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Essentially, a Crowdtainer factory with ERC721 compliance.Each token id represents a \\\"sold voucher\\\", a set of one or more products or services of a specific Crowdtainer.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"createCrowdtainer((address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,address),string[4],address)\":{\"details\":\"Create and deploy a new Crowdtainer.\",\"params\":{\"_campaignData\":\"Data defining all rules and values of this Crowdtainer instance.\",\"_metadataService\":\"Contract address used to fetch metadata about the token.\",\"_productDescription\":\"An array with the description of each item.\"},\"returns\":{\"_0\":\"crowdtainerId The identifier for the created Crowdtainer.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"params\":{\"_tokenId\":\"The encoded voucher token id.\"},\"returns\":{\"_0\":\"Token URI String.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"Manages multiple Crowdtainer projects and ownership of its product/services by participants.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"Get the metadata representation.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Vouchers721.sol\":\"Vouchers721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0xc5d14e1780f0ea212b19c07b83c8e51b9dc6903017df71e6de1fae364d724e0d\",\"license\":\"MIT\"},\"src/contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\n// -----------------------------------------------\\n//  Safety margins to avoid impractical values\\n// -----------------------------------------------\\nuint256 constant SAFETY_TIME_RANGE = 1 hours;\\n// @notice Maximum value for referral discounts and rewards\\nuint256 constant SAFETY_MAX_REFERRAL_RATE = 50;\\n// @notice Maximum number of different products for a given Crowdtainer deployment.\\nuint256 constant MAX_NUMBER_OF_PRODUCTS = 4;\\n// @notice Maximum number of items per type on each purchase/join.\\nuint256 constant MAX_NUMBER_OF_PURCHASED_ITEMS = 200;\\n\",\"keccak256\":\"0xb4b6887c5005063858db59f59ce412136727374cb3d28a5e5f533d318ad9dac0\",\"license\":\"GPL-3.0\"},\"src/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./States.sol\\\";\\n\\nlibrary Errors {\\n    // -----------------------------------------------\\n    //  Vouchers\\n    // -----------------------------------------------\\n    // @notice: The provided crowdtainer does not exist.\\n    error CrowdtainerInexistent();\\n    // @notice: Invalid token id.\\n    error InvalidTokenId(uint256 tokenId);\\n    // @notice: Account cannot be of address(0).\\n    error AccountAddressIsZero();\\n    // @notice: Metadata service contract cannot be of address(0).\\n    error MetadataServiceAddressIsZero();\\n    // @notice: Accounts and ids lengths do not match.\\n    error AccountIdsLengthMismatch();\\n    // @notice: ID's and amounts lengths do not match.\\n    error IDsAmountsLengthMismatch();\\n    // @notice: Cannot set approval for the same account.\\n    error CannotSetApprovalForSelf();\\n    // @notice: Caller is not owner nor approved.\\n    error AccountNotOwnerOrApproved();\\n    // @notice: Only the shipping agent is able to set a voucher/tokenId as \\\"claimed\\\".\\n    error SetClaimedOnlyAllowedByShippingAgent();\\n    // @notice: Cannot transfer someone else's tokens.\\n    error UnauthorizedTransfer();\\n    // @notice: Insufficient balance.\\n    error InsufficientBalance();\\n    // @notice: ERC1155: ERC1155Receiver rejected tokens.\\n    error ERC1155ReceiverRejectedTokens();\\n    // @notice: Invalid receiver (non ERC155Receiver).\\n    error NonERC1155Receiver();\\n    // @notice: Can't make transfers in given state.\\n    error TransferNotAllowed(address crowdtainer, CrowdtainerState state);\\n    // @notice: No further participants possible in a given Crowdtainer.\\n    error MaximumNumberOfParticipantsReached(\\n        uint256 maximum,\\n        address crowdtainer\\n    );\\n\\n    // -----------------------------------------------\\n    //  Initialization with invalid parameters\\n    // -----------------------------------------------\\n    // @notice: Cannot initialize with owner of address(0).\\n    error OwnerAddressIsZero();\\n    // @notice: Cannot initialize with token of address(0).\\n    error TokenAddressIsZero();\\n    // @notice: Shipping agent can't have address(0).\\n    error ShippingAgentAddressIsZero();\\n    // @notice: Initialize called with closing time is less than one hour away from the opening time.\\n    error ClosingTimeTooEarly();\\n    // @notice: Initialize called with invalid number of maximum units to be sold (0).\\n    error InvalidMaximumTarget();\\n    // @notice: Initialize called with invalid number of minimum units to be sold (less than maximum sold units).\\n    error InvalidMinimumTarget();\\n    // @notice: Initialize called with invalid minimum and maximum targets (minimum value higher than maximum).\\n    error MinimumTargetHigherThanMaximum();\\n    // @notice: Initialize called with invalid referral rate.\\n    error InvalidReferralRate(uint256 received, uint256 maximum);\\n    // @notice: Referral rate not multiple of 2.\\n    error ReferralRateNotMultipleOfTwo();\\n    // @notice: Refferal minimum value for participation can't be higher than project's minimum target.\\n    error ReferralMinimumValueTooHigh(uint256 received, uint256 maximum);\\n\\n    // -----------------------------------------------\\n    //  Authorization\\n    // -----------------------------------------------\\n    // @notice: Method not authorized for caller (message sender).\\n    error CallerNotAllowed(address expected, address actual);\\n\\n    // -----------------------------------------------\\n    //  Join() operation\\n    // -----------------------------------------------\\n    // @notice: The given referral was not found thus can't be used to claim a discount.\\n    error ReferralInexistent();\\n    // @notice: Purchase exceed target's maximum goal.\\n    error PurchaseExceedsMaximumTarget(uint256 received, uint256 maximum);\\n    // @notice: Number of items purchased per type exceeds maximum allowed.\\n    error ExceededNumberOfItemsAllowed(uint256 received, uint256 maximum);\\n    // @notice: Wallet already used to join project.\\n    error UserAlreadyJoined();\\n    // @notice: Referral is not enabled for the given code/wallet.\\n    error ReferralDisabledForProvidedCode();\\n    // @notice: Participant can't participate in referral if the minimum purchase value specified by the service provider is not met.\\n    error MinimumPurchaseValueForReferralNotMet(\\n        uint256 received,\\n        uint256 minimum\\n    );\\n\\n    // -----------------------------------------------\\n    //  Leave() operation\\n    // -----------------------------------------------\\n    // @notice: It is not possible to leave when the user has referrals enabled, has been referred and gained rewards.\\n    error CannotLeaveDueAccumulatedReferralCredits();\\n\\n    // -----------------------------------------------\\n    //  GetPaidAndDeliver() operation\\n    // -----------------------------------------------\\n    // @notice: GetPaidAndDeliver can't be called on a expired project.\\n    error CrowdtainerExpired(uint256 timestamp, uint256 expiredTime);\\n    // @notice: Not enough funds were raised.\\n    error MinimumTargetNotReached(uint256 minimum, uint256 actual);\\n    // @notice: The project is not active yet.\\n    error OpeningTimeNotReachedYet(uint256 timestamp, uint256 openingTime);\\n\\n    // -----------------------------------------------\\n    //  ClaimFunds() operation\\n    // -----------------------------------------------\\n    // @notice: Can't be called if the project is still active.\\n    error CantClaimFundsOnActiveProject();\\n\\n    // -----------------------------------------------\\n    //  State transition\\n    // -----------------------------------------------\\n    // @notice: Method can't be invoked at current state.\\n    error InvalidOperationFor(CrowdtainerState state);\\n\\n    // -----------------------------------------------\\n    //  Other Invariants\\n    // -----------------------------------------------\\n    // @notice: Payable receive function called, but we don't accept Eth for payment.\\n    error ContractDoesNotAcceptEther();\\n}\\n\",\"keccak256\":\"0x916ec87d2518b50103243de58bb560839eda41be8e431559e49bef3fc499d4f3\",\"license\":\"GPL-3.0\"},\"src/contracts/ICrowdtainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./States.sol\\\";\\n\\n// Data defining all rules and values of a Crowdtainer instance.\\nstruct CampaignData {\\n    // Address that represents the product or service provider.\\n    address shippingAgent;\\n    // Funding opening time.\\n    uint256 openingTime;\\n    // Time after which the owner can no longer withdraw funds.\\n    uint256 expireTime;\\n    // Amount in ERC20 units required for project to be considered to be successful.\\n    uint256 targetMinimum;\\n    // Amount in ERC20 units after which no further participation is possible.\\n    uint256 targetMaximum;\\n    // Array with price of each item, in ERC2O units. Zero is an invalid value and will throw.\\n    uint256[MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\\n    // Percentage used for incentivising participation. Half the amount goes to the referee, and the other half to the referrer.\\n    uint256 referralRate;\\n    // The minimum purchase value required to be eligible to participate in referral rewards.\\n    uint256 referralEligibilityValue;\\n    // Address of the ERC20 token used for payment.\\n    address token;\\n}\\n\\n/**\\n * @dev Interface for Crowdtainer instances.\\n */\\ninterface ICrowdtainer {\\n    /**\\n     * @dev Initializes a Crowdtainer.\\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\\n     */\\n    function initialize(address owner, CampaignData calldata _campaignData)\\n        external;\\n\\n    function crowdtainerState() external view returns (CrowdtainerState);\\n\\n    function shippingAgent() external view returns (address);\\n\\n    function numberOfProducts() external view returns (uint256);\\n\\n    function unitPricePerType(uint256) external view returns (uint256);\\n\\n    /*\\n     * @dev Join the Crowdtainer project.\\n     * @param _wallet The wallet that is joining the Crowdtainer.\\n     * @param _quantities Array with the number of units desired for each product.\\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\\n     * @param _referrer Optional referral code to be used to claim a discount.\\n     *\\n     * @note referrer is the wallet address of a previous participant.\\n     *\\n     * @note if `enableReferral` is true, and the account has been used to claim a discount, then\\n     *       it is no longer possible to leave() during the funding phase.\\n     *\\n     * @note A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\\n     *       To 'update' an order, the user must first 'leave' then join again with the new values.\\n     */\\n    function join(\\n        address _wallet,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\\n        bool _enableReferral,\\n        address _referrer\\n    ) external;\\n\\n    /*\\n     * @dev Leave the Crowdtainer and withdraw deposited funds given when joining.\\n     * @note Calling this method signals that the user is no longer interested in participating.\\n     * @note Only allowed if the respective Crowdtainer is in active `Funding` state.\\n     * @param _wallet The wallet that is leaving the Crowdtainer.\\n     */\\n    function leave(address _wallet) external;\\n}\\n\",\"keccak256\":\"0xfaa4df1443af11d08a325d279845af4ff93d0732212df0b26ffced83ab3fc4d0\",\"license\":\"GPL-3.0\"},\"src/contracts/Metadata/IMetadataService.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nuint256 constant _MAX_NUMBER_OF_PRODUCTS = 4;\\n\\nstruct Metadata {\\n    uint256 crowdtainerId;\\n    uint256 tokenId;\\n    address currentOwner;\\n    bool claimed;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\\n    uint256[_MAX_NUMBER_OF_PRODUCTS] quantities;\\n    string[_MAX_NUMBER_OF_PRODUCTS] productDescription;\\n    uint256 numberOfProducts;\\n}\\n\\n/**\\n * @dev Metadata service used to provide URI for a voucher / token id.\\n */\\ninterface IMetadataService {\\n    function uri(Metadata memory) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x5047f3fe3a6e2dd1f992950bbbdc8be5bcf7d185477e319951c1d2f58ff80c4e\",\"license\":\"GPL-3.0\"},\"src/contracts/States.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nenum CrowdtainerState {\\n    Uninitialized,\\n    Funding,\\n    Delivery,\\n    Failed\\n}\\n\",\"keccak256\":\"0xe5f54a3d7dcb5381721facabd6fb232fd78864b1efe64c3f7d94ee6839235b19\",\"license\":\"GPL-3.0\"},\"src/contracts/Vouchers721.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\n// @dev External dependencies\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n// import \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\n// @dev Internal dependencies\\nimport \\\"./ICrowdtainer.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./Metadata/IMetadataService.sol\\\";\\n\\n/**\\n * @title Manages multiple Crowdtainer projects and ownership of its product/services by participants.\\n * @dev Essentially, a Crowdtainer factory with ERC721 compliance.\\n * @dev Each token id represents a \\\"sold voucher\\\", a set of one or more products or services of a specific Crowdtainer.\\n */\\ncontract Vouchers721 is ERC721, ReentrancyGuard {\\n    // using Clones for address;\\n\\n    // @dev Each Crowdtainer project is alloacted a range.\\n    // @dev This is used as a multiple to deduce the crowdtainer id from a given token id.\\n    uint256 public constant ID_MULTIPLE = 1000000;\\n\\n    // @dev Claimed status of a specific token id\\n    BitMaps.BitMap private claimed;\\n\\n    // @dev The next available tokenId for the given crowdtainerId.\\n    mapping(uint256 => uint256) private nextTokenIdForCrowdtainer;\\n\\n    // @dev Number of created crowdtainers.\\n    uint256 public crowdtainerCount;\\n\\n    address private immutable crowdtainerImplementation;\\n\\n    // @dev Mapping of id to Crowdtainer contract address.\\n    mapping(uint256 => address) public crowdtainerForId;\\n    // @dev Mapping of deployed Crowdtainer contract addresses to its token id.\\n    mapping(address => uint256) public idForCrowdtainer;\\n\\n    // @dev Mapping of base token ID to metadata service, used as return value for URI method.\\n    mapping(uint256 => address) public metadataServiceForCrowdatinerId;\\n\\n    // @dev Mapping of token ID => product quantities.\\n    mapping(uint256 => uint256[MAX_NUMBER_OF_PRODUCTS])\\n        public tokenIdQuantities;\\n\\n    // @dev Mapping of crowdtainer id => array of product descriptions.\\n    mapping(uint256 => string[MAX_NUMBER_OF_PRODUCTS])\\n        public productDescription;\\n\\n    // -----------------------------------------------\\n    //  Events\\n    // -----------------------------------------------\\n\\n    // @note Emmited when this contract is created.\\n    event Vouchers721Created(address indexed crowdtainer);\\n\\n    // @note Emmited when a new Crowdtainer is deployed and initialized by this contract.\\n    event CrowdtainerDeployed(\\n        address indexed _crowdtainerAddress,\\n        uint256 _nextCrowdtainerId\\n    );\\n\\n    // -----------------------------------------------\\n    //  Contract functions\\n    // -----------------------------------------------\\n\\n    constructor(address _crowdtainerImplementation)\\n        ERC721(\\\"Vouchers721\\\", \\\"VV1\\\")\\n    {\\n        // implementation = address(new Crowdtainer(address(this)));\\n        crowdtainerImplementation = _crowdtainerImplementation;\\n        emit Vouchers721Created(address(this));\\n    }\\n\\n    /**\\n     * @dev Create and deploy a new Crowdtainer.\\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\\n     * @param _productDescription An array with the description of each item.\\n     * @param _metadataService Contract address used to fetch metadata about the token.\\n     * @return crowdtainerId The identifier for the created Crowdtainer.\\n     */\\n    function createCrowdtainer(\\n        CampaignData calldata _campaignData,\\n        string[MAX_NUMBER_OF_PRODUCTS] memory _productDescription,\\n        address _metadataService\\n    ) external returns (address, uint256) {\\n        if (_metadataService == address(0)) {\\n            revert Errors.MetadataServiceAddressIsZero();\\n        }\\n\\n        ICrowdtainer crowdtainer = ICrowdtainer(\\n            Clones.clone(crowdtainerImplementation)\\n        );\\n        // Crowdtainer crowdtainer = new Crowdtainer(address(this));\\n\\n        crowdtainer.initialize(address(this), _campaignData);\\n\\n        idForCrowdtainer[address(crowdtainer)] = ++crowdtainerCount;\\n        crowdtainerForId[crowdtainerCount] = address(crowdtainer);\\n\\n        productDescription[crowdtainerCount] = _productDescription;\\n        metadataServiceForCrowdatinerId[crowdtainerCount] = _metadataService;\\n        emit CrowdtainerDeployed(address(crowdtainer), crowdtainerCount);\\n\\n        return (address(crowdtainer), crowdtainerCount);\\n    }\\n\\n    /*\\n     * @dev Join the pool.\\n     * @param _crowdtainerId Crowdtainer project id; The token id base value.\\n     * @param _quantities Array with the number of units desired for each product.\\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\\n     * @param _referrer Optional referral code to be used to claim a discount.\\n     * @return The token id that represents the created voucher.\\n     *\\n     * @note referrer is the wallet address of a previous participant.\\n     *\\n     * @note if `enableReferral` is true, and the user decides to leave after the wallet has been used to claim a discount,\\n     *       then the full value can't be claimed if deciding to leave the project.\\n     *\\n     * @note A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\\n     *       To 'update' an order, the user must first 'leave' then join again with the new values.\\n     *\\n     */\\n    function join(\\n        address _crowdtainer,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\\n        bool _enableReferral,\\n        address _referrer\\n    ) external returns (uint256) {\\n        uint256 crowdtainerId = idForCrowdtainer[_crowdtainer];\\n\\n        if (crowdtainerId == 0) {\\n            revert Errors.CrowdtainerInexistent();\\n        }\\n\\n        ICrowdtainer crowdtainer = ICrowdtainer(_crowdtainer);\\n\\n        crowdtainer.join(msg.sender, _quantities, _enableReferral, _referrer);\\n\\n        uint256 nextAvailableTokenId = ++nextTokenIdForCrowdtainer[\\n            crowdtainerId\\n        ];\\n\\n        if (nextAvailableTokenId >= ID_MULTIPLE) {\\n            revert Errors.MaximumNumberOfParticipantsReached(\\n                ID_MULTIPLE,\\n                _crowdtainer\\n            );\\n        }\\n\\n        uint256 newTokenID = (ID_MULTIPLE * crowdtainerId) +\\n            nextAvailableTokenId;\\n\\n        tokenIdQuantities[newTokenID] = _quantities;\\n\\n        // Mint the voucher to the respective owner\\n        _safeMint(msg.sender, newTokenID);\\n\\n        return newTokenID;\\n    }\\n\\n    /*\\n     * @dev Return the specified voucher and withdraw all deposited funds given when joining the Crowdtainer.\\n     * @note Calling this method signals that the user is no longer interested in participating.\\n     * @note Only allowed if the respective Crowdtainer is in active funding state.\\n     */\\n    function leave(uint256 _tokenId) external {\\n        if (ownerOf(_tokenId) != msg.sender) {\\n            revert Errors.AccountNotOwnerOrApproved();\\n        }\\n\\n        address crowdtainerAddress = crowdtainerIdToAddress(\\n            tokenIdToCrowdtainerId(_tokenId)\\n        );\\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\\n\\n        crowdtainer.leave(msg.sender);\\n\\n        delete tokenIdQuantities[_tokenId];\\n\\n        _burn(_tokenId);\\n    }\\n\\n    /**\\n     * @notice Get the metadata representation.\\n     * @param _tokenId The encoded voucher token id.\\n     * @return Token URI String.\\n     */\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        uint256 crowdtainerId = tokenIdToCrowdtainerId(_tokenId);\\n        address crowdtainerAddress = crowdtainerIdToAddress(crowdtainerId);\\n\\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\\n\\n        uint256 numberOfProducts = crowdtainer.numberOfProducts();\\n\\n        IMetadataService metadataService = IMetadataService(\\n            metadataServiceForCrowdatinerId[crowdtainerId]\\n        );\\n\\n        uint256[MAX_NUMBER_OF_PRODUCTS] memory prices = [\\n            crowdtainer.unitPricePerType(0),\\n            crowdtainer.unitPricePerType(1),\\n            crowdtainer.unitPricePerType(2),\\n            crowdtainer.unitPricePerType(3)\\n        ];\\n\\n        Metadata memory metadata = Metadata(\\n            crowdtainerId,\\n            _tokenId - (tokenIdToCrowdtainerId(_tokenId) * ID_MULTIPLE),\\n            ownerOf(_tokenId),\\n            getClaimStatus(_tokenId),\\n            prices,\\n            tokenIdQuantities[_tokenId],\\n            productDescription[crowdtainerId],\\n            numberOfProducts\\n        );\\n\\n        return metadataService.uri(metadata);\\n    }\\n\\n    /**************************************************************************\\n     * Internal/private methods\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     * @dev Tranfers are only allowed in `Delivery` or `Failed` states, but not e.g. during `Funding`.\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal view override {\\n        bool mintOrBurn = from == address(0) || to == address(0);\\n        if (mintOrBurn) return;\\n\\n        // Transfers are only allowed after funding either succeeded or failed.\\n        address crowdtainerAddress = crowdtainerIdToAddress(\\n            tokenIdToCrowdtainerId(tokenId)\\n        );\\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\\n\\n        if (\\n            crowdtainer.crowdtainerState() == CrowdtainerState.Funding ||\\n            crowdtainer.crowdtainerState() == CrowdtainerState.Uninitialized\\n        ) {\\n            revert Errors.TransferNotAllowed({\\n                crowdtainer: address(crowdtainer),\\n                state: crowdtainer.crowdtainerState()\\n            });\\n        }\\n    }\\n\\n    function tokenIdToCrowdtainerId(uint256 _tokenId)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (_tokenId == 0) {\\n            revert Errors.InvalidTokenId(_tokenId);\\n        }\\n\\n        return _tokenId / ID_MULTIPLE;\\n    }\\n\\n    function crowdtainerIdToAddress(uint256 _crowdtainerId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address crowdtainerAddress = crowdtainerForId[_crowdtainerId];\\n        if (crowdtainerAddress == address(0)) {\\n            revert Errors.CrowdtainerInexistent();\\n        }\\n        return crowdtainerAddress;\\n    }\\n\\n    function getClaimStatus(uint256 _tokenId) public view returns (bool) {\\n        return BitMaps.get(claimed, _tokenId);\\n    }\\n\\n    function setClaimStatus(uint256 _tokenId, bool _value) public {\\n        address crowdtainerAddress = crowdtainerIdToAddress(\\n            tokenIdToCrowdtainerId(_tokenId)\\n        );\\n\\n        ICrowdtainer crowdtainer = ICrowdtainer(crowdtainerAddress);\\n\\n        address shippingAgent = crowdtainer.shippingAgent();\\n\\n        if (msg.sender != shippingAgent) {\\n            revert Errors.SetClaimedOnlyAllowedByShippingAgent();\\n        }\\n\\n        BitMaps.setTo(claimed, _tokenId, _value);\\n    }\\n}\\n\",\"keccak256\":\"0x92f1dd25bf4bb98e89297d6ca21fbd5e255dda932fa095c0778c78312df108b5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004b1438038062004b14833981810160405281019062000037919062000277565b6040518060400160405280600b81526020017f566f7563686572733732310000000000000000000000000000000000000000008152506040518060400160405280600381526020017f56563100000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200015d565b508060019080519060200190620000d49291906200015d565b50505060016006819055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250503073ffffffffffffffffffffffffffffffffffffffff167fdd7bf9deccc329033ee50f9e925f9bf2a608eac8950906d19cb2ed39ec61cf3660405160405180910390a2506200030e565b8280546200016b90620002d8565b90600052602060002090601f0160209004810192826200018f5760008555620001db565b82601f10620001aa57805160ff1916838001178555620001db565b82800160010185558215620001db579182015b82811115620001da578251825591602001919060010190620001bd565b5b509050620001ea9190620001ee565b5090565b5b8082111562000209576000816000905550600101620001ef565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200023f8262000212565b9050919050565b620002518162000232565b81146200025d57600080fd5b50565b600081519050620002718162000246565b92915050565b60006020828403121562000290576200028f6200020d565b5b6000620002a08482850162000260565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002f157607f821691505b60208210811415620003085762000307620002a9565b5b50919050565b6080516147ea6200032a600039600061186701526147ea6000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063c87b56dd11610097578063cbe8071211610071578063cbe807121461053c578063db5a0e831461055a578063e985e9c51461058a578063f5599b2b146105ba576101a9565b8063c87b56dd146104be578063c91539bc146104ee578063ca6d45ca1461050c576101a9565b8063a22cb465116100d3578063a22cb4651461043a578063a3b9871a14610456578063b502234314610472578063b88d4fde146104a2576101a9565b806370a08231146103bc5780637169d23b146103ec57806395d89b411461041c576101a9565b8063351a41c511610166578063464eff5011610140578063464eff50146103105780636352211e1461034057806367dfd4c9146103705780636df0c83a1461038c576101a9565b8063351a41c51461029457806336dbd2f9146102c457806342842e0e146102f4576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c5780630b82a21c1461024857806323b872dd14610278575b600080fd5b6101c860048036038101906101c39190612c98565b6105eb565b6040516101d59190612ce0565b60405180910390f35b6101e66106cd565b6040516101f39190612d94565b60405180910390f35b61021660048036038101906102119190612dec565b61075f565b6040516102239190612e5a565b60405180910390f35b61024660048036038101906102419190612ea1565b6107e4565b005b610262600480360381019061025d9190612ee1565b6108fc565b60405161026f9190612f30565b60405180910390f35b610292600480360381019061028d9190612f4b565b610924565b005b6102ae60048036038101906102a99190612dec565b610984565b6040516102bb9190612e5a565b60405180910390f35b6102de60048036038101906102d99190612dec565b610a2d565b6040516102eb9190612ce0565b60405180910390f35b61030e60048036038101906103099190612f4b565b610a41565b005b61032a60048036038101906103259190612ff1565b610a61565b6040516103379190612f30565b60405180910390f35b61035a60048036038101906103559190612dec565b610c27565b6040516103679190612e5a565b60405180910390f35b61038a60048036038101906103859190612dec565b610cd9565b005b6103a660048036038101906103a19190613058565b610df8565b6040516103b39190612f30565b60405180910390f35b6103d660048036038101906103d19190613058565b610e10565b6040516103e39190612f30565b60405180910390f35b61040660048036038101906104019190612ee1565b610ec8565b6040516104139190612d94565b60405180910390f35b610424610f78565b6040516104319190612d94565b60405180910390f35b610454600480360381019061044f9190613085565b61100a565b005b610470600480360381019061046b91906130c5565b611020565b005b61048c60048036038101906104879190612dec565b611125565b6040516104999190612e5a565b60405180910390f35b6104bc60048036038101906104b7919061323a565b611158565b005b6104d860048036038101906104d39190612dec565b6111ba565b6040516104e59190612d94565b60405180910390f35b6104f66116c5565b6040516105039190612f30565b60405180910390f35b61052660048036038101906105219190612dec565b6116cc565b6040516105339190612e5a565b60405180910390f35b6105446116ff565b6040516105519190612f30565b60405180910390f35b610574600480360381019061056f9190612dec565b611705565b6040516105819190612f30565b60405180910390f35b6105a4600480360381019061059f91906132bd565b611762565b6040516105b19190612ce0565b60405180910390f35b6105d460048036038101906105cf9190613492565b6117f6565b6040516105e2929190613504565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106c657506106c582611a80565b5b9050919050565b6060600080546106dc9061355c565b80601f01602080910402602001604051908101604052809291908181526020018280546107089061355c565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b5050505050905090565b600061076a82611aea565b6107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090613600565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107ef82610c27565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790613692565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661087f611b56565b73ffffffffffffffffffffffffffffffffffffffff1614806108ae57506108ad816108a8611b56565b611762565b5b6108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490613724565b60405180910390fd5b6108f78383611b5e565b505050565b600d602052816000526040600020816004811061091857600080fd5b01600091509150505481565b61093561092f611b56565b82611c17565b610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b906137b6565b60405180910390fd5b61097f838383611cf5565b505050565b600080600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a24576040517fba3f1ed100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6000610a3a600783611f5c565b9050919050565b610a5c83838360405180602001604052806000815250611158565b505050565b600080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610ae1576040517fba3f1ed100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008690508073ffffffffffffffffffffffffffffffffffffffff1663464eff50338888886040518563ffffffff1660e01b8152600401610b2594939291906137e6565b600060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b5050505060006008600084815260200190815260200160002060008154610b799061385a565b9190508190559050620f42408110610bcd57620f4240886040517f1495c920000000000000000000000000000000000000000000000000000000008152600401610bc49291906138a3565b60405180910390fd5b60008184620f4240610bdf91906138cc565b610be99190613926565b905087600d6000838152602001908152602001600020906004610c0d929190612a76565b50610c183382611f98565b80945050505050949350505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc7906139ee565b60405180910390fd5b80915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610cf982610c27565b73ffffffffffffffffffffffffffffffffffffffff1614610d46576040517fc286e14500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d59610d5483611705565b610984565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663bedf77a6336040518263ffffffff1660e01b8152600401610d999190612e5a565b600060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b50505050600d60008481526020019081526020016000206000610dea9190612ab6565b610df383611fb6565b505050565b600b6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7890613a80565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600e6020528160005260406000208160048110610ee457600080fd5b01600091509150508054610ef79061355c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f239061355c565b8015610f705780601f10610f4557610100808354040283529160200191610f70565b820191906000526020600020905b815481529060010190602001808311610f5357829003601f168201915b505050505081565b606060018054610f879061355c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb39061355c565b80156110005780601f10610fd557610100808354040283529160200191611000565b820191906000526020600020905b815481529060010190602001808311610fe357829003601f168201915b5050505050905090565b61101c611015611b56565b83836120d3565b5050565b600061103361102e84611705565b610984565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663cf0840566040518163ffffffff1660e01b8152600401602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190613ab5565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611112576040517f3944c6d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61111e60078686612240565b5050505050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611169611163611b56565b83611c17565b6111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f906137b6565b60405180910390fd5b6111b484848484612265565b50505050565b606060006111c783611705565b905060006111d482610984565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663c66301b26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190613af7565b90506000600c600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16631e1b257360006040518263ffffffff1660e01b81526004016112cd9190613b69565b602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360016040518263ffffffff1660e01b815260040161134d9190613bbf565b602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360026040518263ffffffff1660e01b81526004016113cd9190613c15565b602060405180830381865afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360036040518263ffffffff1660e01b815260040161144d9190613c6b565b602060405180830381865afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190613af7565b81525090506000604051806101000160405280888152602001620f42406114b48c611705565b6114be91906138cc565b8b6114c99190613c86565b81526020016114d78b610c27565b73ffffffffffffffffffffffffffffffffffffffff1681526020016114fb8b610a2d565b15158152602001838152602001600d60008c8152602001908152602001600020600480602002604051908101604052809291908260048015611552576020028201915b81548152602001906001019080831161153e575b50505050508152602001600e60008a8152602001908152602001600020600480602002604051908101604052809291906000905b8282101561162957838201805461159c9061355c565b80601f01602080910402602001604051908101604052809291908181526020018280546115c89061355c565b80156116155780601f106115ea57610100808354040283529160200191611615565b820191906000526020600020905b8154815290600101906020018083116115f857829003601f168201915b505050505081526020019060010190611586565b5050505081526020018581525090508273ffffffffffffffffffffffffffffffffffffffff16639b9300f4826040518263ffffffff1660e01b81526004016116719190613f36565b600060405180830381865afa15801561168e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116b79190613fc8565b975050505050505050919050565b620f424081565b600c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60008082141561174c57816040517fed15e6cf0000000000000000000000000000000000000000000000000000000081526004016117439190612f30565b60405180910390fd5b620f42408261175b9190614040565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611860576040517f9ccb6ed000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061188b7f00000000000000000000000000000000000000000000000000000000000000006122c1565b90508073ffffffffffffffffffffffffffffffffffffffff1663bc6894fe30886040518363ffffffff1660e01b81526004016118c89291906141bd565b600060405180830381600087803b1580156118e257600080fd5b505af11580156118f6573d6000803e3d6000fd5b505050506009600081546119099061385a565b919050819055600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a6000600954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600e600060095481526020019081526020016000209060046119ca929190612ad2565b5083600c6000600954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f19d6f90297684f8b888bfdd40dece239ff62def4dd8aedd00245b6c846853b97600954604051611a679190612f30565b60405180910390a2806009549250925050935093915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bd183610c27565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c2282611aea565b611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5890614259565b60405180910390fd5b6000611c6c83610c27565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cdb57508373ffffffffffffffffffffffffffffffffffffffff16611cc38461075f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cec5750611ceb8185611762565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d1582610c27565b73ffffffffffffffffffffffffffffffffffffffff1614611d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d62906142eb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd29061437d565b60405180910390fd5b611de6838383612396565b611df1600082611b5e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e419190613c86565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e989190613926565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f57838383612614565b505050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b611fb2828260405180602001604052806000815250612619565b5050565b6000611fc182610c27565b9050611fcf81600084612396565b611fda600083611b5e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461202a9190613c86565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120cf81600084612614565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612139906143e9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122339190612ce0565b60405180910390a3505050565b8015612255576122508383612674565b612260565b61225f83836126b2565b5b505050565b612270848484611cf5565b61227c848484846126f1565b6122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b29061447b565b60405180910390fd5b50505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612388906144e7565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806123fe5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b9050801561240c575061260f565b600061241f61241a84611705565b610984565b905060008190506001600381111561243a57612439614507565b5b8173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a9919061455b565b60038111156124bb576124ba614507565b5b14806125595750600060038111156124d6576124d5614507565b5b8173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061455b565b600381111561255757612556614507565b5b145b1561260b57808173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ce919061455b565b6040517fe0bf90300000000000000000000000000000000000000000000000000000000081526004016126029291906145d0565b60405180910390fd5b5050505b505050565b505050565b6126238383612879565b61263060008484846126f1565b61266f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126669061447b565b60405180910390fd5b505050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b6000600882901c9050600060ff83166001901b905080198460000160008481526020019081526020016000206000828254169250508190555050505050565b60006127128473ffffffffffffffffffffffffffffffffffffffff16612a53565b1561286c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261273b611b56565b8786866040518563ffffffff1660e01b815260040161275d949392919061464e565b6020604051808303816000875af192505050801561279957506040513d601f19601f8201168201806040525081019061279691906146af565b60015b61281c573d80600081146127c9576040519150601f19603f3d011682016040523d82523d6000602084013e6127ce565b606091505b50600081511415612814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280b9061447b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612871565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e090614728565b60405180910390fd5b6128f281611aea565b15612932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292990614794565b60405180910390fd5b61293e60008383612396565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461298e9190613926565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612a4f60008383612614565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8260048101928215612aa5579160200282015b82811115612aa4578235825591602001919060010190612a89565b5b509050612ab29190612b25565b5090565b5060008155600101600081556001016000815560010160009055565b8260048101928215612b14579160200282015b82811115612b13578251829080519060200190612b03929190612b42565b5091602001919060010190612ae5565b5b509050612b219190612bc8565b5090565b5b80821115612b3e576000816000905550600101612b26565b5090565b828054612b4e9061355c565b90600052602060002090601f016020900481019282612b705760008555612bb7565b82601f10612b8957805160ff1916838001178555612bb7565b82800160010185558215612bb7579182015b82811115612bb6578251825591602001919060010190612b9b565b5b509050612bc49190612b25565b5090565b5b80821115612be85760008181612bdf9190612bec565b50600101612bc9565b5090565b508054612bf89061355c565b6000825580601f10612c0a5750612c29565b601f016020900490600052602060002090810190612c289190612b25565b5b50565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c7581612c40565b8114612c8057600080fd5b50565b600081359050612c9281612c6c565b92915050565b600060208284031215612cae57612cad612c36565b5b6000612cbc84828501612c83565b91505092915050565b60008115159050919050565b612cda81612cc5565b82525050565b6000602082019050612cf56000830184612cd1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612d35578082015181840152602081019050612d1a565b83811115612d44576000848401525b50505050565b6000601f19601f8301169050919050565b6000612d6682612cfb565b612d708185612d06565b9350612d80818560208601612d17565b612d8981612d4a565b840191505092915050565b60006020820190508181036000830152612dae8184612d5b565b905092915050565b6000819050919050565b612dc981612db6565b8114612dd457600080fd5b50565b600081359050612de681612dc0565b92915050565b600060208284031215612e0257612e01612c36565b5b6000612e1084828501612dd7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e4482612e19565b9050919050565b612e5481612e39565b82525050565b6000602082019050612e6f6000830184612e4b565b92915050565b612e7e81612e39565b8114612e8957600080fd5b50565b600081359050612e9b81612e75565b92915050565b60008060408385031215612eb857612eb7612c36565b5b6000612ec685828601612e8c565b9250506020612ed785828601612dd7565b9150509250929050565b60008060408385031215612ef857612ef7612c36565b5b6000612f0685828601612dd7565b9250506020612f1785828601612dd7565b9150509250929050565b612f2a81612db6565b82525050565b6000602082019050612f456000830184612f21565b92915050565b600080600060608486031215612f6457612f63612c36565b5b6000612f7286828701612e8c565b9350506020612f8386828701612e8c565b9250506040612f9486828701612dd7565b9150509250925092565b600080fd5b600081905082602060040282011115612fbf57612fbe612f9e565b5b92915050565b612fce81612cc5565b8114612fd957600080fd5b50565b600081359050612feb81612fc5565b92915050565b60008060008060e0858703121561300b5761300a612c36565b5b600061301987828801612e8c565b945050602061302a87828801612fa3565b93505060a061303b87828801612fdc565b92505060c061304c87828801612e8c565b91505092959194509250565b60006020828403121561306e5761306d612c36565b5b600061307c84828501612e8c565b91505092915050565b6000806040838503121561309c5761309b612c36565b5b60006130aa85828601612e8c565b92505060206130bb85828601612fdc565b9150509250929050565b600080604083850312156130dc576130db612c36565b5b60006130ea85828601612dd7565b92505060206130fb85828601612fdc565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61314782612d4a565b810181811067ffffffffffffffff821117156131665761316561310f565b5b80604052505050565b6000613179612c2c565b9050613185828261313e565b919050565b600067ffffffffffffffff8211156131a5576131a461310f565b5b6131ae82612d4a565b9050602081019050919050565b82818337600083830152505050565b60006131dd6131d88461318a565b61316f565b9050828152602081018484840111156131f9576131f861310a565b5b6132048482856131bb565b509392505050565b600082601f83011261322157613220613105565b5b81356132318482602086016131ca565b91505092915050565b6000806000806080858703121561325457613253612c36565b5b600061326287828801612e8c565b945050602061327387828801612e8c565b935050604061328487828801612dd7565b925050606085013567ffffffffffffffff8111156132a5576132a4612c3b565b5b6132b18782880161320c565b91505092959194509250565b600080604083850312156132d4576132d3612c36565b5b60006132e285828601612e8c565b92505060206132f385828601612e8c565b9150509250929050565b600080fd5b60006101808284031215613319576133186132fd565b5b81905092915050565b600067ffffffffffffffff82111561333d5761333c61310f565b5b602082029050919050565b600067ffffffffffffffff8211156133635761336261310f565b5b61336c82612d4a565b9050602081019050919050565b600061338c61338784613348565b61316f565b9050828152602081018484840111156133a8576133a761310a565b5b6133b38482856131bb565b509392505050565b600082601f8301126133d0576133cf613105565b5b81356133e0848260208601613379565b91505092915050565b60006133fc6133f784613322565b61316f565b9050806020840283018581111561341657613415612f9e565b5b835b8181101561345d57803567ffffffffffffffff81111561343b5761343a613105565b5b80860161344889826133bb565b85526020850194505050602081019050613418565b5050509392505050565b600082601f83011261347c5761347b613105565b5b60046134898482856133e9565b91505092915050565b60008060006101c084860312156134ac576134ab612c36565b5b60006134ba86828701613302565b93505061018084013567ffffffffffffffff8111156134dc576134db612c3b565b5b6134e886828701613467565b9250506101a06134fa86828701612e8c565b9150509250925092565b60006040820190506135196000830185612e4b565b6135266020830184612f21565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061357457607f821691505b602082108114156135885761358761352d565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006135ea602c83612d06565b91506135f58261358e565b604082019050919050565b60006020820190508181036000830152613619816135dd565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061367c602183612d06565b915061368782613620565b604082019050919050565b600060208201905081810360008301526136ab8161366f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061370e603883612d06565b9150613719826136b2565b604082019050919050565b6000602082019050818103600083015261373d81613701565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006137a0603183612d06565b91506137ab82613744565b604082019050919050565b600060208201905081810360008301526137cf81613793565b9050919050565b6137e2608083836131bb565b5050565b600060e0820190506137fb6000830187612e4b565b61380860208301866137d6565b61381560a0830185612cd1565b61382260c0830184612e4b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061386582612db6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138985761389761382b565b5b600182019050919050565b60006040820190506138b86000830185612f21565b6138c56020830184612e4b565b9392505050565b60006138d782612db6565b91506138e283612db6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561391b5761391a61382b565b5b828202905092915050565b600061393182612db6565b915061393c83612db6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139715761397061382b565b5b828201905092915050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006139d8602983612d06565b91506139e38261397c565b604082019050919050565b60006020820190508181036000830152613a07816139cb565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613a6a602a83612d06565b9150613a7582613a0e565b604082019050919050565b60006020820190508181036000830152613a9981613a5d565b9050919050565b600081519050613aaf81612e75565b92915050565b600060208284031215613acb57613aca612c36565b5b6000613ad984828501613aa0565b91505092915050565b600081519050613af181612dc0565b92915050565b600060208284031215613b0d57613b0c612c36565b5b6000613b1b84828501613ae2565b91505092915050565b6000819050919050565b6000819050919050565b6000613b53613b4e613b4984613b24565b613b2e565b612db6565b9050919050565b613b6381613b38565b82525050565b6000602082019050613b7e6000830184613b5a565b92915050565b6000819050919050565b6000613ba9613ba4613b9f84613b84565b613b2e565b612db6565b9050919050565b613bb981613b8e565b82525050565b6000602082019050613bd46000830184613bb0565b92915050565b6000819050919050565b6000613bff613bfa613bf584613bda565b613b2e565b612db6565b9050919050565b613c0f81613be4565b82525050565b6000602082019050613c2a6000830184613c06565b92915050565b6000819050919050565b6000613c55613c50613c4b84613c30565b613b2e565b612db6565b9050919050565b613c6581613c3a565b82525050565b6000602082019050613c806000830184613c5c565b92915050565b6000613c9182612db6565b9150613c9c83612db6565b925082821015613caf57613cae61382b565b5b828203905092915050565b613cc381612db6565b82525050565b613cd281612e39565b82525050565b613ce181612cc5565b82525050565b600060049050919050565b600081905092915050565b6000819050919050565b6000613d138383613cba565b60208301905092915050565b6000602082019050919050565b613d3581613ce7565b613d3f8184613cf2565b9250613d4a82613cfd565b8060005b83811015613d7b578151613d628782613d07565b9650613d6d83613d1f565b925050600181019050613d4e565b505050505050565b600060049050919050565b600081905092915050565b6000819050919050565b600082825260208201905092915050565b6000613dbf82612cfb565b613dc98185613da3565b9350613dd9818560208601612d17565b613de281612d4a565b840191505092915050565b6000613df98383613db4565b905092915050565b6000602082019050919050565b6000613e1982613d83565b613e238185613d8e565b935083602082028501613e3585613d99565b8060005b85811015613e715784840389528151613e528582613ded565b9450613e5d83613e01565b925060208a01995050600181019050613e39565b50829750879550505050505092915050565b60006101c083016000830151613e9c6000860182613cba565b506020830151613eaf6020860182613cba565b506040830151613ec26040860182613cc9565b506060830151613ed56060860182613cd8565b506080830151613ee86080860182613d2c565b5060a0830151613efc610100860182613d2c565b5060c0830151848203610180860152613f158282613e0e565b91505060e0830151613f2b6101a0860182613cba565b508091505092915050565b60006020820190508181036000830152613f508184613e83565b905092915050565b6000613f6b613f6684613348565b61316f565b905082815260208101848484011115613f8757613f8661310a565b5b613f92848285612d17565b509392505050565b600082601f830112613faf57613fae613105565b5b8151613fbf848260208601613f58565b91505092915050565b600060208284031215613fde57613fdd612c36565b5b600082015167ffffffffffffffff811115613ffc57613ffb612c3b565b5b61400884828501613f9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061404b82612db6565b915061405683612db6565b92508261406657614065614011565b5b828204905092915050565b60006140806020840184612e8c565b905092915050565b60006140976020840184612dd7565b905092915050565b600082905092915050565b6140b6608083836131bb565b5050565b61018082016140cc6000830183614071565b6140d96000850182613cc9565b506140e76020830183614088565b6140f46020850182613cba565b506141026040830183614088565b61410f6040850182613cba565b5061411d6060830183614088565b61412a6060850182613cba565b506141386080830183614088565b6141456080850182613cba565b5061415360a083018361409f565b61416060a08501826140aa565b5061416f610120830183614088565b61417d610120850182613cba565b5061418c610140830183614088565b61419a610140850182613cba565b506141a9610160830183614071565b6141b7610160850182613cc9565b50505050565b60006101a0820190506141d36000830185612e4b565b6141e060208301846140ba565b9392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614243602c83612d06565b915061424e826141e7565b604082019050919050565b6000602082019050818103600083015261427281614236565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006142d5602583612d06565b91506142e082614279565b604082019050919050565b60006020820190508181036000830152614304816142c8565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614367602483612d06565b91506143728261430b565b604082019050919050565b600060208201905081810360008301526143968161435a565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006143d3601983612d06565b91506143de8261439d565b602082019050919050565b60006020820190508181036000830152614402816143c6565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614465603283612d06565b915061447082614409565b604082019050919050565b6000602082019050818103600083015261449481614458565b9050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006144d1601683612d06565b91506144dc8261449b565b602082019050919050565b60006020820190508181036000830152614500816144c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061454357600080fd5b50565b60008151905061455581614536565b92915050565b60006020828403121561457157614570612c36565b5b600061457f84828501614546565b91505092915050565b6004811061459957614598614507565b5b50565b60008190506145aa82614588565b919050565b60006145ba8261459c565b9050919050565b6145ca816145af565b82525050565b60006040820190506145e56000830185612e4b565b6145f260208301846145c1565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000614620826145f9565b61462a8185614604565b935061463a818560208601612d17565b61464381612d4a565b840191505092915050565b60006080820190506146636000830187612e4b565b6146706020830186612e4b565b61467d6040830185612f21565b818103606083015261468f8184614615565b905095945050505050565b6000815190506146a981612c6c565b92915050565b6000602082840312156146c5576146c4612c36565b5b60006146d38482850161469a565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614712602083612d06565b915061471d826146dc565b602082019050919050565b6000602082019050818103600083015261474181614705565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061477e601c83612d06565b915061478982614748565b602082019050919050565b600060208201905081810360008301526147ad81614771565b905091905056fea26469706673582212209b225e666c63b69105a5541940faac051cae9becd5d62437bf19d921dfb83e2d64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063c87b56dd11610097578063cbe8071211610071578063cbe807121461053c578063db5a0e831461055a578063e985e9c51461058a578063f5599b2b146105ba576101a9565b8063c87b56dd146104be578063c91539bc146104ee578063ca6d45ca1461050c576101a9565b8063a22cb465116100d3578063a22cb4651461043a578063a3b9871a14610456578063b502234314610472578063b88d4fde146104a2576101a9565b806370a08231146103bc5780637169d23b146103ec57806395d89b411461041c576101a9565b8063351a41c511610166578063464eff5011610140578063464eff50146103105780636352211e1461034057806367dfd4c9146103705780636df0c83a1461038c576101a9565b8063351a41c51461029457806336dbd2f9146102c457806342842e0e146102f4576101a9565b806301ffc9a7146101ae57806306fdde03146101de578063081812fc146101fc578063095ea7b31461022c5780630b82a21c1461024857806323b872dd14610278575b600080fd5b6101c860048036038101906101c39190612c98565b6105eb565b6040516101d59190612ce0565b60405180910390f35b6101e66106cd565b6040516101f39190612d94565b60405180910390f35b61021660048036038101906102119190612dec565b61075f565b6040516102239190612e5a565b60405180910390f35b61024660048036038101906102419190612ea1565b6107e4565b005b610262600480360381019061025d9190612ee1565b6108fc565b60405161026f9190612f30565b60405180910390f35b610292600480360381019061028d9190612f4b565b610924565b005b6102ae60048036038101906102a99190612dec565b610984565b6040516102bb9190612e5a565b60405180910390f35b6102de60048036038101906102d99190612dec565b610a2d565b6040516102eb9190612ce0565b60405180910390f35b61030e60048036038101906103099190612f4b565b610a41565b005b61032a60048036038101906103259190612ff1565b610a61565b6040516103379190612f30565b60405180910390f35b61035a60048036038101906103559190612dec565b610c27565b6040516103679190612e5a565b60405180910390f35b61038a60048036038101906103859190612dec565b610cd9565b005b6103a660048036038101906103a19190613058565b610df8565b6040516103b39190612f30565b60405180910390f35b6103d660048036038101906103d19190613058565b610e10565b6040516103e39190612f30565b60405180910390f35b61040660048036038101906104019190612ee1565b610ec8565b6040516104139190612d94565b60405180910390f35b610424610f78565b6040516104319190612d94565b60405180910390f35b610454600480360381019061044f9190613085565b61100a565b005b610470600480360381019061046b91906130c5565b611020565b005b61048c60048036038101906104879190612dec565b611125565b6040516104999190612e5a565b60405180910390f35b6104bc60048036038101906104b7919061323a565b611158565b005b6104d860048036038101906104d39190612dec565b6111ba565b6040516104e59190612d94565b60405180910390f35b6104f66116c5565b6040516105039190612f30565b60405180910390f35b61052660048036038101906105219190612dec565b6116cc565b6040516105339190612e5a565b60405180910390f35b6105446116ff565b6040516105519190612f30565b60405180910390f35b610574600480360381019061056f9190612dec565b611705565b6040516105819190612f30565b60405180910390f35b6105a4600480360381019061059f91906132bd565b611762565b6040516105b19190612ce0565b60405180910390f35b6105d460048036038101906105cf9190613492565b6117f6565b6040516105e2929190613504565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106b657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106c657506106c582611a80565b5b9050919050565b6060600080546106dc9061355c565b80601f01602080910402602001604051908101604052809291908181526020018280546107089061355c565b80156107555780601f1061072a57610100808354040283529160200191610755565b820191906000526020600020905b81548152906001019060200180831161073857829003601f168201915b5050505050905090565b600061076a82611aea565b6107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090613600565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107ef82610c27565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610860576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085790613692565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661087f611b56565b73ffffffffffffffffffffffffffffffffffffffff1614806108ae57506108ad816108a8611b56565b611762565b5b6108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490613724565b60405180910390fd5b6108f78383611b5e565b505050565b600d602052816000526040600020816004811061091857600080fd5b01600091509150505481565b61093561092f611b56565b82611c17565b610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b906137b6565b60405180910390fd5b61097f838383611cf5565b505050565b600080600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a24576040517fba3f1ed100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6000610a3a600783611f5c565b9050919050565b610a5c83838360405180602001604052806000815250611158565b505050565b600080600b60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610ae1576040517fba3f1ed100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008690508073ffffffffffffffffffffffffffffffffffffffff1663464eff50338888886040518563ffffffff1660e01b8152600401610b2594939291906137e6565b600060405180830381600087803b158015610b3f57600080fd5b505af1158015610b53573d6000803e3d6000fd5b5050505060006008600084815260200190815260200160002060008154610b799061385a565b9190508190559050620f42408110610bcd57620f4240886040517f1495c920000000000000000000000000000000000000000000000000000000008152600401610bc49291906138a3565b60405180910390fd5b60008184620f4240610bdf91906138cc565b610be99190613926565b905087600d6000838152602001908152602001600020906004610c0d929190612a76565b50610c183382611f98565b80945050505050949350505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc7906139ee565b60405180910390fd5b80915050919050565b3373ffffffffffffffffffffffffffffffffffffffff16610cf982610c27565b73ffffffffffffffffffffffffffffffffffffffff1614610d46576040517fc286e14500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d59610d5483611705565b610984565b905060008190508073ffffffffffffffffffffffffffffffffffffffff1663bedf77a6336040518263ffffffff1660e01b8152600401610d999190612e5a565b600060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b50505050600d60008481526020019081526020016000206000610dea9190612ab6565b610df383611fb6565b505050565b600b6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7890613a80565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600e6020528160005260406000208160048110610ee457600080fd5b01600091509150508054610ef79061355c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f239061355c565b8015610f705780601f10610f4557610100808354040283529160200191610f70565b820191906000526020600020905b815481529060010190602001808311610f5357829003601f168201915b505050505081565b606060018054610f879061355c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb39061355c565b80156110005780601f10610fd557610100808354040283529160200191611000565b820191906000526020600020905b815481529060010190602001808311610fe357829003601f168201915b5050505050905090565b61101c611015611b56565b83836120d3565b5050565b600061103361102e84611705565b610984565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663cf0840566040518163ffffffff1660e01b8152600401602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190613ab5565b90508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611112576040517f3944c6d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61111e60078686612240565b5050505050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611169611163611b56565b83611c17565b6111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f906137b6565b60405180910390fd5b6111b484848484612265565b50505050565b606060006111c783611705565b905060006111d482610984565b9050600081905060008173ffffffffffffffffffffffffffffffffffffffff1663c66301b26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124c9190613af7565b90506000600c600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16631e1b257360006040518263ffffffff1660e01b81526004016112cd9190613b69565b602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360016040518263ffffffff1660e01b815260040161134d9190613bbf565b602060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360026040518263ffffffff1660e01b81526004016113cd9190613c15565b602060405180830381865afa1580156113ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140e9190613af7565b81526020018573ffffffffffffffffffffffffffffffffffffffff16631e1b257360036040518263ffffffff1660e01b815260040161144d9190613c6b565b602060405180830381865afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190613af7565b81525090506000604051806101000160405280888152602001620f42406114b48c611705565b6114be91906138cc565b8b6114c99190613c86565b81526020016114d78b610c27565b73ffffffffffffffffffffffffffffffffffffffff1681526020016114fb8b610a2d565b15158152602001838152602001600d60008c8152602001908152602001600020600480602002604051908101604052809291908260048015611552576020028201915b81548152602001906001019080831161153e575b50505050508152602001600e60008a8152602001908152602001600020600480602002604051908101604052809291906000905b8282101561162957838201805461159c9061355c565b80601f01602080910402602001604051908101604052809291908181526020018280546115c89061355c565b80156116155780601f106115ea57610100808354040283529160200191611615565b820191906000526020600020905b8154815290600101906020018083116115f857829003601f168201915b505050505081526020019060010190611586565b5050505081526020018581525090508273ffffffffffffffffffffffffffffffffffffffff16639b9300f4826040518263ffffffff1660e01b81526004016116719190613f36565b600060405180830381865afa15801561168e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906116b79190613fc8565b975050505050505050919050565b620f424081565b600c6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b60008082141561174c57816040517fed15e6cf0000000000000000000000000000000000000000000000000000000081526004016117439190612f30565b60405180910390fd5b620f42408261175b9190614040565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611860576040517f9ccb6ed000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061188b7f00000000000000000000000000000000000000000000000000000000000000006122c1565b90508073ffffffffffffffffffffffffffffffffffffffff1663bc6894fe30886040518363ffffffff1660e01b81526004016118c89291906141bd565b600060405180830381600087803b1580156118e257600080fd5b505af11580156118f6573d6000803e3d6000fd5b505050506009600081546119099061385a565b919050819055600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a6000600954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600e600060095481526020019081526020016000209060046119ca929190612ad2565b5083600c6000600954815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f19d6f90297684f8b888bfdd40dece239ff62def4dd8aedd00245b6c846853b97600954604051611a679190612f30565b60405180910390a2806009549250925050935093915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611bd183610c27565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c2282611aea565b611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5890614259565b60405180910390fd5b6000611c6c83610c27565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cdb57508373ffffffffffffffffffffffffffffffffffffffff16611cc38461075f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611cec5750611ceb8185611762565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d1582610c27565b73ffffffffffffffffffffffffffffffffffffffff1614611d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d62906142eb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd29061437d565b60405180910390fd5b611de6838383612396565b611df1600082611b5e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e419190613c86565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e989190613926565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f57838383612614565b505050565b600080600883901c9050600060ff84166001901b9050600081866000016000858152602001908152602001600020541614159250505092915050565b611fb2828260405180602001604052806000815250612619565b5050565b6000611fc182610c27565b9050611fcf81600084612396565b611fda600083611b5e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461202a9190613c86565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120cf81600084612614565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612142576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612139906143e9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122339190612ce0565b60405180910390a3505050565b8015612255576122508383612674565b612260565b61225f83836126b2565b5b505050565b612270848484611cf5565b61227c848484846126f1565b6122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b29061447b565b60405180910390fd5b50505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612388906144e7565b60405180910390fd5b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806123fe5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b9050801561240c575061260f565b600061241f61241a84611705565b610984565b905060008190506001600381111561243a57612439614507565b5b8173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a9919061455b565b60038111156124bb576124ba614507565b5b14806125595750600060038111156124d6576124d5614507565b5b8173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612545919061455b565b600381111561255757612556614507565b5b145b1561260b57808173ffffffffffffffffffffffffffffffffffffffff16637855d30c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ce919061455b565b6040517fe0bf90300000000000000000000000000000000000000000000000000000000081526004016126029291906145d0565b60405180910390fd5b5050505b505050565b505050565b6126238383612879565b61263060008484846126f1565b61266f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126669061447b565b60405180910390fd5b505050565b6000600882901c9050600060ff83166001901b9050808460000160008481526020019081526020016000206000828254179250508190555050505050565b6000600882901c9050600060ff83166001901b905080198460000160008481526020019081526020016000206000828254169250508190555050505050565b60006127128473ffffffffffffffffffffffffffffffffffffffff16612a53565b1561286c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261273b611b56565b8786866040518563ffffffff1660e01b815260040161275d949392919061464e565b6020604051808303816000875af192505050801561279957506040513d601f19601f8201168201806040525081019061279691906146af565b60015b61281c573d80600081146127c9576040519150601f19603f3d011682016040523d82523d6000602084013e6127ce565b606091505b50600081511415612814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161280b9061447b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612871565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e090614728565b60405180910390fd5b6128f281611aea565b15612932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292990614794565b60405180910390fd5b61293e60008383612396565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461298e9190613926565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612a4f60008383612614565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8260048101928215612aa5579160200282015b82811115612aa4578235825591602001919060010190612a89565b5b509050612ab29190612b25565b5090565b5060008155600101600081556001016000815560010160009055565b8260048101928215612b14579160200282015b82811115612b13578251829080519060200190612b03929190612b42565b5091602001919060010190612ae5565b5b509050612b219190612bc8565b5090565b5b80821115612b3e576000816000905550600101612b26565b5090565b828054612b4e9061355c565b90600052602060002090601f016020900481019282612b705760008555612bb7565b82601f10612b8957805160ff1916838001178555612bb7565b82800160010185558215612bb7579182015b82811115612bb6578251825591602001919060010190612b9b565b5b509050612bc49190612b25565b5090565b5b80821115612be85760008181612bdf9190612bec565b50600101612bc9565b5090565b508054612bf89061355c565b6000825580601f10612c0a5750612c29565b601f016020900490600052602060002090810190612c289190612b25565b5b50565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612c7581612c40565b8114612c8057600080fd5b50565b600081359050612c9281612c6c565b92915050565b600060208284031215612cae57612cad612c36565b5b6000612cbc84828501612c83565b91505092915050565b60008115159050919050565b612cda81612cc5565b82525050565b6000602082019050612cf56000830184612cd1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612d35578082015181840152602081019050612d1a565b83811115612d44576000848401525b50505050565b6000601f19601f8301169050919050565b6000612d6682612cfb565b612d708185612d06565b9350612d80818560208601612d17565b612d8981612d4a565b840191505092915050565b60006020820190508181036000830152612dae8184612d5b565b905092915050565b6000819050919050565b612dc981612db6565b8114612dd457600080fd5b50565b600081359050612de681612dc0565b92915050565b600060208284031215612e0257612e01612c36565b5b6000612e1084828501612dd7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612e4482612e19565b9050919050565b612e5481612e39565b82525050565b6000602082019050612e6f6000830184612e4b565b92915050565b612e7e81612e39565b8114612e8957600080fd5b50565b600081359050612e9b81612e75565b92915050565b60008060408385031215612eb857612eb7612c36565b5b6000612ec685828601612e8c565b9250506020612ed785828601612dd7565b9150509250929050565b60008060408385031215612ef857612ef7612c36565b5b6000612f0685828601612dd7565b9250506020612f1785828601612dd7565b9150509250929050565b612f2a81612db6565b82525050565b6000602082019050612f456000830184612f21565b92915050565b600080600060608486031215612f6457612f63612c36565b5b6000612f7286828701612e8c565b9350506020612f8386828701612e8c565b9250506040612f9486828701612dd7565b9150509250925092565b600080fd5b600081905082602060040282011115612fbf57612fbe612f9e565b5b92915050565b612fce81612cc5565b8114612fd957600080fd5b50565b600081359050612feb81612fc5565b92915050565b60008060008060e0858703121561300b5761300a612c36565b5b600061301987828801612e8c565b945050602061302a87828801612fa3565b93505060a061303b87828801612fdc565b92505060c061304c87828801612e8c565b91505092959194509250565b60006020828403121561306e5761306d612c36565b5b600061307c84828501612e8c565b91505092915050565b6000806040838503121561309c5761309b612c36565b5b60006130aa85828601612e8c565b92505060206130bb85828601612fdc565b9150509250929050565b600080604083850312156130dc576130db612c36565b5b60006130ea85828601612dd7565b92505060206130fb85828601612fdc565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61314782612d4a565b810181811067ffffffffffffffff821117156131665761316561310f565b5b80604052505050565b6000613179612c2c565b9050613185828261313e565b919050565b600067ffffffffffffffff8211156131a5576131a461310f565b5b6131ae82612d4a565b9050602081019050919050565b82818337600083830152505050565b60006131dd6131d88461318a565b61316f565b9050828152602081018484840111156131f9576131f861310a565b5b6132048482856131bb565b509392505050565b600082601f83011261322157613220613105565b5b81356132318482602086016131ca565b91505092915050565b6000806000806080858703121561325457613253612c36565b5b600061326287828801612e8c565b945050602061327387828801612e8c565b935050604061328487828801612dd7565b925050606085013567ffffffffffffffff8111156132a5576132a4612c3b565b5b6132b18782880161320c565b91505092959194509250565b600080604083850312156132d4576132d3612c36565b5b60006132e285828601612e8c565b92505060206132f385828601612e8c565b9150509250929050565b600080fd5b60006101808284031215613319576133186132fd565b5b81905092915050565b600067ffffffffffffffff82111561333d5761333c61310f565b5b602082029050919050565b600067ffffffffffffffff8211156133635761336261310f565b5b61336c82612d4a565b9050602081019050919050565b600061338c61338784613348565b61316f565b9050828152602081018484840111156133a8576133a761310a565b5b6133b38482856131bb565b509392505050565b600082601f8301126133d0576133cf613105565b5b81356133e0848260208601613379565b91505092915050565b60006133fc6133f784613322565b61316f565b9050806020840283018581111561341657613415612f9e565b5b835b8181101561345d57803567ffffffffffffffff81111561343b5761343a613105565b5b80860161344889826133bb565b85526020850194505050602081019050613418565b5050509392505050565b600082601f83011261347c5761347b613105565b5b60046134898482856133e9565b91505092915050565b60008060006101c084860312156134ac576134ab612c36565b5b60006134ba86828701613302565b93505061018084013567ffffffffffffffff8111156134dc576134db612c3b565b5b6134e886828701613467565b9250506101a06134fa86828701612e8c565b9150509250925092565b60006040820190506135196000830185612e4b565b6135266020830184612f21565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061357457607f821691505b602082108114156135885761358761352d565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006135ea602c83612d06565b91506135f58261358e565b604082019050919050565b60006020820190508181036000830152613619816135dd565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061367c602183612d06565b915061368782613620565b604082019050919050565b600060208201905081810360008301526136ab8161366f565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b600061370e603883612d06565b9150613719826136b2565b604082019050919050565b6000602082019050818103600083015261373d81613701565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006137a0603183612d06565b91506137ab82613744565b604082019050919050565b600060208201905081810360008301526137cf81613793565b9050919050565b6137e2608083836131bb565b5050565b600060e0820190506137fb6000830187612e4b565b61380860208301866137d6565b61381560a0830185612cd1565b61382260c0830184612e4b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061386582612db6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156138985761389761382b565b5b600182019050919050565b60006040820190506138b86000830185612f21565b6138c56020830184612e4b565b9392505050565b60006138d782612db6565b91506138e283612db6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561391b5761391a61382b565b5b828202905092915050565b600061393182612db6565b915061393c83612db6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139715761397061382b565b5b828201905092915050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006139d8602983612d06565b91506139e38261397c565b604082019050919050565b60006020820190508181036000830152613a07816139cb565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613a6a602a83612d06565b9150613a7582613a0e565b604082019050919050565b60006020820190508181036000830152613a9981613a5d565b9050919050565b600081519050613aaf81612e75565b92915050565b600060208284031215613acb57613aca612c36565b5b6000613ad984828501613aa0565b91505092915050565b600081519050613af181612dc0565b92915050565b600060208284031215613b0d57613b0c612c36565b5b6000613b1b84828501613ae2565b91505092915050565b6000819050919050565b6000819050919050565b6000613b53613b4e613b4984613b24565b613b2e565b612db6565b9050919050565b613b6381613b38565b82525050565b6000602082019050613b7e6000830184613b5a565b92915050565b6000819050919050565b6000613ba9613ba4613b9f84613b84565b613b2e565b612db6565b9050919050565b613bb981613b8e565b82525050565b6000602082019050613bd46000830184613bb0565b92915050565b6000819050919050565b6000613bff613bfa613bf584613bda565b613b2e565b612db6565b9050919050565b613c0f81613be4565b82525050565b6000602082019050613c2a6000830184613c06565b92915050565b6000819050919050565b6000613c55613c50613c4b84613c30565b613b2e565b612db6565b9050919050565b613c6581613c3a565b82525050565b6000602082019050613c806000830184613c5c565b92915050565b6000613c9182612db6565b9150613c9c83612db6565b925082821015613caf57613cae61382b565b5b828203905092915050565b613cc381612db6565b82525050565b613cd281612e39565b82525050565b613ce181612cc5565b82525050565b600060049050919050565b600081905092915050565b6000819050919050565b6000613d138383613cba565b60208301905092915050565b6000602082019050919050565b613d3581613ce7565b613d3f8184613cf2565b9250613d4a82613cfd565b8060005b83811015613d7b578151613d628782613d07565b9650613d6d83613d1f565b925050600181019050613d4e565b505050505050565b600060049050919050565b600081905092915050565b6000819050919050565b600082825260208201905092915050565b6000613dbf82612cfb565b613dc98185613da3565b9350613dd9818560208601612d17565b613de281612d4a565b840191505092915050565b6000613df98383613db4565b905092915050565b6000602082019050919050565b6000613e1982613d83565b613e238185613d8e565b935083602082028501613e3585613d99565b8060005b85811015613e715784840389528151613e528582613ded565b9450613e5d83613e01565b925060208a01995050600181019050613e39565b50829750879550505050505092915050565b60006101c083016000830151613e9c6000860182613cba565b506020830151613eaf6020860182613cba565b506040830151613ec26040860182613cc9565b506060830151613ed56060860182613cd8565b506080830151613ee86080860182613d2c565b5060a0830151613efc610100860182613d2c565b5060c0830151848203610180860152613f158282613e0e565b91505060e0830151613f2b6101a0860182613cba565b508091505092915050565b60006020820190508181036000830152613f508184613e83565b905092915050565b6000613f6b613f6684613348565b61316f565b905082815260208101848484011115613f8757613f8661310a565b5b613f92848285612d17565b509392505050565b600082601f830112613faf57613fae613105565b5b8151613fbf848260208601613f58565b91505092915050565b600060208284031215613fde57613fdd612c36565b5b600082015167ffffffffffffffff811115613ffc57613ffb612c3b565b5b61400884828501613f9a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061404b82612db6565b915061405683612db6565b92508261406657614065614011565b5b828204905092915050565b60006140806020840184612e8c565b905092915050565b60006140976020840184612dd7565b905092915050565b600082905092915050565b6140b6608083836131bb565b5050565b61018082016140cc6000830183614071565b6140d96000850182613cc9565b506140e76020830183614088565b6140f46020850182613cba565b506141026040830183614088565b61410f6040850182613cba565b5061411d6060830183614088565b61412a6060850182613cba565b506141386080830183614088565b6141456080850182613cba565b5061415360a083018361409f565b61416060a08501826140aa565b5061416f610120830183614088565b61417d610120850182613cba565b5061418c610140830183614088565b61419a610140850182613cba565b506141a9610160830183614071565b6141b7610160850182613cc9565b50505050565b60006101a0820190506141d36000830185612e4b565b6141e060208301846140ba565b9392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614243602c83612d06565b915061424e826141e7565b604082019050919050565b6000602082019050818103600083015261427281614236565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006142d5602583612d06565b91506142e082614279565b604082019050919050565b60006020820190508181036000830152614304816142c8565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614367602483612d06565b91506143728261430b565b604082019050919050565b600060208201905081810360008301526143968161435a565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006143d3601983612d06565b91506143de8261439d565b602082019050919050565b60006020820190508181036000830152614402816143c6565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614465603283612d06565b915061447082614409565b604082019050919050565b6000602082019050818103600083015261449481614458565b9050919050565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b60006144d1601683612d06565b91506144dc8261449b565b602082019050919050565b60006020820190508181036000830152614500816144c4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6004811061454357600080fd5b50565b60008151905061455581614536565b92915050565b60006020828403121561457157614570612c36565b5b600061457f84828501614546565b91505092915050565b6004811061459957614598614507565b5b50565b60008190506145aa82614588565b919050565b60006145ba8261459c565b9050919050565b6145ca816145af565b82525050565b60006040820190506145e56000830185612e4b565b6145f260208301846145c1565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000614620826145f9565b61462a8185614604565b935061463a818560208601612d17565b61464381612d4a565b840191505092915050565b60006080820190506146636000830187612e4b565b6146706020830186612e4b565b61467d6040830185612f21565b818103606083015261468f8184614615565b905095945050505050565b6000815190506146a981612c6c565b92915050565b6000602082840312156146c5576146c4612c36565b5b60006146d38482850161469a565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614712602083612d06565b915061471d826146dc565b602082019050919050565b6000602082019050818103600083015261474181614705565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061477e601c83612d06565b915061478982614748565b602082019050919050565b600060208201905081810360008301526147ad81614771565b905091905056fea26469706673582212209b225e666c63b69105a5541940faac051cae9becd5d62437bf19d921dfb83e2d64736f6c634300080b0033",
  "devdoc": {
    "details": "Essentially, a Crowdtainer factory with ERC721 compliance.Each token id represents a \"sold voucher\", a set of one or more products or services of a specific Crowdtainer.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "createCrowdtainer((address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,address),string[4],address)": {
        "details": "Create and deploy a new Crowdtainer.",
        "params": {
          "_campaignData": "Data defining all rules and values of this Crowdtainer instance.",
          "_metadataService": "Contract address used to fetch metadata about the token.",
          "_productDescription": "An array with the description of each item."
        },
        "returns": {
          "_0": "crowdtainerId The identifier for the created Crowdtainer."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "params": {
          "_tokenId": "The encoded voucher token id."
        },
        "returns": {
          "_0": "Token URI String."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "Manages multiple Crowdtainer projects and ownership of its product/services by participants.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "tokenURI(uint256)": {
        "notice": "Get the metadata representation."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 524,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 526,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 530,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 534,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 538,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 544,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 167,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4186,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "claimed",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(BitMap)2136_storage"
      },
      {
        "astId": 4190,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "nextTokenIdForCrowdtainer",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4192,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "crowdtainerCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4198,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "crowdtainerForId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4202,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "idForCrowdtainer",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4206,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "metadataServiceForCrowdatinerId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 4212,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "tokenIdQuantities",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_array(t_uint256)4_storage)"
      },
      {
        "astId": 4218,
        "contract": "src/contracts/Vouchers721.sol:Vouchers721",
        "label": "productDescription",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)4_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)4_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[4])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)4_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)4_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[4])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)4_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)2136_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 2135,
            "contract": "src/contracts/Vouchers721.sol:Vouchers721",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}