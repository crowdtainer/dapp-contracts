{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "CallerNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotLeaveDueAccumulatedReferralCredits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CantClaimFundsOnActiveProject",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClosingTimeTooEarly",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiredTime",
          "type": "uint256"
        }
      ],
      "name": "CrowdtainerExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "ExceededNumberOfItemsAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaximumTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMinimumTarget",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "enum CrowdtainerState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "InvalidOperationFor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "InvalidReferralRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        }
      ],
      "name": "MinimumPurchaseValueForReferralNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MinimumTargetHigherThanMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "MinimumTargetNotReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openingTime",
          "type": "uint256"
        }
      ],
      "name": "OpeningTimeNotReachedYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "PurchaseExceedsMaximumTarget",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReferralDisabledForProvidedCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReferralInexistent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximum",
          "type": "uint256"
        }
      ],
      "name": "ReferralMinimumValueTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReferralRateNotMultipleOfTwo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShippingAgentAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAddressIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyJoined",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "shippingAgent",
          "type": "address"
        }
      ],
      "name": "CrowdtainerCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "shippingAgent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValueRaised",
          "type": "uint256"
        }
      ],
      "name": "CrowdtainerInDeliveryStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_openingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_expireTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_targetMinimum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_targetMaximum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "_unitPricePerType",
          "type": "uint256[4]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_referralRate",
          "type": "uint256"
        }
      ],
      "name": "CrowdtainerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[4]",
          "name": "quantities",
          "type": "uint256[4]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalCost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appliedDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "referralEnabled",
          "type": "bool"
        }
      ],
      "name": "Joined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "Left",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "abortProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedRewardsOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crowdtainerState",
      "outputs": [
        {
          "internalType": "enum CrowdtainerState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "discountForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expireTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaidAndDeliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "shippingAgent",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "openingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expireTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "targetMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint256[4]",
              "name": "unitPricePerType",
              "type": "uint256[4]"
            },
            {
              "internalType": "uint256",
              "name": "referralRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralEligibilityValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct CampaignData",
          "name": "_campaignData",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "invariant",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256[4]",
          "name": "_quantities",
          "type": "uint256[4]"
        },
        {
          "internalType": "bool",
          "name": "_enableReferral",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "join",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "leave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralEligibilityValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerOfReferee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shippingAgent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetMaximum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetMinimum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueRaised",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unitPricePerType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf13fa376d6e9d863f75116be5bbebd366751de63b053174575d3efb3a23af872",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3682397",
    "logsBloom": "0x
    "blockHash": "0x1439b36c3962333fe08571aa8f04884bdea011e4c2187abb9531163648ede6d4",
    "transactionHash": "0xf13fa376d6e9d863f75116be5bbebd366751de63b053174575d3efb3a23af872",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "3682397",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "96a933fbba3a0bd40e59c78cafcf1d6d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"CallerNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotLeaveDueAccumulatedReferralCredits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantClaimFundsOnActiveProject\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClosingTimeTooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"}],\"name\":\"CrowdtainerExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"ExceededNumberOfItemsAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaximumTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinimumTarget\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum CrowdtainerState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InvalidOperationFor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"InvalidReferralRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"}],\"name\":\"MinimumPurchaseValueForReferralNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumTargetHigherThanMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"MinimumTargetNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"}],\"name\":\"OpeningTimeNotReachedYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"PurchaseExceedsMaximumTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralDisabledForProvidedCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralInexistent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximum\",\"type\":\"uint256\"}],\"name\":\"ReferralMinimumValueTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralRateNotMultipleOfTwo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShippingAgentAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyJoined\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shippingAgent\",\"type\":\"address\"}],\"name\":\"CrowdtainerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shippingAgent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValueRaised\",\"type\":\"uint256\"}],\"name\":\"CrowdtainerInDeliveryStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_openingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetMinimum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetMaximum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"_unitPricePerType\",\"type\":\"uint256[4]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referralRate\",\"type\":\"uint256\"}],\"name\":\"CrowdtainerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[4]\",\"name\":\"quantities\",\"type\":\"uint256[4]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"referralEnabled\",\"type\":\"bool\"}],\"name\":\"Joined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"Left\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abortProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedRewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crowdtainerState\",\"outputs\":[{\"internalType\":\"enum CrowdtainerState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"discountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaidAndDeliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"shippingAgent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"openingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256[4]\",\"name\":\"unitPricePerType\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"referralRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEligibilityValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct CampaignData\",\"name\":\"_campaignData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invariant\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256[4]\",\"name\":\"_quantities\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool\",\"name\":\"_enableReferral\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"leave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralEligibilityValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerOfReferee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shippingAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetMaximum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unitPricePerType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize(address,(address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,address))\":{\"details\":\"Initializes a Crowdtainer.\",\"params\":{\"_campaignData\":\"Data defining all rules and values of this Crowdtainer instance.\"}}},\"title\":\"Crowdtainer contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"abortProject()\":{\"notice\":\"Function used by project deployer to signal that it is no longer possible to the ship service or product.         This puts the project into `Failed` state and participants can withdraw their funds.\"},\"claimFunds()\":{\"notice\":\"Function used by participants to withdrawl funds from a failed/expired project.\"},\"claimRewards()\":{\"notice\":\"Function used by participants to withdrawl referral rewards from a successful project.\"},\"getPaidAndDeliver()\":{\"notice\":\"Function used by project deployer to signal commitment to ship service or product by withdrawing/receiving the payment.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/Crowdtainer.sol\":\"Crowdtainer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"src/contracts/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\n// -----------------------------------------------\\n//  Safety margins to avoid impractical values\\n// -----------------------------------------------\\nuint256 constant SAFETY_TIME_RANGE = 1 hours;\\n// @notice Maximum value for referral discounts and rewards\\nuint256 constant SAFETY_MAX_REFERRAL_RATE = 50;\\n// @notice Maximum number of different products for a given Crowdtainer deployment.\\nuint256 constant MAX_NUMBER_OF_PRODUCTS = 4;\\n// @notice Maximum number of items per type on each purchase/join.\\nuint256 constant MAX_NUMBER_OF_PURCHASED_ITEMS = 200;\\n\",\"keccak256\":\"0xb4b6887c5005063858db59f59ce412136727374cb3d28a5e5f533d318ad9dac0\",\"license\":\"GPL-3.0\"},\"src/contracts/Crowdtainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\n// @dev External dependencies\\n// import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// @dev Internal dependencies\\nimport \\\"./ICrowdtainer.sol\\\";\\nimport \\\"./Errors.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Crowdtainer contract\\n */\\ncontract Crowdtainer is ICrowdtainer, ReentrancyGuard, Initializable {\\n    using SafeERC20 for IERC20;\\n\\n    // -----------------------------------------------\\n    //  Main project state\\n    // -----------------------------------------------\\n    CrowdtainerState public crowdtainerState;\\n\\n    // @dev Owner of this contract.\\n    // @notice Has permissions to call: initialize(), join() and leave() functions. These functions are gated so\\n    // that an owner contract can do special accounting (such as an EIP1155 compliant contract).\\n    address public owner;\\n\\n    // @dev The entity or person responsible for the delivery of this crowdtainer project.\\n    // @notice Allowed to call getPaidAndDeliver().\\n    address public shippingAgent;\\n\\n    // @dev Maps wallets that joined this Crowdtainer to the values they paid to join.\\n    mapping(address => uint256) private costForWallet;\\n\\n    // @dev Maps accounts to accumulated referral rewards.\\n    mapping(address => uint256) public accumulatedRewardsOf;\\n\\n    // @dev Total rewards claimable for project.\\n    uint256 public accumulatedRewards;\\n\\n    // @dev Maps referee to referrer.\\n    mapping(address => address) public referrerOfReferee;\\n\\n    uint256 public referralEligibilityValue;\\n\\n    // @dev Wether an account has opted into being elibible for referral rewards.\\n    mapping(address => bool) private enableReferral;\\n\\n    // @dev Maps the total discount for each user.\\n    mapping(address => uint256) public discountForUser;\\n\\n    // @dev The total value raised/accumulated by this contract.\\n    uint256 public totalValueRaised;\\n\\n    // -----------------------------------------------\\n    //  Modifiers\\n    // -----------------------------------------------\\n    /**\\n     * @dev Throws if msg.sender != owner, except when owner is address(0), in which case no restriction is applied.\\n     */\\n    modifier onlyAddress(address requiredAddress) {\\n        if (owner == address(0)) {\\n            // This branch means this contract is being used as a stand-alone contract (e.g., not managed by EIP-1155 owning it)\\n            // E.g.: A Crowdtainer instance interacted directly by an EOA.\\n            _;\\n            return;\\n        }\\n        requireAddress(requiredAddress);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called in state other than the specified.\\n     */\\n    modifier onlyInState(CrowdtainerState requiredState) {\\n        requireState(requiredState);\\n        _;\\n    }\\n\\n    modifier onlyActive() {\\n        requireActive();\\n        _;\\n    }\\n\\n    // Auxiliary modifier functions, used to save deployment cost.\\n    function requireState(CrowdtainerState requiredState) internal view {\\n        if (crowdtainerState != requiredState)\\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\\n        require(crowdtainerState == requiredState);\\n    }\\n\\n    function requireAddress(address requiredAddress) internal view {\\n        if (msg.sender != requiredAddress)\\n            revert Errors.CallerNotAllowed({\\n                expected: msg.sender,\\n                actual: requiredAddress\\n            });\\n        require(msg.sender == requiredAddress);\\n    }\\n\\n    function requireActive() internal view {\\n        if (block.timestamp < openingTime)\\n            revert Errors.OpeningTimeNotReachedYet(\\n                block.timestamp,\\n                openingTime\\n            );\\n        if (block.timestamp > expireTime)\\n            revert Errors.CrowdtainerExpired(block.timestamp, expireTime);\\n    }\\n\\n    // -----------------------------------------------\\n    //  Values set by initialize function\\n    // -----------------------------------------------\\n    // @note Time after which it is possible to join this Crowdtainer.\\n    uint256 public openingTime;\\n    // @note Time after which it is no longer possible for the service or product provider to withdraw funds.\\n    uint256 public expireTime;\\n    // @note Minimum amount in ERC20 units required for Crowdtainer to be considered to be successful.\\n    uint256 public targetMinimum;\\n    // @note Amount in ERC20 units after which no further participation is possible.\\n    uint256 public targetMaximum;\\n    // @note Number of products/services variations offered by this project.\\n    uint256 public numberOfProducts;\\n    // @note The price for each unit type.\\n    // @dev The price should be given in the number of smallest unit for precision (e.g 10^18 == 1 DAI).\\n    uint256[MAX_NUMBER_OF_PRODUCTS] public unitPricePerType;\\n    // @note Half of the value act as a discount for a new participant using an existing referral code, and the other\\n    // half is given for the participant making a referral. The former is similar to the 'cash discount device' in stamp era,\\n    // while the latter is a reward for contributing to the Crowdtainer by incentivising participation from others.\\n    uint256 public referralRate;\\n    // @note Address of the ERC20 token used for payment.\\n    IERC20 public token;\\n\\n    // -----------------------------------------------\\n    //  Events\\n    // -----------------------------------------------\\n\\n    // @note Emmited when a Crowdtainer is created.\\n    event CrowdtainerCreated(\\n        address indexed owner,\\n        address indexed shippingAgent\\n    );\\n\\n    // @note Emmited when a Crowdtainer is initialized.\\n    event CrowdtainerInitialized(\\n        IERC20 indexed _token,\\n        uint256 _openingTime,\\n        uint256 _expireTime,\\n        uint256 _targetMinimum,\\n        uint256 _targetMaximum,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] _unitPricePerType,\\n        uint256 _referralRate\\n    );\\n\\n    // @note Emmited when a user joins, signalling participation intent.\\n    event Joined(\\n        address indexed wallet,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] quantities,\\n        address indexed referrer,\\n        uint256 finalCost, // @dev with discount applied\\n        uint256 appliedDiscount,\\n        bool referralEnabled\\n    );\\n\\n    event Left(address indexed wallet, uint256 withdrawnAmount);\\n\\n    event RewardsClaimed(address indexed wallet, uint256 withdrawnAmount);\\n\\n    event FundsClaimed(address indexed wallet, uint256 withdrawnAmount);\\n\\n    event CrowdtainerInDeliveryStage(\\n        address indexed shippingAgent,\\n        uint256 totalValueRaised\\n    );\\n\\n    // -----------------------------------------------\\n    // Contract functions\\n    // -----------------------------------------------\\n\\n    /**\\n     * @dev Initializes a Crowdtainer.\\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\\n     */\\n    function initialize(address _owner, CampaignData calldata _campaignData)\\n        external\\n        initializer\\n        onlyInState(CrowdtainerState.Uninitialized)\\n    {\\n        owner = _owner;\\n\\n        // @dev: Sanity checks\\n        if (address(_campaignData.token) == address(0))\\n            revert Errors.TokenAddressIsZero();\\n\\n        if (address(_campaignData.shippingAgent) == address(0))\\n            revert Errors.ShippingAgentAddressIsZero();\\n\\n        if (\\n            _campaignData.referralEligibilityValue > _campaignData.targetMinimum\\n        )\\n            revert Errors.ReferralMinimumValueTooHigh({\\n                received: _campaignData.referralEligibilityValue,\\n                maximum: _campaignData.targetMinimum\\n            });\\n\\n        if (_campaignData.referralRate % 2 != 0)\\n            revert Errors.ReferralRateNotMultipleOfTwo();\\n\\n        // @dev: Expiration time should not be too close to the opening time\\n        if (\\n            _campaignData.expireTime <\\n            _campaignData.openingTime + SAFETY_TIME_RANGE\\n        ) revert Errors.ClosingTimeTooEarly();\\n\\n        if (_campaignData.targetMaximum == 0)\\n            revert Errors.InvalidMaximumTarget();\\n\\n        if (_campaignData.targetMinimum == 0)\\n            revert Errors.InvalidMinimumTarget();\\n\\n        if (_campaignData.targetMinimum > _campaignData.targetMaximum)\\n            revert Errors.MinimumTargetHigherThanMaximum();\\n\\n        // @dev The first price of zero indicates the end of price list.\\n        for (uint256 i = 0; i < MAX_NUMBER_OF_PRODUCTS; i++) {\\n            if (_campaignData.unitPricePerType[i] == 0) {\\n                break;\\n            }\\n            numberOfProducts++;\\n        }\\n\\n        if (_campaignData.referralRate > SAFETY_MAX_REFERRAL_RATE)\\n            revert Errors.InvalidReferralRate({\\n                received: _campaignData.referralRate,\\n                maximum: SAFETY_MAX_REFERRAL_RATE\\n            });\\n\\n        shippingAgent = _campaignData.shippingAgent;\\n        openingTime = _campaignData.openingTime;\\n        expireTime = _campaignData.expireTime;\\n        targetMinimum = _campaignData.targetMinimum;\\n        targetMaximum = _campaignData.targetMaximum;\\n        unitPricePerType = _campaignData.unitPricePerType;\\n        referralRate = _campaignData.referralRate;\\n        referralEligibilityValue = _campaignData.referralEligibilityValue;\\n        token = IERC20(_campaignData.token);\\n\\n        crowdtainerState = CrowdtainerState.Funding;\\n\\n        emit CrowdtainerInitialized(\\n            token,\\n            openingTime,\\n            expireTime,\\n            targetMinimum,\\n            targetMaximum,\\n            unitPricePerType,\\n            referralRate\\n        );\\n    }\\n\\n    /*\\n     * @dev Join the Crowdtainer project.\\n     * @param _wallet The wallet that is joining the Crowdtainer.\\n     * @param _quantities Array with the number of units desired for each product.\\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\\n     * @param _referrer Optional referral code to be used to claim a discount.\\n     *\\n     * @note referrer is the wallet address of a previous participant.\\n     *\\n     * @note if `enableReferral` is true, and the account has been used to claim a discount, then\\n     *       it is no longer possible to leave() during the funding phase.\\n     *\\n     * @note A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\\n     *       To 'update' an order, the user must first 'leave' then join again with the new values.\\n     */\\n    function join(\\n        address _wallet,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\\n        bool _enableReferral,\\n        address _referrer\\n    )\\n        external\\n        onlyAddress(owner)\\n        onlyInState(CrowdtainerState.Funding)\\n        onlyActive\\n        nonReentrant\\n    {\\n        enableReferral[_wallet] = _enableReferral;\\n\\n        // @dev Check if wallet didn't already join\\n        if (costForWallet[_wallet] != 0) revert Errors.UserAlreadyJoined();\\n\\n        // @dev Calculate cost\\n        uint256 finalCost;\\n\\n        for (uint256 i = 0; i < numberOfProducts; i++) {\\n            if (_quantities[i] > MAX_NUMBER_OF_PURCHASED_ITEMS)\\n                revert Errors.ExceededNumberOfItemsAllowed({\\n                    received: _quantities[i],\\n                    maximum: MAX_NUMBER_OF_PURCHASED_ITEMS\\n                });\\n\\n            finalCost += unitPricePerType[i] * _quantities[i];\\n        }\\n\\n        if (_enableReferral && finalCost < referralEligibilityValue)\\n            revert Errors.MinimumPurchaseValueForReferralNotMet({\\n                received: finalCost,\\n                minimum: referralEligibilityValue\\n            });\\n\\n        // @dev Apply discounts to `finalCost` if applicable.\\n        bool eligibleForDiscount;\\n        // @dev Verify validity of given `referrer`\\n        if (_referrer != address(0)) {\\n            // @dev Check if referrer participated\\n            if (costForWallet[_referrer] == 0) {\\n                revert Errors.ReferralInexistent();\\n            }\\n\\n            if (!enableReferral[_referrer]) {\\n                revert Errors.ReferralDisabledForProvidedCode();\\n            }\\n\\n            eligibleForDiscount = true;\\n        }\\n\\n        uint256 discount;\\n\\n        if (eligibleForDiscount) {\\n            // @dev Two things happens when a valid referral code is given:\\n            //    1 - Half of the referral rate is applied as a discount to the current order.\\n            //    2 - Half of the referral rate is credited to the referrer.\\n\\n            // @dev Calculate the discount value\\n            discount = ((finalCost * referralRate) / 100) / 2;\\n\\n            // @dev 1- Apply discount\\n            assert(discount < finalCost);\\n            finalCost -= discount;\\n            discountForUser[_wallet] += discount;\\n\\n            // @dev 2- Apply reward for referrer\\n            accumulatedRewardsOf[_referrer] += discount;\\n            accumulatedRewards += discount;\\n\\n            referrerOfReferee[_wallet] = _referrer;\\n\\n            assert(discount != 0);\\n        }\\n\\n        costForWallet[_wallet] = finalCost;\\n\\n        // increase total value accumulated by this contract\\n        totalValueRaised += finalCost;\\n\\n        // @dev Check if the purchase order doesn't exceed the goal's `targetMaximum`.\\n        if ((totalValueRaised - accumulatedRewards) > targetMaximum)\\n            revert Errors.PurchaseExceedsMaximumTarget({\\n                received: totalValueRaised,\\n                maximum: targetMaximum\\n            });\\n\\n        // @dev transfer required funds into this contract\\n        token.safeTransferFrom(_wallet, address(this), finalCost);\\n\\n        emit Joined(\\n            _wallet,\\n            _quantities,\\n            _referrer,\\n            finalCost,\\n            discount,\\n            _enableReferral\\n        );\\n    }\\n\\n    /*\\n     * @dev Leave the Crowdtainer and withdraw deposited funds given when joining.\\n     * @note Calling this method signals that the user is no longer interested in participating.\\n     * @note Only allowed if the respective Crowdtainer is in active `Funding` state.\\n     * @param _wallet The wallet that is leaving the Crowdtainer.\\n     */\\n    function leave(address _wallet)\\n        external\\n        onlyAddress(owner)\\n        onlyInState(CrowdtainerState.Funding)\\n        onlyActive\\n        nonReentrant\\n    {\\n        uint256 withdrawalTotal = costForWallet[_wallet];\\n\\n        // @dev Subtract formerly given referral rewards originating from this account.\\n        address referrer = referrerOfReferee[_wallet];\\n        accumulatedRewardsOf[referrer] -= discountForUser[_wallet];\\n\\n        /* @dev If this wallet's referral was used, then it is no longer possible to leave().\\n         *      This is to discourage users from joining just to generate discount codes.\\n         *      E.g.: A user uses two different wallets, the first joins to generate a discount code for him/herself to be used in\\n         *      the second wallet, and then immediatelly leaves the pool from the first wallet, leaving the second wallet with a full discount. */\\n        if (accumulatedRewardsOf[_wallet] > 0) {\\n            revert Errors.CannotLeaveDueAccumulatedReferralCredits();\\n        }\\n\\n        totalValueRaised -= costForWallet[_wallet];\\n        costForWallet[_wallet] = 0;\\n        discountForUser[_wallet] = 0;\\n        referrerOfReferee[_wallet] = address(0);\\n        enableReferral[_wallet] = false;\\n\\n        // @dev transfer the owed funds from this contract back to the user.\\n        token.safeTransferFrom(address(this), _wallet, withdrawalTotal);\\n\\n        emit Left(_wallet, withdrawalTotal);\\n    }\\n\\n    /**\\n     * @notice Function used by project deployer to signal commitment to ship service or product by withdrawing/receiving the payment.\\n     */\\n    function getPaidAndDeliver()\\n        public\\n        onlyAddress(shippingAgent)\\n        onlyInState(CrowdtainerState.Funding)\\n        nonReentrant\\n    {\\n        assert(accumulatedRewards < totalValueRaised);\\n\\n        uint256 availableForAgent = totalValueRaised - accumulatedRewards;\\n\\n        if (availableForAgent < targetMinimum) {\\n            revert Errors.MinimumTargetNotReached(\\n                targetMinimum,\\n                totalValueRaised\\n            );\\n        }\\n\\n        crowdtainerState = CrowdtainerState.Delivery;\\n\\n        // @dev transfer the owed funds from this contract to the service provider.\\n        token.safeTransferFrom(address(this), shippingAgent, availableForAgent);\\n\\n        emit CrowdtainerInDeliveryStage(shippingAgent, availableForAgent);\\n    }\\n\\n    /**\\n     * @notice Function used by project deployer to signal that it is no longer possible to the ship service or product.\\n     *         This puts the project into `Failed` state and participants can withdraw their funds.\\n     */\\n    function abortProject()\\n        public\\n        onlyAddress(shippingAgent)\\n        onlyInState(CrowdtainerState.Funding)\\n        nonReentrant\\n    {\\n        crowdtainerState = CrowdtainerState.Failed;\\n    }\\n\\n    /**\\n     * @notice Function used by participants to withdrawl funds from a failed/expired project.\\n     */\\n    function claimFunds() public nonReentrant {\\n        if (block.timestamp < openingTime)\\n            revert Errors.OpeningTimeNotReachedYet(\\n                block.timestamp,\\n                openingTime\\n            );\\n\\n        if (crowdtainerState == CrowdtainerState.Uninitialized)\\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\\n\\n        if (crowdtainerState == CrowdtainerState.Delivery)\\n            revert Errors.InvalidOperationFor({state: crowdtainerState});\\n\\n        assert(accumulatedRewards < totalValueRaised);\\n\\n        // The first interaction with this function 'nudges' the state to `Failed` if\\n        // the project didn't reach the goal in time.\\n        if (\\n            block.timestamp > expireTime &&\\n            (totalValueRaised - accumulatedRewards) < targetMinimum\\n        ) crowdtainerState = CrowdtainerState.Failed;\\n\\n        if (crowdtainerState != CrowdtainerState.Failed)\\n            revert Errors.CantClaimFundsOnActiveProject();\\n\\n        // Reaching this line means the project failed either due expiration or explicit transition from `abortProject()`.\\n        uint256 withdrawalTotal = costForWallet[msg.sender];\\n\\n        costForWallet[msg.sender] = 0;\\n        discountForUser[msg.sender] = 0;\\n        referrerOfReferee[msg.sender] = address(0);\\n\\n        // @dev transfer the owed funds from this contract back to the user.\\n        token.safeTransferFrom(address(this), msg.sender, withdrawalTotal);\\n\\n        emit FundsClaimed(msg.sender, withdrawalTotal);\\n    }\\n\\n    /**\\n     * @notice Function used by participants to withdrawl referral rewards from a successful project.\\n     */\\n    function claimRewards()\\n        public\\n        nonReentrant\\n        onlyInState(CrowdtainerState.Delivery)\\n    {\\n        uint256 totalRewards = accumulatedRewardsOf[msg.sender];\\n        accumulatedRewardsOf[msg.sender] = 0;\\n\\n        token.safeTransferFrom(address(this), msg.sender, totalRewards);\\n\\n        emit RewardsClaimed(msg.sender, totalRewards);\\n    }\\n\\n    // @dev This method is only used for Formal Verification with SMTChecker.\\n    // @dev It is executed with `make solcheck` command provided with the project's scripts.\\n    function invariant() public view {\\n        if (crowdtainerState != CrowdtainerState.Uninitialized) {\\n            assert(expireTime >= (openingTime + SAFETY_TIME_RANGE));\\n            assert(targetMaximum > 0);\\n            assert(targetMinimum <= targetMaximum);\\n            assert(referralRate <= SAFETY_MAX_REFERRAL_RATE);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a75242175e74ccf2da71c4e6e22e26f0c3240ac41fe335eca9a523cc91d0f68\",\"license\":\"GPL-3.0\"},\"src/contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./States.sol\\\";\\n\\nlibrary Errors {\\n    // -----------------------------------------------\\n    //  Vouchers\\n    // -----------------------------------------------\\n    // @notice: The provided crowdtainer does not exist.\\n    error CrowdtainerInexistent();\\n    // @notice: Invalid token id.\\n    error InvalidTokenId(uint256 tokenId);\\n    // @notice: Account cannot be of address(0).\\n    error AccountAddressIsZero();\\n    // @notice: Metadata service contract cannot be of address(0).\\n    error MetadataServiceAddressIsZero();\\n    // @notice: Accounts and ids lengths do not match.\\n    error AccountIdsLengthMismatch();\\n    // @notice: ID's and amounts lengths do not match.\\n    error IDsAmountsLengthMismatch();\\n    // @notice: Cannot set approval for the same account.\\n    error CannotSetApprovalForSelf();\\n    // @notice: Caller is not owner nor approved.\\n    error AccountNotOwnerOrApproved();\\n    // @notice: Only the shipping agent is able to set a voucher/tokenId as \\\"claimed\\\".\\n    error SetClaimedOnlyAllowedByShippingAgent();\\n    // @notice: Cannot transfer someone else's tokens.\\n    error UnauthorizedTransfer();\\n    // @notice: Insufficient balance.\\n    error InsufficientBalance();\\n    // @notice: ERC1155: ERC1155Receiver rejected tokens.\\n    error ERC1155ReceiverRejectedTokens();\\n    // @notice: Invalid receiver (non ERC155Receiver).\\n    error NonERC1155Receiver();\\n    // @notice: Can't make transfers in given state.\\n    error TransferNotAllowed(address crowdtainer, CrowdtainerState state);\\n    // @notice: No further participants possible in a given Crowdtainer.\\n    error MaximumNumberOfParticipantsReached(\\n        uint256 maximum,\\n        address crowdtainer\\n    );\\n\\n    // -----------------------------------------------\\n    //  Initialization with invalid parameters\\n    // -----------------------------------------------\\n    // @notice: Cannot initialize with owner of address(0).\\n    error OwnerAddressIsZero();\\n    // @notice: Cannot initialize with token of address(0).\\n    error TokenAddressIsZero();\\n    // @notice: Shipping agent can't have address(0).\\n    error ShippingAgentAddressIsZero();\\n    // @notice: Initialize called with closing time is less than one hour away from the opening time.\\n    error ClosingTimeTooEarly();\\n    // @notice: Initialize called with invalid number of maximum units to be sold (0).\\n    error InvalidMaximumTarget();\\n    // @notice: Initialize called with invalid number of minimum units to be sold (less than maximum sold units).\\n    error InvalidMinimumTarget();\\n    // @notice: Initialize called with invalid minimum and maximum targets (minimum value higher than maximum).\\n    error MinimumTargetHigherThanMaximum();\\n    // @notice: Initialize called with invalid referral rate.\\n    error InvalidReferralRate(uint256 received, uint256 maximum);\\n    // @notice: Referral rate not multiple of 2.\\n    error ReferralRateNotMultipleOfTwo();\\n    // @notice: Refferal minimum value for participation can't be higher than project's minimum target.\\n    error ReferralMinimumValueTooHigh(uint256 received, uint256 maximum);\\n\\n    // -----------------------------------------------\\n    //  Authorization\\n    // -----------------------------------------------\\n    // @notice: Method not authorized for caller (message sender).\\n    error CallerNotAllowed(address expected, address actual);\\n\\n    // -----------------------------------------------\\n    //  Join() operation\\n    // -----------------------------------------------\\n    // @notice: The given referral was not found thus can't be used to claim a discount.\\n    error ReferralInexistent();\\n    // @notice: Purchase exceed target's maximum goal.\\n    error PurchaseExceedsMaximumTarget(uint256 received, uint256 maximum);\\n    // @notice: Number of items purchased per type exceeds maximum allowed.\\n    error ExceededNumberOfItemsAllowed(uint256 received, uint256 maximum);\\n    // @notice: Wallet already used to join project.\\n    error UserAlreadyJoined();\\n    // @notice: Referral is not enabled for the given code/wallet.\\n    error ReferralDisabledForProvidedCode();\\n    // @notice: Participant can't participate in referral if the minimum purchase value specified by the service provider is not met.\\n    error MinimumPurchaseValueForReferralNotMet(\\n        uint256 received,\\n        uint256 minimum\\n    );\\n\\n    // -----------------------------------------------\\n    //  Leave() operation\\n    // -----------------------------------------------\\n    // @notice: It is not possible to leave when the user has referrals enabled, has been referred and gained rewards.\\n    error CannotLeaveDueAccumulatedReferralCredits();\\n\\n    // -----------------------------------------------\\n    //  GetPaidAndDeliver() operation\\n    // -----------------------------------------------\\n    // @notice: GetPaidAndDeliver can't be called on a expired project.\\n    error CrowdtainerExpired(uint256 timestamp, uint256 expiredTime);\\n    // @notice: Not enough funds were raised.\\n    error MinimumTargetNotReached(uint256 minimum, uint256 actual);\\n    // @notice: The project is not active yet.\\n    error OpeningTimeNotReachedYet(uint256 timestamp, uint256 openingTime);\\n\\n    // -----------------------------------------------\\n    //  ClaimFunds() operation\\n    // -----------------------------------------------\\n    // @notice: Can't be called if the project is still active.\\n    error CantClaimFundsOnActiveProject();\\n\\n    // -----------------------------------------------\\n    //  State transition\\n    // -----------------------------------------------\\n    // @notice: Method can't be invoked at current state.\\n    error InvalidOperationFor(CrowdtainerState state);\\n\\n    // -----------------------------------------------\\n    //  Other Invariants\\n    // -----------------------------------------------\\n    // @notice: Payable receive function called, but we don't accept Eth for payment.\\n    error ContractDoesNotAcceptEther();\\n}\\n\",\"keccak256\":\"0x916ec87d2518b50103243de58bb560839eda41be8e431559e49bef3fc499d4f3\",\"license\":\"GPL-3.0\"},\"src/contracts/ICrowdtainer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./States.sol\\\";\\n\\n// Data defining all rules and values of a Crowdtainer instance.\\nstruct CampaignData {\\n    // Address that represents the product or service provider.\\n    address shippingAgent;\\n    // Funding opening time.\\n    uint256 openingTime;\\n    // Time after which the owner can no longer withdraw funds.\\n    uint256 expireTime;\\n    // Amount in ERC20 units required for project to be considered to be successful.\\n    uint256 targetMinimum;\\n    // Amount in ERC20 units after which no further participation is possible.\\n    uint256 targetMaximum;\\n    // Array with price of each item, in ERC2O units. Zero is an invalid value and will throw.\\n    uint256[MAX_NUMBER_OF_PRODUCTS] unitPricePerType;\\n    // Percentage used for incentivising participation. Half the amount goes to the referee, and the other half to the referrer.\\n    uint256 referralRate;\\n    // The minimum purchase value required to be eligible to participate in referral rewards.\\n    uint256 referralEligibilityValue;\\n    // Address of the ERC20 token used for payment.\\n    address token;\\n}\\n\\n/**\\n * @dev Interface for Crowdtainer instances.\\n */\\ninterface ICrowdtainer {\\n    /**\\n     * @dev Initializes a Crowdtainer.\\n     * @param _campaignData Data defining all rules and values of this Crowdtainer instance.\\n     */\\n    function initialize(address owner, CampaignData calldata _campaignData)\\n        external;\\n\\n    function crowdtainerState() external view returns (CrowdtainerState);\\n\\n    function shippingAgent() external view returns (address);\\n\\n    function numberOfProducts() external view returns (uint256);\\n\\n    function unitPricePerType(uint256) external view returns (uint256);\\n\\n    /*\\n     * @dev Join the Crowdtainer project.\\n     * @param _wallet The wallet that is joining the Crowdtainer.\\n     * @param _quantities Array with the number of units desired for each product.\\n     * @param _enableReferral Informs whether the user would like to be eligible to collect rewards for being referred.\\n     * @param _referrer Optional referral code to be used to claim a discount.\\n     *\\n     * @note referrer is the wallet address of a previous participant.\\n     *\\n     * @note if `enableReferral` is true, and the account has been used to claim a discount, then\\n     *       it is no longer possible to leave() during the funding phase.\\n     *\\n     * @note A same user is not allowed to increase the order amounts (i.e., by calling join multiple times).\\n     *       To 'update' an order, the user must first 'leave' then join again with the new values.\\n     */\\n    function join(\\n        address _wallet,\\n        uint256[MAX_NUMBER_OF_PRODUCTS] calldata _quantities,\\n        bool _enableReferral,\\n        address _referrer\\n    ) external;\\n\\n    /*\\n     * @dev Leave the Crowdtainer and withdraw deposited funds given when joining.\\n     * @note Calling this method signals that the user is no longer interested in participating.\\n     * @note Only allowed if the respective Crowdtainer is in active `Funding` state.\\n     * @param _wallet The wallet that is leaving the Crowdtainer.\\n     */\\n    function leave(address _wallet) external;\\n}\\n\",\"keccak256\":\"0xfaa4df1443af11d08a325d279845af4ff93d0732212df0b26ffced83ab3fc4d0\",\"license\":\"GPL-3.0\"},\"src/contracts/States.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.11;\\n\\nenum CrowdtainerState {\\n    Uninitialized,\\n    Funding,\\n    Delivery,\\n    Failed\\n}\\n\",\"keccak256\":\"0xe5f54a3d7dcb5381721facabd6fb232fd78864b1efe64c3f7d94ee6839235b19\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550614197806100286000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063b7a8807c11610097578063c66301b211610071578063c66301b2146103ba578063cf084056146103d8578063eb6ced16146103f6578063fc0c546a1461042657610173565b8063b7a8807c14610364578063bc6894fe14610382578063bedf77a61461039e57610173565b80638da5cb5b146102d857806390ffbe90146102f65780639c81ff6b14610314578063a053ce1f14610332578063ac30777314610350578063b03a9a051461035a57610173565b8063312ee7fa11610130578063312ee7fa1461023a578063372500ab14610258578063464eff501461026257806353b476561461027e5780637855d30c1461029c5780638831c8dc146102ba57610173565b80630e6137cf1461017857806319cc6492146101825780631e1b25731461018c5780632748608f146101bc57806327949dab146101ec578063310a1ee31461021c575b600080fd5b610180610444565b005b61018a610898565b005b6101a660048036038101906101a19190613594565b610a3e565b6040516101b391906135d0565b60405180910390f35b6101d660048036038101906101d19190613649565b610a59565b6040516101e39190613685565b60405180910390f35b61020660048036038101906102019190613649565b610a8c565b60405161021391906135d0565b60405180910390f35b610224610aa4565b60405161023191906135d0565b60405180910390f35b610242610aaa565b60405161024f91906135d0565b60405180910390f35b610260610ab0565b005b61027c600480360381019061027791906136ff565b610c3b565b005b610286611a4d565b60405161029391906135d0565b60405180910390f35b6102a4611a53565b6040516102b191906137dd565b60405180910390f35b6102c2611a66565b6040516102cf91906135d0565b60405180910390f35b6102e0611a6c565b6040516102ed9190613685565b60405180910390f35b6102fe611a92565b60405161030b91906135d0565b60405180910390f35b61031c611a98565b60405161032991906135d0565b60405180910390f35b61033a611a9e565b60405161034791906135d0565b60405180910390f35b610358611aa4565b005b610362611f14565b005b61036c611fb0565b60405161037991906135d0565b60405180910390f35b61039c6004803603810190610397919061381d565b611fb6565b005b6103b860048036038101906103b39190613649565b6125ef565b005b6103c2612f6e565b6040516103cf91906135d0565b60405180910390f35b6103e0612f74565b6040516103ed9190613685565b60405180910390f35b610410600480360381019061040b9190613649565b612f9a565b60405161041d91906135d0565b60405180910390f35b61042e612fb2565b60405161043b91906138bd565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106a75760016104c981612fd8565b6002600054141561050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690613935565b60405180910390fd5b6002600081905550600a546005541061052b5761052a613955565b5b6000600554600a5461053d91906139b3565b9050600d5481101561058c57600d54600a546040517f59dc32870000000000000000000000000000000000000000000000000000000081526004016105839291906139e7565b60405180910390fd5b6002600160026101000a81548160ff021916908360038111156105b2576105b1613766565b5b021790555061062830600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f26dc6b7e309de29eb24d6830d1cc0f60c6b5d25d5d4830ce8ba77eb55468f0dc8260405161069091906135d0565b60405180910390a250600160008190555050610895565b6106b081613129565b60016106bb81612fd8565b60026000541415610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890613935565b60405180910390fd5b6002600081905550600a546005541061071d5761071c613955565b5b6000600554600a5461072f91906139b3565b9050600d5481101561077e57600d54600a546040517f59dc32870000000000000000000000000000000000000000000000000000000081526004016107759291906139e7565b60405180910390fd5b6002600160026101000a81548160ff021916908360038111156107a4576107a3613766565b5b021790555061081a30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f26dc6b7e309de29eb24d6830d1cc0f60c6b5d25d5d4830ce8ba77eb55468f0dc8260405161088291906135d0565b60405180910390a2506001600081905550505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a457600161091d81612fd8565b60026000541415610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90613935565b60405180910390fd5b60026000819055506003600160026101000a81548160ff0219169083600381111561099157610990613766565b5b0217905550600160008190555050610a3b565b6109ad81613129565b60016109b881612fd8565b600260005414156109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f590613935565b60405180910390fd5b60026000819055506003600160026101000a81548160ff02191690836003811115610a2c57610a2b613766565b5b02179055506001600081905550505b50565b60108160048110610a4e57600080fd5b016000915090505481565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600c5481565b60075481565b60026000541415610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613935565b60405180910390fd5b60026000819055506002610b0981612fd8565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be1303383601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe82604051610c2791906135d0565b60405180910390a250506001600081905550565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561137b576001610cc081612fd8565b610cc86131d6565b60026000541415610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590613935565b60405180910390fd5b600260008190555083600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610de6576040517ff45d43bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600f54811015610ec75760c8878260048110610e0d57610e0c613a10565b5b60200201351115610e6f57868160048110610e2b57610e2a613a10565b5b602002013560c86040517f3f257233000000000000000000000000000000000000000000000000000000008152600401610e669291906139e7565b60405180910390fd5b868160048110610e8257610e81613a10565b5b602002013560108260048110610e9b57610e9a613a10565b5b0154610ea79190613a3f565b82610eb29190613a99565b91508080610ebf90613aef565b915050610dee565b50848015610ed6575060075481105b15610f1c57806007546040517f66338f96000000000000000000000000000000000000000000000000000000008152600401610f139291906139e7565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611053576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610fcb576040517f55fbf60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661104e576040517fd74006f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600190505b600081156111f757600260646014548561106d9190613a3f565b6110779190613b67565b6110819190613b67565b905082811061109357611092613955565b5b808361109f91906139b3565b925080600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f09190613a99565b9250508190555080600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111469190613a99565b92505081905550806005600082825461115f9190613a99565b9250508190555085600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008114156111f6576111f5613955565b5b5b82600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a600082825461124d9190613a99565b92505081905550600e54600554600a5461126791906139b3565b11156112b057600a54600e546040517fad9d04bc0000000000000000000000000000000000000000000000000000000081526004016112a79291906139e7565b60405180910390fd5b6112ff893085601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f6d47cedf2ff836145796116ccd8b27cb538f16621a1f844f0d1c2a58e23a499a8a86858c6040516113629493929190613bc6565b60405180910390a3505050600160008190555050611a46565b61138481613129565b600161138f81612fd8565b6113976131d6565b600260005414156113dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d490613935565b60405180910390fd5b600260008190555083600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146114b5576040517ff45d43bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600f548110156115965760c88782600481106114dc576114db613a10565b5b6020020135111561153e578681600481106114fa576114f9613a10565b5b602002013560c86040517f3f2572330000000000000000000000000000000000000000000000000000000081526004016115359291906139e7565b60405180910390fd5b86816004811061155157611550613a10565b5b60200201356010826004811061156a57611569613a10565b5b01546115769190613a3f565b826115819190613a99565b9150808061158e90613aef565b9150506114bd565b508480156115a5575060075481105b156115eb57806007546040517f66338f960000000000000000000000000000000000000000000000000000000081526004016115e29291906139e7565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611722576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561169a576040517f55fbf60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661171d576040517fd74006f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600190505b600081156118c657600260646014548561173c9190613a3f565b6117469190613b67565b6117509190613b67565b905082811061176257611761613955565b5b808361176e91906139b3565b925080600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117bf9190613a99565b9250508190555080600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118159190613a99565b92505081905550806005600082825461182e9190613a99565b9250508190555085600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008114156118c5576118c4613955565b5b5b82600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a600082825461191c9190613a99565b92505081905550600e54600554600a5461193691906139b3565b111561197f57600a54600e546040517fad9d04bc0000000000000000000000000000000000000000000000000000000081526004016119769291906139e7565b60405180910390fd5b6119ce893085601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f6d47cedf2ff836145796116ccd8b27cb538f16621a1f844f0d1c2a58e23a499a8a86858c604051611a319493929190613bc6565b60405180910390a35050506001600081905550505b5050505050565b600e5481565b600160029054906101000a900460ff1681565b600a5481565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60055481565b60145481565b60026000541415611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190613935565b60405180910390fd5b6002600081905550600b54421015611b3d5742600b546040517f812d154e000000000000000000000000000000000000000000000000000000008152600401611b349291906139e7565b60405180910390fd5b60006003811115611b5157611b50613766565b5b600160029054906101000a900460ff166003811115611b7357611b72613766565b5b1415611bc557600160029054906101000a900460ff166040517f64c3f1f8000000000000000000000000000000000000000000000000000000008152600401611bbc91906137dd565b60405180910390fd5b60026003811115611bd957611bd8613766565b5b600160029054906101000a900460ff166003811115611bfb57611bfa613766565b5b1415611c4d57600160029054906101000a900460ff166040517f64c3f1f8000000000000000000000000000000000000000000000000000000008152600401611c4491906137dd565b60405180910390fd5b600a5460055410611c6157611c60613955565b5b600c5442118015611c825750600d54600554600a54611c8091906139b3565b105b15611cb3576003600160026101000a81548160ff02191690836003811115611cad57611cac613766565b5b02179055505b600380811115611cc657611cc5613766565b5b600160029054906101000a900460ff166003811115611ce857611ce7613766565b5b14611d1f576040517f9b61206300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ebb303383601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fa65a8b4f7f65a1063243d7f7e9e4da00ff767599acf21549ef2548a45d1695ae82604051611f0191906135d0565b60405180910390a2506001600081905550565b60006003811115611f2857611f27613766565b5b600160029054906101000a900460ff166003811115611f4a57611f49613766565b5b14611fae57610e10600b54611f5f9190613a99565b600c541015611f7157611f70613955565b5b6000600e5411611f8457611f83613955565b5b600e54600d541115611f9957611f98613955565b5b60326014541115611fad57611fac613955565b5b5b565b600b5481565b60018054906101000a900460ff16611fde57600160009054906101000a900460ff1615611fe7565b611fe661326e565b5b612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d90613c7d565b60405180910390fd5b600060018054906101000a900460ff1615905080156120745760018060016101000a81548160ff02191690831515021790555060018060006101000a81548160ff0219169083151502179055505b600061207f81612fd8565b83600160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16836101600160208101906120ec9190613649565b73ffffffffffffffffffffffffffffffffffffffff16141561213a576040517fdc2e5e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360000160208101906121659190613649565b73ffffffffffffffffffffffffffffffffffffffff1614156121b3576040517fc7b2492000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260600135836101400135111561220c5782610140013583606001356040517f1e5c82a50000000000000000000000000000000000000000000000000000000081526004016122039291906139e7565b60405180910390fd5b600060028461012001356122209190613c9d565b14612257576040517f84d68d9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e1083602001356122699190613a99565b836040013510156122a6576040517f3c91bee800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836080013514156122e5576040517fa4c54a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083606001351415612324576040517f7a61fdf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826080013583606001351115612366576040517f02179b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60048110156123c55760008460a001826004811061238a57612389613a10565b5b6020020135141561239a576123c5565b600f60008154809291906123ad90613aef565b919050555080806123bd90613aef565b915050612369565b50603283610120013511156124195782610120013560326040517f9088a55b0000000000000000000000000000000000000000000000000000000081526004016124109291906139e7565b60405180910390fd5b82600001602081019061242c9190613649565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260200135600b819055508260400135600c819055508260600135600d819055508260800135600e819055508260a00160109060046124ac9291906134fc565b50826101200135601481905550826101400135600781905550826101600160208101906124d99190613649565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060026101000a81548160ff0219169083600381111561253e5761253d613766565b5b0217905550601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb9c39e9794e0846a2b44dc834e2701f75acd7c1a7f1ee89a38d0ed38d870523b600b54600c54600d54600e5460106014546040516125c096959493929190613dc4565b60405180910390a25080156125ea5760006001806101000a81548160ff0219169083151502179055505b505050565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612ae757600161267481612fd8565b61267c6131d6565b600260005414156126c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b990613935565b60405180910390fd5b60026000819055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461280091906139b3565b925050819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612881576040517fd273722600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008282546128d291906139b3565b925050819055506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a89308684601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167faf65ecdc8a0d3ea90c8344c89e7001864fddf59dfdf41da2994463fe99049a5983604051612acf91906135d0565b60405180910390a25050600160008190555050612f6a565b612af081613129565b6001612afb81612fd8565b612b036131d6565b60026000541415612b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4090613935565b60405180910390fd5b60026000819055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c8791906139b3565b925050819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612d08576040517fd273722600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a6000828254612d5991906139b3565b925050819055506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f10308684601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167faf65ecdc8a0d3ea90c8344c89e7001864fddf59dfdf41da2994463fe99049a5983604051612f5691906135d0565b60405180910390a250506001600081905550505b5050565b600f5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806003811115612feb57612fea613766565b5b600160029054906101000a900460ff16600381111561300d5761300c613766565b5b1461305e57600160029054906101000a900460ff166040517f64c3f1f800000000000000000000000000000000000000000000000000000000815260040161305591906137dd565b60405180910390fd5b80600381111561307157613070613766565b5b600160029054906101000a900460ff16600381111561309357613092613766565b5b1461309d57600080fd5b50565b613123846323b872dd60e01b8585856040516024016130c193929190613e27565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061327f565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461319b5733816040517f50a5f405000000000000000000000000000000000000000000000000000000008152600401613192929190613e5e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131d357600080fd5b50565b600b544210156132215742600b546040517f812d154e0000000000000000000000000000000000000000000000000000000081526004016132189291906139e7565b60405180910390fd5b600c5442111561326c5742600c546040517fb73065c10000000000000000000000000000000000000000000000000000000081526004016132639291906139e7565b60405180910390fd5b565b600061327930613346565b15905090565b60006132e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133699092919063ffffffff16565b905060008151111561334157808060200190518101906133019190613e9c565b613340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333790613f3b565b60405180910390fd5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606133788484600085613381565b90509392505050565b6060824710156133c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133bd90613fcd565b60405180910390fd5b6133cf85613346565b61340e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161340590614039565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161343791906140d3565b60006040518083038185875af1925050503d8060008114613474576040519150601f19603f3d011682016040523d82523d6000602084013e613479565b606091505b5091509150613489828286613495565b92505050949350505050565b606083156134a5578290506134f5565b6000835111156134b85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ec919061413f565b60405180910390fd5b9392505050565b826004810192821561352b579160200282015b8281111561352a57823582559160200191906001019061350f565b5b509050613538919061353c565b5090565b5b8082111561355557600081600090555060010161353d565b5090565b600080fd5b6000819050919050565b6135718161355e565b811461357c57600080fd5b50565b60008135905061358e81613568565b92915050565b6000602082840312156135aa576135a9613559565b5b60006135b88482850161357f565b91505092915050565b6135ca8161355e565b82525050565b60006020820190506135e560008301846135c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613616826135eb565b9050919050565b6136268161360b565b811461363157600080fd5b50565b6000813590506136438161361d565b92915050565b60006020828403121561365f5761365e613559565b5b600061366d84828501613634565b91505092915050565b61367f8161360b565b82525050565b600060208201905061369a6000830184613676565b92915050565b600080fd5b6000819050826020600402820111156136c1576136c06136a0565b5b92915050565b60008115159050919050565b6136dc816136c7565b81146136e757600080fd5b50565b6000813590506136f9816136d3565b92915050565b60008060008060e0858703121561371957613718613559565b5b600061372787828801613634565b9450506020613738878288016136a5565b93505060a0613749878288016136ea565b92505060c061375a87828801613634565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106137a6576137a5613766565b5b50565b60008190506137b782613795565b919050565b60006137c7826137a9565b9050919050565b6137d7816137bc565b82525050565b60006020820190506137f260008301846137ce565b92915050565b600080fd5b60006101808284031215613814576138136137f8565b5b81905092915050565b6000806101a0838503121561383557613834613559565b5b600061384385828601613634565b9250506020613854858286016137fd565b9150509250929050565b6000819050919050565b600061388361387e613879846135eb565b61385e565b6135eb565b9050919050565b600061389582613868565b9050919050565b60006138a78261388a565b9050919050565b6138b78161389c565b82525050565b60006020820190506138d260008301846138ae565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061391f601f836138d8565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139be8261355e565b91506139c98361355e565b9250828210156139dc576139db613984565b5b828203905092915050565b60006040820190506139fc60008301856135c1565b613a0960208301846135c1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a4a8261355e565b9150613a558361355e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a8e57613a8d613984565b5b828202905092915050565b6000613aa48261355e565b9150613aaf8361355e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ae457613ae3613984565b5b828201905092915050565b6000613afa8261355e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b2d57613b2c613984565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b728261355e565b9150613b7d8361355e565b925082613b8d57613b8c613b38565b5b828204905092915050565b82818337600083830152505050565b613bb360808383613b98565b5050565b613bc0816136c7565b82525050565b600060e082019050613bdb6000830187613ba7565b613be860808301866135c1565b613bf560a08301856135c1565b613c0260c0830184613bb7565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613c67602e836138d8565b9150613c7282613c0b565b604082019050919050565b60006020820190508181036000830152613c9681613c5a565b9050919050565b6000613ca88261355e565b9150613cb38361355e565b925082613cc357613cc2613b38565b5b828206905092915050565b600060049050919050565b600081905092915050565b6000819050919050565b613cf78161355e565b82525050565b6000613d098383613cee565b60208301905092915050565b60008160001c9050919050565b6000819050919050565b6000613d3f613d3a83613d15565b613d22565b9050919050565b6000613d528254613d2c565b9050919050565b6000600182019050919050565b613d6f81613cce565b613d798184613cd9565b9250613d8482613ce4565b8060005b83811015613dbc57613d9982613d46565b613da38782613cfd565b9650613dae83613d59565b925050600181019050613d88565b505050505050565b600061012082019050613dda60008301896135c1565b613de760208301886135c1565b613df460408301876135c1565b613e0160608301866135c1565b613e0e6080830185613d66565b613e1c6101008301846135c1565b979650505050505050565b6000606082019050613e3c6000830186613676565b613e496020830185613676565b613e5660408301846135c1565b949350505050565b6000604082019050613e736000830185613676565b613e806020830184613676565b9392505050565b600081519050613e96816136d3565b92915050565b600060208284031215613eb257613eb1613559565b5b6000613ec084828501613e87565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613f25602a836138d8565b9150613f3082613ec9565b604082019050919050565b60006020820190508181036000830152613f5481613f18565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613fb76026836138d8565b9150613fc282613f5b565b604082019050919050565b60006020820190508181036000830152613fe681613faa565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614023601d836138d8565b915061402e82613fed565b602082019050919050565b6000602082019050818103600083015261405281614016565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561408d578082015181840152602081019050614072565b8381111561409c576000848401525b50505050565b60006140ad82614059565b6140b78185614064565b93506140c781856020860161406f565b80840191505092915050565b60006140df82846140a2565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000614111826140ea565b61411b81856138d8565b935061412b81856020860161406f565b614134816140f5565b840191505092915050565b600060208201905081810360008301526141598184614106565b90509291505056fea2646970667358221220df62db1dd553ccece73d5ffdd2f6d7d6511e75ad5d5f74e6e7929094f58519ec64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80638da5cb5b116100de578063b7a8807c11610097578063c66301b211610071578063c66301b2146103ba578063cf084056146103d8578063eb6ced16146103f6578063fc0c546a1461042657610173565b8063b7a8807c14610364578063bc6894fe14610382578063bedf77a61461039e57610173565b80638da5cb5b146102d857806390ffbe90146102f65780639c81ff6b14610314578063a053ce1f14610332578063ac30777314610350578063b03a9a051461035a57610173565b8063312ee7fa11610130578063312ee7fa1461023a578063372500ab14610258578063464eff501461026257806353b476561461027e5780637855d30c1461029c5780638831c8dc146102ba57610173565b80630e6137cf1461017857806319cc6492146101825780631e1b25731461018c5780632748608f146101bc57806327949dab146101ec578063310a1ee31461021c575b600080fd5b610180610444565b005b61018a610898565b005b6101a660048036038101906101a19190613594565b610a3e565b6040516101b391906135d0565b60405180910390f35b6101d660048036038101906101d19190613649565b610a59565b6040516101e39190613685565b60405180910390f35b61020660048036038101906102019190613649565b610a8c565b60405161021391906135d0565b60405180910390f35b610224610aa4565b60405161023191906135d0565b60405180910390f35b610242610aaa565b60405161024f91906135d0565b60405180910390f35b610260610ab0565b005b61027c600480360381019061027791906136ff565b610c3b565b005b610286611a4d565b60405161029391906135d0565b60405180910390f35b6102a4611a53565b6040516102b191906137dd565b60405180910390f35b6102c2611a66565b6040516102cf91906135d0565b60405180910390f35b6102e0611a6c565b6040516102ed9190613685565b60405180910390f35b6102fe611a92565b60405161030b91906135d0565b60405180910390f35b61031c611a98565b60405161032991906135d0565b60405180910390f35b61033a611a9e565b60405161034791906135d0565b60405180910390f35b610358611aa4565b005b610362611f14565b005b61036c611fb0565b60405161037991906135d0565b60405180910390f35b61039c6004803603810190610397919061381d565b611fb6565b005b6103b860048036038101906103b39190613649565b6125ef565b005b6103c2612f6e565b6040516103cf91906135d0565b60405180910390f35b6103e0612f74565b6040516103ed9190613685565b60405180910390f35b610410600480360381019061040b9190613649565b612f9a565b60405161041d91906135d0565b60405180910390f35b61042e612fb2565b60405161043b91906138bd565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106a75760016104c981612fd8565b6002600054141561050f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050690613935565b60405180910390fd5b6002600081905550600a546005541061052b5761052a613955565b5b6000600554600a5461053d91906139b3565b9050600d5481101561058c57600d54600a546040517f59dc32870000000000000000000000000000000000000000000000000000000081526004016105839291906139e7565b60405180910390fd5b6002600160026101000a81548160ff021916908360038111156105b2576105b1613766565b5b021790555061062830600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f26dc6b7e309de29eb24d6830d1cc0f60c6b5d25d5d4830ce8ba77eb55468f0dc8260405161069091906135d0565b60405180910390a250600160008190555050610895565b6106b081613129565b60016106bb81612fd8565b60026000541415610701576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f890613935565b60405180910390fd5b6002600081905550600a546005541061071d5761071c613955565b5b6000600554600a5461072f91906139b3565b9050600d5481101561077e57600d54600a546040517f59dc32870000000000000000000000000000000000000000000000000000000081526004016107759291906139e7565b60405180910390fd5b6002600160026101000a81548160ff021916908360038111156107a4576107a3613766565b5b021790555061081a30600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f26dc6b7e309de29eb24d6830d1cc0f60c6b5d25d5d4830ce8ba77eb55468f0dc8260405161088291906135d0565b60405180910390a2506001600081905550505b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109a457600161091d81612fd8565b60026000541415610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90613935565b60405180910390fd5b60026000819055506003600160026101000a81548160ff0219169083600381111561099157610990613766565b5b0217905550600160008190555050610a3b565b6109ad81613129565b60016109b881612fd8565b600260005414156109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f590613935565b60405180910390fd5b60026000819055506003600160026101000a81548160ff02191690836003811115610a2c57610a2b613766565b5b02179055506001600081905550505b50565b60108160048110610a4e57600080fd5b016000915090505481565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600c5481565b60075481565b60026000541415610af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aed90613935565b60405180910390fd5b60026000819055506002610b0981612fd8565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610be1303383601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe82604051610c2791906135d0565b60405180910390a250506001600081905550565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561137b576001610cc081612fd8565b610cc86131d6565b60026000541415610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590613935565b60405180910390fd5b600260008190555083600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610de6576040517ff45d43bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600f54811015610ec75760c8878260048110610e0d57610e0c613a10565b5b60200201351115610e6f57868160048110610e2b57610e2a613a10565b5b602002013560c86040517f3f257233000000000000000000000000000000000000000000000000000000008152600401610e669291906139e7565b60405180910390fd5b868160048110610e8257610e81613a10565b5b602002013560108260048110610e9b57610e9a613a10565b5b0154610ea79190613a3f565b82610eb29190613a99565b91508080610ebf90613aef565b915050610dee565b50848015610ed6575060075481105b15610f1c57806007546040517f66338f96000000000000000000000000000000000000000000000000000000008152600401610f139291906139e7565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611053576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610fcb576040517f55fbf60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661104e576040517fd74006f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600190505b600081156111f757600260646014548561106d9190613a3f565b6110779190613b67565b6110819190613b67565b905082811061109357611092613955565b5b808361109f91906139b3565b925080600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110f09190613a99565b9250508190555080600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111469190613a99565b92505081905550806005600082825461115f9190613a99565b9250508190555085600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008114156111f6576111f5613955565b5b5b82600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a600082825461124d9190613a99565b92505081905550600e54600554600a5461126791906139b3565b11156112b057600a54600e546040517fad9d04bc0000000000000000000000000000000000000000000000000000000081526004016112a79291906139e7565b60405180910390fd5b6112ff893085601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f6d47cedf2ff836145796116ccd8b27cb538f16621a1f844f0d1c2a58e23a499a8a86858c6040516113629493929190613bc6565b60405180910390a3505050600160008190555050611a46565b61138481613129565b600161138f81612fd8565b6113976131d6565b600260005414156113dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d490613935565b60405180910390fd5b600260008190555083600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146114b5576040517ff45d43bf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600f548110156115965760c88782600481106114dc576114db613a10565b5b6020020135111561153e578681600481106114fa576114f9613a10565b5b602002013560c86040517f3f2572330000000000000000000000000000000000000000000000000000000081526004016115359291906139e7565b60405180910390fd5b86816004811061155157611550613a10565b5b60200201356010826004811061156a57611569613a10565b5b01546115769190613a3f565b826115819190613a99565b9150808061158e90613aef565b9150506114bd565b508480156115a5575060075481105b156115eb57806007546040517f66338f960000000000000000000000000000000000000000000000000000000081526004016115e29291906139e7565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611722576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561169a576040517f55fbf60100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661171d576040517fd74006f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600190505b600081156118c657600260646014548561173c9190613a3f565b6117469190613b67565b6117509190613b67565b905082811061176257611761613955565b5b808361176e91906139b3565b925080600960008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117bf9190613a99565b9250508190555080600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118159190613a99565b92505081905550806005600082825461182e9190613a99565b9250508190555085600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008114156118c5576118c4613955565b5b5b82600360008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600a600082825461191c9190613a99565b92505081905550600e54600554600a5461193691906139b3565b111561197f57600a54600e546040517fad9d04bc0000000000000000000000000000000000000000000000000000000081526004016119769291906139e7565b60405180910390fd5b6119ce893085601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f6d47cedf2ff836145796116ccd8b27cb538f16621a1f844f0d1c2a58e23a499a8a86858c604051611a319493929190613bc6565b60405180910390a35050506001600081905550505b5050505050565b600e5481565b600160029054906101000a900460ff1681565b600a5481565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60055481565b60145481565b60026000541415611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190613935565b60405180910390fd5b6002600081905550600b54421015611b3d5742600b546040517f812d154e000000000000000000000000000000000000000000000000000000008152600401611b349291906139e7565b60405180910390fd5b60006003811115611b5157611b50613766565b5b600160029054906101000a900460ff166003811115611b7357611b72613766565b5b1415611bc557600160029054906101000a900460ff166040517f64c3f1f8000000000000000000000000000000000000000000000000000000008152600401611bbc91906137dd565b60405180910390fd5b60026003811115611bd957611bd8613766565b5b600160029054906101000a900460ff166003811115611bfb57611bfa613766565b5b1415611c4d57600160029054906101000a900460ff166040517f64c3f1f8000000000000000000000000000000000000000000000000000000008152600401611c4491906137dd565b60405180910390fd5b600a5460055410611c6157611c60613955565b5b600c5442118015611c825750600d54600554600a54611c8091906139b3565b105b15611cb3576003600160026101000a81548160ff02191690836003811115611cad57611cac613766565b5b02179055505b600380811115611cc657611cc5613766565b5b600160029054906101000a900460ff166003811115611ce857611ce7613766565b5b14611d1f576040517f9b61206300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611ebb303383601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fa65a8b4f7f65a1063243d7f7e9e4da00ff767599acf21549ef2548a45d1695ae82604051611f0191906135d0565b60405180910390a2506001600081905550565b60006003811115611f2857611f27613766565b5b600160029054906101000a900460ff166003811115611f4a57611f49613766565b5b14611fae57610e10600b54611f5f9190613a99565b600c541015611f7157611f70613955565b5b6000600e5411611f8457611f83613955565b5b600e54600d541115611f9957611f98613955565b5b60326014541115611fad57611fac613955565b5b5b565b600b5481565b60018054906101000a900460ff16611fde57600160009054906101000a900460ff1615611fe7565b611fe661326e565b5b612026576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201d90613c7d565b60405180910390fd5b600060018054906101000a900460ff1615905080156120745760018060016101000a81548160ff02191690831515021790555060018060006101000a81548160ff0219169083151502179055505b600061207f81612fd8565b83600160036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff16836101600160208101906120ec9190613649565b73ffffffffffffffffffffffffffffffffffffffff16141561213a576040517fdc2e5e8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168360000160208101906121659190613649565b73ffffffffffffffffffffffffffffffffffffffff1614156121b3576040517fc7b2492000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8260600135836101400135111561220c5782610140013583606001356040517f1e5c82a50000000000000000000000000000000000000000000000000000000081526004016122039291906139e7565b60405180910390fd5b600060028461012001356122209190613c9d565b14612257576040517f84d68d9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e1083602001356122699190613a99565b836040013510156122a6576040517f3c91bee800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000836080013514156122e5576040517fa4c54a6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083606001351415612324576040517f7a61fdf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826080013583606001351115612366576040517f02179b6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60048110156123c55760008460a001826004811061238a57612389613a10565b5b6020020135141561239a576123c5565b600f60008154809291906123ad90613aef565b919050555080806123bd90613aef565b915050612369565b50603283610120013511156124195782610120013560326040517f9088a55b0000000000000000000000000000000000000000000000000000000081526004016124109291906139e7565b60405180910390fd5b82600001602081019061242c9190613649565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260200135600b819055508260400135600c819055508260600135600d819055508260800135600e819055508260a00160109060046124ac9291906134fc565b50826101200135601481905550826101400135600781905550826101600160208101906124d99190613649565b601560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060026101000a81548160ff0219169083600381111561253e5761253d613766565b5b0217905550601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb9c39e9794e0846a2b44dc834e2701f75acd7c1a7f1ee89a38d0ed38d870523b600b54600c54600d54600e5460106014546040516125c096959493929190613dc4565b60405180910390a25080156125ea5760006001806101000a81548160ff0219169083151502179055505b505050565b600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff16600160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612ae757600161267481612fd8565b61267c6131d6565b600260005414156126c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b990613935565b60405180910390fd5b60026000819055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461280091906139b3565b925050819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612881576040517fd273722600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a60008282546128d291906139b3565b925050819055506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612a89308684601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167faf65ecdc8a0d3ea90c8344c89e7001864fddf59dfdf41da2994463fe99049a5983604051612acf91906135d0565b60405180910390a25050600160008190555050612f6a565b612af081613129565b6001612afb81612fd8565b612b036131d6565b60026000541415612b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4090613935565b60405180910390fd5b60026000819055506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c8791906139b3565b925050819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612d08576040517fd273722600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600a6000828254612d5991906139b3565b925050819055506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612f10308684601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166130a0909392919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167faf65ecdc8a0d3ea90c8344c89e7001864fddf59dfdf41da2994463fe99049a5983604051612f5691906135d0565b60405180910390a250506001600081905550505b5050565b600f5481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915090505481565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806003811115612feb57612fea613766565b5b600160029054906101000a900460ff16600381111561300d5761300c613766565b5b1461305e57600160029054906101000a900460ff166040517f64c3f1f800000000000000000000000000000000000000000000000000000000815260040161305591906137dd565b60405180910390fd5b80600381111561307157613070613766565b5b600160029054906101000a900460ff16600381111561309357613092613766565b5b1461309d57600080fd5b50565b613123846323b872dd60e01b8585856040516024016130c193929190613e27565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061327f565b50505050565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461319b5733816040517f50a5f405000000000000000000000000000000000000000000000000000000008152600401613192929190613e5e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146131d357600080fd5b50565b600b544210156132215742600b546040517f812d154e0000000000000000000000000000000000000000000000000000000081526004016132189291906139e7565b60405180910390fd5b600c5442111561326c5742600c546040517fb73065c10000000000000000000000000000000000000000000000000000000081526004016132639291906139e7565b60405180910390fd5b565b600061327930613346565b15905090565b60006132e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166133699092919063ffffffff16565b905060008151111561334157808060200190518101906133019190613e9c565b613340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333790613f3b565b60405180910390fd5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606133788484600085613381565b90509392505050565b6060824710156133c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133bd90613fcd565b60405180910390fd5b6133cf85613346565b61340e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161340590614039565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161343791906140d3565b60006040518083038185875af1925050503d8060008114613474576040519150601f19603f3d011682016040523d82523d6000602084013e613479565b606091505b5091509150613489828286613495565b92505050949350505050565b606083156134a5578290506134f5565b6000835111156134b85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ec919061413f565b60405180910390fd5b9392505050565b826004810192821561352b579160200282015b8281111561352a57823582559160200191906001019061350f565b5b509050613538919061353c565b5090565b5b8082111561355557600081600090555060010161353d565b5090565b600080fd5b6000819050919050565b6135718161355e565b811461357c57600080fd5b50565b60008135905061358e81613568565b92915050565b6000602082840312156135aa576135a9613559565b5b60006135b88482850161357f565b91505092915050565b6135ca8161355e565b82525050565b60006020820190506135e560008301846135c1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613616826135eb565b9050919050565b6136268161360b565b811461363157600080fd5b50565b6000813590506136438161361d565b92915050565b60006020828403121561365f5761365e613559565b5b600061366d84828501613634565b91505092915050565b61367f8161360b565b82525050565b600060208201905061369a6000830184613676565b92915050565b600080fd5b6000819050826020600402820111156136c1576136c06136a0565b5b92915050565b60008115159050919050565b6136dc816136c7565b81146136e757600080fd5b50565b6000813590506136f9816136d3565b92915050565b60008060008060e0858703121561371957613718613559565b5b600061372787828801613634565b9450506020613738878288016136a5565b93505060a0613749878288016136ea565b92505060c061375a87828801613634565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106137a6576137a5613766565b5b50565b60008190506137b782613795565b919050565b60006137c7826137a9565b9050919050565b6137d7816137bc565b82525050565b60006020820190506137f260008301846137ce565b92915050565b600080fd5b60006101808284031215613814576138136137f8565b5b81905092915050565b6000806101a0838503121561383557613834613559565b5b600061384385828601613634565b9250506020613854858286016137fd565b9150509250929050565b6000819050919050565b600061388361387e613879846135eb565b61385e565b6135eb565b9050919050565b600061389582613868565b9050919050565b60006138a78261388a565b9050919050565b6138b78161389c565b82525050565b60006020820190506138d260008301846138ae565b92915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061391f601f836138d8565b915061392a826138e9565b602082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139be8261355e565b91506139c98361355e565b9250828210156139dc576139db613984565b5b828203905092915050565b60006040820190506139fc60008301856135c1565b613a0960208301846135c1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a4a8261355e565b9150613a558361355e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613a8e57613a8d613984565b5b828202905092915050565b6000613aa48261355e565b9150613aaf8361355e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ae457613ae3613984565b5b828201905092915050565b6000613afa8261355e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b2d57613b2c613984565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613b728261355e565b9150613b7d8361355e565b925082613b8d57613b8c613b38565b5b828204905092915050565b82818337600083830152505050565b613bb360808383613b98565b5050565b613bc0816136c7565b82525050565b600060e082019050613bdb6000830187613ba7565b613be860808301866135c1565b613bf560a08301856135c1565b613c0260c0830184613bb7565b95945050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613c67602e836138d8565b9150613c7282613c0b565b604082019050919050565b60006020820190508181036000830152613c9681613c5a565b9050919050565b6000613ca88261355e565b9150613cb38361355e565b925082613cc357613cc2613b38565b5b828206905092915050565b600060049050919050565b600081905092915050565b6000819050919050565b613cf78161355e565b82525050565b6000613d098383613cee565b60208301905092915050565b60008160001c9050919050565b6000819050919050565b6000613d3f613d3a83613d15565b613d22565b9050919050565b6000613d528254613d2c565b9050919050565b6000600182019050919050565b613d6f81613cce565b613d798184613cd9565b9250613d8482613ce4565b8060005b83811015613dbc57613d9982613d46565b613da38782613cfd565b9650613dae83613d59565b925050600181019050613d88565b505050505050565b600061012082019050613dda60008301896135c1565b613de760208301886135c1565b613df460408301876135c1565b613e0160608301866135c1565b613e0e6080830185613d66565b613e1c6101008301846135c1565b979650505050505050565b6000606082019050613e3c6000830186613676565b613e496020830185613676565b613e5660408301846135c1565b949350505050565b6000604082019050613e736000830185613676565b613e806020830184613676565b9392505050565b600081519050613e96816136d3565b92915050565b600060208284031215613eb257613eb1613559565b5b6000613ec084828501613e87565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613f25602a836138d8565b9150613f3082613ec9565b604082019050919050565b60006020820190508181036000830152613f5481613f18565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613fb76026836138d8565b9150613fc282613f5b565b604082019050919050565b60006020820190508181036000830152613fe681613faa565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614023601d836138d8565b915061402e82613fed565b602082019050919050565b6000602082019050818103600083015261405281614016565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561408d578082015181840152602081019050614072565b8381111561409c576000848401525b50505050565b60006140ad82614059565b6140b78185614064565b93506140c781856020860161406f565b80840191505092915050565b60006140df82846140a2565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b6000614111826140ea565b61411b81856138d8565b935061412b81856020860161406f565b614134816140f5565b840191505092915050565b600060208201905081810360008301526141598184614106565b90509291505056fea2646970667358221220df62db1dd553ccece73d5ffdd2f6d7d6511e75ad5d5f74e6e7929094f58519ec64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize(address,(address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,address))": {
        "details": "Initializes a Crowdtainer.",
        "params": {
          "_campaignData": "Data defining all rules and values of this Crowdtainer instance."
        }
      }
    },
    "title": "Crowdtainer contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "abortProject()": {
        "notice": "Function used by project deployer to signal that it is no longer possible to the ship service or product.         This puts the project into `Failed` state and participants can withdraw their funds."
      },
      "claimFunds()": {
        "notice": "Function used by participants to withdrawl funds from a failed/expired project."
      },
      "claimRewards()": {
        "notice": "Function used by participants to withdrawl referral rewards from a successful project."
      },
      "getPaidAndDeliver()": {
        "notice": "Function used by project deployer to signal commitment to ship service or product by withdrawing/receiving the payment."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 167,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 89,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 92,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 2302,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "crowdtainerState",
        "offset": 2,
        "slot": "1",
        "type": "t_enum(CrowdtainerState)4164"
      },
      {
        "astId": 2304,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "owner",
        "offset": 3,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2306,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "shippingAgent",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2310,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "costForWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2314,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "accumulatedRewardsOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2316,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "accumulatedRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "referrerOfReferee",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2322,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "referralEligibilityValue",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2326,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "enableReferral",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2330,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "discountForUser",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2332,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "totalValueRaised",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2453,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "openingTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2455,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "expireTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2457,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "targetMinimum",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2459,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "targetMaximum",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2461,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "numberOfProducts",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2465,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "unitPricePerType",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)4_storage"
      },
      {
        "astId": 2467,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "referralRate",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2470,
        "contract": "src/contracts/Crowdtainer.sol:Crowdtainer",
        "label": "token",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC20)274"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)274": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(CrowdtainerState)4164": {
        "encoding": "inplace",
        "label": "enum CrowdtainerState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}